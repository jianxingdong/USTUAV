   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"imu.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.imu_init,"ax",%progbits
  18              		.align	1
  19              		.global	imu_init
  20              		.thumb
  21              		.thumb_func
  23              	imu_init:
  24              	.LFB4:
  25              		.file 1 "subsystems/imu.c"
   1:subsystems/imu.c **** /*
   2:subsystems/imu.c ****  * $Id$
   3:subsystems/imu.c ****  *
   4:subsystems/imu.c ****  * Copyright (C) 2008-2010 The Paparazzi Team
   5:subsystems/imu.c ****  *
   6:subsystems/imu.c ****  * This file is part of paparazzi.
   7:subsystems/imu.c ****  *
   8:subsystems/imu.c ****  * paparazzi is free software; you can redistribute it and/or modify
   9:subsystems/imu.c ****  * it under the terms of the GNU General Public License as published by
  10:subsystems/imu.c ****  * the Free Software Foundation; either version 2, or (at your option)
  11:subsystems/imu.c ****  * any later version.
  12:subsystems/imu.c ****  *
  13:subsystems/imu.c ****  * paparazzi is distributed in the hope that it will be useful,
  14:subsystems/imu.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:subsystems/imu.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:subsystems/imu.c ****  * GNU General Public License for more details.
  17:subsystems/imu.c ****  *
  18:subsystems/imu.c ****  * You should have received a copy of the GNU General Public License
  19:subsystems/imu.c ****  * along with paparazzi; see the file COPYING.  If not, write to
  20:subsystems/imu.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  21:subsystems/imu.c ****  * Boston, MA 02111-1307, USA.
  22:subsystems/imu.c ****  */
  23:subsystems/imu.c **** 
  24:subsystems/imu.c **** /** @file imu.c
  25:subsystems/imu.c ****  * Inertial Measurement Unit interface.
  26:subsystems/imu.c ****  */
  27:subsystems/imu.c **** 
  28:subsystems/imu.c **** #include "subsystems/imu.h"
  29:subsystems/imu.c **** 
  30:subsystems/imu.c **** struct Imu imu;
  31:subsystems/imu.c **** 
  32:subsystems/imu.c **** void imu_init(void) {
  26              		.loc 1 32 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  33:subsystems/imu.c **** 
  34:subsystems/imu.c ****   /* initialises neutrals */
  35:subsystems/imu.c ****   RATES_ASSIGN(imu.gyro_neutral,  IMU_GYRO_P_NEUTRAL,  IMU_GYRO_Q_NEUTRAL,  IMU_GYRO_R_NEUTRAL);
  30              		.loc 1 35 0
  31 0000 4A4B     		ldr	r3, .L7
  32 0002 0022     		movs	r2, #0
  32:subsystems/imu.c **** void imu_init(void) {
  33              		.loc 1 32 0
  34 0004 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 36
  37              		.cfi_offset 14, -4
  38              		.cfi_offset 11, -8
  39              		.cfi_offset 10, -12
  40              		.cfi_offset 9, -16
  41              		.cfi_offset 8, -20
  42              		.cfi_offset 7, -24
  43              		.cfi_offset 6, -28
  44              		.cfi_offset 5, -32
  45              		.cfi_offset 4, -36
  46              		.loc 1 35 0
  47 0008 DA63     		str	r2, [r3, #60]
  48 000a 1A64     		str	r2, [r3, #64]
  49 000c 5A64     		str	r2, [r3, #68]
  36:subsystems/imu.c **** 
  37:subsystems/imu.c ****   VECT3_ASSIGN(imu.accel_neutral, IMU_ACCEL_X_NEUTRAL, IMU_ACCEL_Y_NEUTRAL, IMU_ACCEL_Z_NEUTRAL);
  50              		.loc 1 37 0
  51 000e 9A64     		str	r2, [r3, #72]
  52 0010 DA64     		str	r2, [r3, #76]
  53 0012 1A65     		str	r2, [r3, #80]
  38:subsystems/imu.c **** 
  39:subsystems/imu.c **** #if defined IMU_MAG_X_NEUTRAL && defined IMU_MAG_Y_NEUTRAL && defined IMU_MAG_Z_NEUTRAL
  40:subsystems/imu.c ****   VECT3_ASSIGN(imu.mag_neutral,   IMU_MAG_X_NEUTRAL,   IMU_MAG_Y_NEUTRAL,   IMU_MAG_Z_NEUTRAL);
  41:subsystems/imu.c **** #else
  42:subsystems/imu.c **** #if USE_MAGNETOMETER
  43:subsystems/imu.c **** #pragma message "Info: Magnetomter neutrals are set to zero!"
  44:subsystems/imu.c **** #endif
  45:subsystems/imu.c ****   INT_VECT3_ZERO(imu.mag_neutral);
  54              		.loc 1 45 0
  55 0014 5A65     		str	r2, [r3, #84]
  56 0016 9A65     		str	r2, [r3, #88]
  57 0018 DA65     		str	r2, [r3, #92]
  58              	.LVL0:
  59              	.LBB2:
  60              	.LBB3:
  46:subsystems/imu.c **** #endif
  47:subsystems/imu.c **** 
  48:subsystems/imu.c ****   /*
  49:subsystems/imu.c ****     Compute quaternion and rotation matrix
  50:subsystems/imu.c ****     for conversions between body and imu frame
  51:subsystems/imu.c ****   */
  52:subsystems/imu.c ****   struct Int32Eulers body_to_imu_eulers =
  53:subsystems/imu.c ****     { ANGLE_BFP_OF_REAL(IMU_BODY_TO_IMU_PHI),
  54:subsystems/imu.c ****       ANGLE_BFP_OF_REAL(IMU_BODY_TO_IMU_THETA),
  55:subsystems/imu.c ****       ANGLE_BFP_OF_REAL(IMU_BODY_TO_IMU_PSI) };
  56:subsystems/imu.c ****   INT32_QUAT_OF_EULERS(imu.body_to_imu_quat, body_to_imu_eulers);
  61              		.loc 1 56 0
  62 001a 454B     		ldr	r3, .L7+4
  63              	.LBE3:
  64              	.LBE2:
  32:subsystems/imu.c **** void imu_init(void) {
  65              		.loc 1 32 0
  66 001c 85B0     		sub	sp, sp, #20
  67              	.LCFI1:
  68              		.cfi_def_cfa_offset 56
  69              	.LBB6:
  70              	.LBB4:
  71              		.loc 1 56 0
  72 001e B3F900B0 		ldrsh	fp, [r3, #0]
  73              	.LVL1:
  74              	.LBE4:
  75              	.LBB5:
  76 0022 03F54953 		add	r3, r3, #12864
  77 0026 B3F90220 		ldrsh	r2, [r3, #2]
  78              	.LVL2:
  79              	.LBE5:
  80 002a 0BFB0BF0 		mul	r0, fp, fp
  81 002e 02FB02F1 		mul	r1, r2, r2
  82 0032 8013     		asrs	r0, r0, #14
  83 0034 8913     		asrs	r1, r1, #14
  84              	.LVL3:
  85 0036 00FB0BF4 		mul	r4, r0, fp
  86 003a 0BFB02F3 		mul	r3, fp, r2
  87 003e 01FB02FC 		mul	ip, r1, r2
  88 0042 0194     		str	r4, [sp, #4]
  89 0044 6413     		asrs	r4, r4, #13
  90 0046 9B13     		asrs	r3, r3, #14
  91              	.LVL4:
  92 0048 04EB6C3C 		add	ip, r4, ip, asr #13
  93 004c 5742     		negs	r7, r2
  94 004e 01FB0BF4 		mul	r4, r1, fp
  95 0052 03FB02F5 		mul	r5, r3, r2
  96 0056 4743     		muls	r7, r0, r7
  97 0058 6413     		asrs	r4, r4, #13
  98 005a 04EB6737 		add	r7, r4, r7, asr #13
  99 005e 0295     		str	r5, [sp, #8]
 100 0060 6C13     		asrs	r4, r5, #13
 101 0062 03FB0BF5 		mul	r5, r3, fp
 102 0066 CBF1000B 		rsb	fp, fp, #0
 103              	.LVL5:
 104 006a 04EB6536 		add	r6, r4, r5, asr #13
 105 006e 0395     		str	r5, [sp, #12]
 106 0070 03FB0BF5 		mul	r5, r3, fp
 107              	.LBE6:
 108              	.LBB7:
 109              	.LBB8:
  57:subsystems/imu.c ****   INT32_QUAT_NORMALIZE(imu.body_to_imu_quat);
 110              		.loc 1 57 0
 111 0074 07FB07F8 		mul	r8, r7, r7
 112              	.LBE8:
 113              	.LBE7:
 114              	.LBB11:
  56:subsystems/imu.c ****   INT32_QUAT_OF_EULERS(imu.body_to_imu_quat, body_to_imu_eulers);
 115              		.loc 1 56 0
 116 0078 04EB6535 		add	r5, r4, r5, asr #13
 117              	.LBE11:
 118              	.LBB12:
 119              	.LBB10:
 120              		.loc 1 57 0
 121 007c 06FB06F4 		mul	r4, r6, r6
 122 0080 0CFB0C88 		mla	r8, ip, ip, r8
 123 0084 05FB0544 		mla	r4, r5, r5, r4
 124              	.LVL6:
 125 0088 18EB0408 		adds	r8, r8, r4
 126              	.LVL7:
 127 008c 15D0     		beq	.L2
 128              	.LVL8:
 129              	.LBB9:
 130              		.loc 1 57 0 is_stmt 0 discriminator 2
 131 008e 4446     		mov	r4, r8
 132 0090 4FF0280A 		mov	sl, #40
 133 0094 00E0     		b	.L4
 134              	.LVL9:
 135              	.L6:
 136              		.loc 1 57 0
 137 0096 4C46     		mov	r4, r9
 138              	.LVL10:
 139              	.L4:
 140              		.loc 1 57 0 discriminator 3
 141 0098 B8FBF4F9 		udiv	r9, r8, r4
 142              	.LVL11:
 143 009c A144     		add	r9, r9, r4
 144              	.LVL12:
 145 009e 4FEA5909 		lsr	r9, r9, #1
 146              	.LVL13:
 147 00a2 C9EB0404 		rsb	r4, r9, r4
 148              	.LVL14:
 149 00a6 012C     		cmp	r4, #1
 150 00a8 06D9     		bls	.L3
 151              		.loc 1 57 0 discriminator 4
 152 00aa 0AF1FF3A 		add	sl, sl, #-1
 153 00ae 5FFA8AFA 		uxtb	sl, sl
 154 00b2 BAF1000F 		cmp	sl, #0
 155 00b6 EED1     		bne	.L6
 156              	.L3:
 157              		.loc 1 57 0 discriminator 5
 158 00b8 C846     		mov	r8, r9
 159              	.LVL15:
 160              	.L2:
 161              	.LBE9:
 162              	.LBE10:
 163              	.LBE12:
 164              	.LBB13:
  58:subsystems/imu.c ****   INT32_RMAT_OF_EULERS(imu.body_to_imu_rmat, body_to_imu_eulers);
 165              		.loc 1 58 0 is_stmt 1 discriminator 6
 166 00ba 4243     		muls	r2, r0, r2
 167              	.LVL16:
 168              	.LBE13:
 169              	.LBB14:
  57:subsystems/imu.c ****   INT32_QUAT_NORMALIZE(imu.body_to_imu_quat);
 170              		.loc 1 57 0 discriminator 6
 171 00bc 1B4C     		ldr	r4, .L7
 172 00be ED03     		lsls	r5, r5, #15
 173 00c0 95FBF8F5 		sdiv	r5, r5, r8
 174 00c4 C4F89050 		str	r5, [r4, #144]
 175              	.LVL17:
 176              	.LBE14:
 177              	.LBB15:
 178              		.loc 1 58 0 discriminator 6
 179 00c8 019D     		ldr	r5, [sp, #4]
 180 00ca C3EBA232 		rsb	r2, r3, r2, asr #14
 181 00ce C4F8A020 		str	r2, [r4, #160]
 182 00d2 01EBA532 		add	r2, r1, r5, asr #14
 183 00d6 C4F8A420 		str	r2, [r4, #164]
 184 00da 039D     		ldr	r5, [sp, #12]
 185 00dc 029A     		ldr	r2, [sp, #8]
 186              	.LBE15:
 187              	.LBB16:
  57:subsystems/imu.c ****   INT32_QUAT_NORMALIZE(imu.body_to_imu_quat);
 188              		.loc 1 57 0 discriminator 6
 189 00de FF03     		lsls	r7, r7, #15
 190 00e0 F603     		lsls	r6, r6, #15
 191 00e2 4FEACC3C 		lsl	ip, ip, #15
 192 00e6 9CFBF8FC 		sdiv	ip, ip, r8
 193 00ea 97FBF8F7 		sdiv	r7, r7, r8
 194 00ee 96FBF8F6 		sdiv	r6, r6, r8
 195              	.LBE16:
 196              	.LBB17:
 197              		.loc 1 58 0 discriminator 6
 198 00f2 C4F89830 		str	r3, [r4, #152]
 199 00f6 C4F8A830 		str	r3, [r4, #168]
 200 00fa 00EBA230 		add	r0, r0, r2, asr #14
 201              	.LVL18:
 202 00fe C3EBA533 		rsb	r3, r3, r5, asr #14
 203              	.LVL19:
 204              	.LBE17:
 205              	.LBB18:
  57:subsystems/imu.c ****   INT32_QUAT_NORMALIZE(imu.body_to_imu_quat);
 206              		.loc 1 57 0 discriminator 6
 207 0102 C4F884C0 		str	ip, [r4, #132]
 208 0106 C4F88870 		str	r7, [r4, #136]
 209 010a C4F88C60 		str	r6, [r4, #140]
 210              	.LBE18:
 211              	.LBB19:
 212              		.loc 1 58 0 discriminator 6
 213 010e C4F89410 		str	r1, [r4, #148]
 214 0112 C4F89CB0 		str	fp, [r4, #156]
 215 0116 C4F8AC00 		str	r0, [r4, #172]
 216 011a C4F8B030 		str	r3, [r4, #176]
 217 011e C4F8B410 		str	r1, [r4, #180]
 218              	.LBE19:
  59:subsystems/imu.c **** 
  60:subsystems/imu.c ****   imu_impl_init();
  61:subsystems/imu.c **** }
 219              		.loc 1 61 0 discriminator 6
 220 0122 05B0     		add	sp, sp, #20
 221 0124 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  60:subsystems/imu.c ****   imu_impl_init();
 222              		.loc 1 60 0 discriminator 6
 223 0128 FFF7FEBF 		b	imu_impl_init
 224              	.LVL20:
 225              	.L8:
 226              		.align	2
 227              	.L7:
 228 012c 00000000 		.word	.LANCHOR0
 229 0130 00000000 		.word	pprz_trig_int
 230              		.cfi_endproc
 231              	.LFE4:
 233              		.section	.text.imu_float_init,"ax",%progbits
 234              		.align	1
 235              		.global	imu_float_init
 236              		.thumb
 237              		.thumb_func
 239              	imu_float_init:
 240              	.LFB5:
  62:subsystems/imu.c **** 
  63:subsystems/imu.c **** 
  64:subsystems/imu.c **** void imu_float_init(struct ImuFloat* imuf) {
 241              		.loc 1 64 0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 0
 244              		@ frame_needed = 0, uses_anonymous_args = 0
 245              		@ link register save eliminated.
 246              	.LVL21:
  65:subsystems/imu.c **** 
  66:subsystems/imu.c ****   /*
  67:subsystems/imu.c ****     Compute quaternion and rotation matrix
  68:subsystems/imu.c ****     for conversions between body and imu frame
  69:subsystems/imu.c ****   */
  70:subsystems/imu.c ****   EULERS_ASSIGN(imuf->body_to_imu_eulers,
 247              		.loc 1 70 0
 248 0000 0023     		movs	r3, #0
 249              	.LBB20:
  71:subsystems/imu.c **** 		IMU_BODY_TO_IMU_PHI, IMU_BODY_TO_IMU_THETA, IMU_BODY_TO_IMU_PSI);
  72:subsystems/imu.c ****   FLOAT_QUAT_OF_EULERS(imuf->body_to_imu_quat, imuf->body_to_imu_eulers);
 250              		.loc 1 72 0
 251 0002 4FF07E52 		mov	r2, #1065353216
 252              	.LBE20:
 253              	.LBB21:
  73:subsystems/imu.c ****   FLOAT_QUAT_NORMALIZE(imuf->body_to_imu_quat);
  74:subsystems/imu.c ****   FLOAT_RMAT_OF_EULERS(imuf->body_to_imu_rmat, imuf->body_to_imu_eulers);
 254              		.loc 1 74 0
 255 0006 4FF00041 		mov	r1, #-2147483648
 256              	.LBE21:
  70:subsystems/imu.c ****   EULERS_ASSIGN(imuf->body_to_imu_eulers,
 257              		.loc 1 70 0
 258 000a 0363     		str	r3, [r0, #48]	@ float
 259 000c 4363     		str	r3, [r0, #52]	@ float
 260 000e 8363     		str	r3, [r0, #56]	@ float
 261              	.LVL22:
 262              	.LBB22:
  72:subsystems/imu.c ****   FLOAT_QUAT_OF_EULERS(imuf->body_to_imu_quat, imuf->body_to_imu_eulers);
 263              		.loc 1 72 0
 264 0010 C263     		str	r2, [r0, #60]	@ float
 265 0012 0364     		str	r3, [r0, #64]	@ float
 266 0014 4364     		str	r3, [r0, #68]	@ float
 267              	.LVL23:
 268              	.LBE22:
 269              	.LBB23:
  73:subsystems/imu.c ****   FLOAT_QUAT_NORMALIZE(imuf->body_to_imu_quat);
 270              		.loc 1 73 0
 271 0016 8364     		str	r3, [r0, #72]	@ float
 272              	.LVL24:
 273              	.LBE23:
 274              	.LBB24:
 275              		.loc 1 74 0
 276 0018 C264     		str	r2, [r0, #76]	@ float
 277 001a 0365     		str	r3, [r0, #80]	@ float
 278 001c 4165     		str	r1, [r0, #84]	@ float
 279 001e 8365     		str	r3, [r0, #88]	@ float
 280 0020 C265     		str	r2, [r0, #92]	@ float
 281 0022 0366     		str	r3, [r0, #96]	@ float
 282 0024 4366     		str	r3, [r0, #100]	@ float
 283 0026 8366     		str	r3, [r0, #104]	@ float
 284 0028 C266     		str	r2, [r0, #108]	@ float
 285              	.LBE24:
  75:subsystems/imu.c **** 
  76:subsystems/imu.c **** }
 286              		.loc 1 76 0
 287 002a 7047     		bx	lr
 288              		.cfi_endproc
 289              	.LFE5:
 291              		.global	imu
 292              		.section	.bss.imu,"aw",%nobits
 293              		.align	2
 294              		.set	.LANCHOR0,. + 0
 297              	imu:
 298 0000 00000000 		.space	184
 298      00000000 
 298      00000000 
 298      00000000 
 298      00000000 
 299              		.text
 300              	.Letext0:
 301              		.file 2 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 302              		.file 3 "./math/pprz_algebra_int.h"
 303              		.file 4 "./math/pprz_algebra_float.h"
 304              		.file 5 "./subsystems/imu.h"
 305              		.file 6 "./subsystems/imu/imu_aspirin2.h"
 306              		.file 7 "./math/pprz_trig_int.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 imu.c
     /tmp/ccx9XqLm.s:18     .text.imu_init:0000000000000000 $t
     /tmp/ccx9XqLm.s:23     .text.imu_init:0000000000000000 imu_init
     /tmp/ccx9XqLm.s:228    .text.imu_init:000000000000012c $d
     /tmp/ccx9XqLm.s:234    .text.imu_float_init:0000000000000000 $t
     /tmp/ccx9XqLm.s:239    .text.imu_float_init:0000000000000000 imu_float_init
     /tmp/ccx9XqLm.s:297    .bss.imu:0000000000000000 imu
     /tmp/ccx9XqLm.s:293    .bss.imu:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
imu_impl_init
pprz_trig_int
