   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"estimator.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.alt_kalman_reset,"ax",%progbits
  18              		.align	1
  19              		.global	alt_kalman_reset
  20              		.thumb
  21              		.thumb_func
  23              	alt_kalman_reset:
  24              	.LFB9:
  25              		.file 1 "estimator.c"
   1:estimator.c   **** /*
   2:estimator.c   ****  * Paparazzi autopilot $Id$
   3:estimator.c   ****  *
   4:estimator.c   ****  * Copyright (C) 2004-2010 The Paparazzi Team
   5:estimator.c   ****  *
   6:estimator.c   ****  * This file is part of paparazzi.
   7:estimator.c   ****  *
   8:estimator.c   ****  * paparazzi is free software; you can redistribute it and/or modify
   9:estimator.c   ****  * it under the terms of the GNU General Public License as published by
  10:estimator.c   ****  * the Free Software Foundation; either version 2, or (at your option)
  11:estimator.c   ****  * any later version.
  12:estimator.c   ****  *
  13:estimator.c   ****  * paparazzi is distributed in the hope that it will be useful,
  14:estimator.c   ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:estimator.c   ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:estimator.c   ****  * GNU General Public License for more details.
  17:estimator.c   ****  *
  18:estimator.c   ****  * You should have received a copy of the GNU General Public License
  19:estimator.c   ****  * along with paparazzi; see the file COPYING.  If not, write to
  20:estimator.c   ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  21:estimator.c   ****  * Boston, MA 02111-1307, USA.
  22:estimator.c   ****  *
  23:estimator.c   ****  */
  24:estimator.c   **** 
  25:estimator.c   **** /** \file estimator.c
  26:estimator.c   ****  * \brief State estimate, fusioning sensors
  27:estimator.c   ****  */
  28:estimator.c   **** 
  29:estimator.c   **** #include <inttypes.h>
  30:estimator.c   **** #include <math.h>
  31:estimator.c   **** 
  32:estimator.c   **** #include "estimator.h"
  33:estimator.c   **** #include "mcu_periph/uart.h"
  34:estimator.c   **** #include "ap_downlink.h"
  35:estimator.c   **** #include "subsystems/gps.h"
  36:estimator.c   **** #include "subsystems/nav.h"
  37:estimator.c   **** #ifdef EXTRA_DOWNLINK_DEVICE
  38:estimator.c   **** #include "core/extra_pprz_dl.h"
  39:estimator.c   **** #endif
  40:estimator.c   **** 
  41:estimator.c   **** /* position in meters */
  42:estimator.c   **** float estimator_x;
  43:estimator.c   **** float estimator_y;
  44:estimator.c   **** float estimator_z;
  45:estimator.c   **** 
  46:estimator.c   **** float estimator_z_dot;
  47:estimator.c   **** 
  48:estimator.c   **** /* attitude in radian */
  49:estimator.c   **** float estimator_phi;
  50:estimator.c   **** float estimator_psi;
  51:estimator.c   **** float estimator_theta;
  52:estimator.c   **** 
  53:estimator.c   **** /* rates in radians per second */
  54:estimator.c   **** float estimator_p;
  55:estimator.c   **** float estimator_q;
  56:estimator.c   **** float estimator_r;
  57:estimator.c   **** 
  58:estimator.c   **** /* flight time in seconds */
  59:estimator.c   **** uint16_t estimator_flight_time;
  60:estimator.c   **** /* flight time in seconds */
  61:estimator.c   **** float estimator_t;
  62:estimator.c   **** 
  63:estimator.c   **** /* horizontal speed in module and dir */
  64:estimator.c   **** float estimator_hspeed_mod;
  65:estimator.c   **** float estimator_hspeed_dir;
  66:estimator.c   **** 
  67:estimator.c   **** /* wind */
  68:estimator.c   **** float wind_east, wind_north;
  69:estimator.c   **** float estimator_airspeed;
  70:estimator.c   **** float estimator_AOA;
  71:estimator.c   **** 
  72:estimator.c   **** #define NORM_RAD_ANGLE2(x) { \
  73:estimator.c   ****     while (x > 2 * M_PI) x -= 2 * M_PI; \
  74:estimator.c   ****     while (x < 0 ) x += 2 * M_PI; \
  75:estimator.c   ****   }
  76:estimator.c   **** 
  77:estimator.c   **** 
  78:estimator.c   **** #define EstimatorSetSpeedCart(vx, vy, vz) { \
  79:estimator.c   ****   estimator_vx = vx; \
  80:estimator.c   ****   estimator_vy = vy; \
  81:estimator.c   ****   estimator_vz = vz; \
  82:estimator.c   **** }
  83:estimator.c   **** 
  84:estimator.c   **** 
  85:estimator.c   **** void estimator_init( void ) {
  86:estimator.c   **** 
  87:estimator.c   ****   EstimatorSetPosXY(0., 0.);
  88:estimator.c   ****   EstimatorSetAlt(0.);
  89:estimator.c   **** 
  90:estimator.c   ****   EstimatorSetAtt (0., 0., 0);
  91:estimator.c   **** 
  92:estimator.c   ****   EstimatorSetSpeedPol ( 0., 0., 0.);
  93:estimator.c   **** 
  94:estimator.c   ****   EstimatorSetRate(0., 0., 0.);
  95:estimator.c   **** 
  96:estimator.c   **** #ifdef USE_AOA
  97:estimator.c   ****   EstimatorSetAOA( 0. );
  98:estimator.c   **** #endif
  99:estimator.c   **** 
 100:estimator.c   ****   estimator_flight_time = 0;
 101:estimator.c   **** 
 102:estimator.c   ****   // FIXME? Set initial airspeed to zero if USE_AIRSPEED ?
 103:estimator.c   ****   EstimatorSetAirspeed( NOMINAL_AIRSPEED );
 104:estimator.c   **** }
 105:estimator.c   **** 
 106:estimator.c   **** 
 107:estimator.c   **** bool_t alt_kalman_enabled;
 108:estimator.c   **** 
 109:estimator.c   **** #ifdef ALT_KALMAN
 110:estimator.c   **** 
 111:estimator.c   **** #ifndef ALT_KALMAN_ENABLED
 112:estimator.c   **** #define ALT_KALMAN_ENABLED FALSE
 113:estimator.c   **** #endif
 114:estimator.c   **** 
 115:estimator.c   **** #define GPS_SIGMA2 1.
 116:estimator.c   **** #define GPS_DT 0.25
 117:estimator.c   **** #define GPS_R 2.
 118:estimator.c   **** 
 119:estimator.c   **** #define BARO_DT 0.1
 120:estimator.c   **** 
 121:estimator.c   **** static float p[2][2];
 122:estimator.c   **** 
 123:estimator.c   **** void alt_kalman_reset( void ) {
  26              		.loc 1 123 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 124:estimator.c   ****   p[0][0] = 1.;
  31              		.loc 1 124 0
  32 0000 044B     		ldr	r3, .L2
  33 0002 4FF07E52 		mov	r2, #1065353216
 125:estimator.c   ****   p[0][1] = 0.;
  34              		.loc 1 125 0
  35 0006 0021     		movs	r1, #0
 124:estimator.c   ****   p[0][0] = 1.;
  36              		.loc 1 124 0
  37 0008 1A60     		str	r2, [r3, #0]	@ float
  38              		.loc 1 125 0
  39 000a 5960     		str	r1, [r3, #4]	@ float
 126:estimator.c   ****   p[1][0] = 0.;
  40              		.loc 1 126 0
  41 000c 9960     		str	r1, [r3, #8]	@ float
 127:estimator.c   ****   p[1][1] = 1.;
  42              		.loc 1 127 0
  43 000e DA60     		str	r2, [r3, #12]	@ float
 128:estimator.c   **** }
  44              		.loc 1 128 0
  45 0010 7047     		bx	lr
  46              	.L3:
  47 0012 00BF     		.align	2
  48              	.L2:
  49 0014 00000000 		.word	.LANCHOR0
  50              		.cfi_endproc
  51              	.LFE9:
  53              		.section	.text.alt_kalman_init,"ax",%progbits
  54              		.align	1
  55              		.global	alt_kalman_init
  56              		.thumb
  57              		.thumb_func
  59              	alt_kalman_init:
  60              	.LFB10:
 129:estimator.c   **** 
 130:estimator.c   **** void alt_kalman_init( void ) {
  61              		.loc 1 130 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
 131:estimator.c   ****   alt_kalman_enabled = ALT_KALMAN_ENABLED;
  66              		.loc 1 131 0
  67 0000 024B     		ldr	r3, .L5
  68 0002 0122     		movs	r2, #1
  69 0004 1A70     		strb	r2, [r3, #0]
 132:estimator.c   ****   alt_kalman_reset();
 133:estimator.c   **** }
  70              		.loc 1 133 0
 132:estimator.c   ****   alt_kalman_reset();
  71              		.loc 1 132 0
  72 0006 FFF7FEBF 		b	alt_kalman_reset
  73              	.L6:
  74 000a 00BF     		.align	2
  75              	.L5:
  76 000c 00000000 		.word	.LANCHOR1
  77              		.cfi_endproc
  78              	.LFE10:
  80              		.global	__aeabi_fmul
  81              		.global	__aeabi_fadd
  82              		.global	__aeabi_f2d
  83              		.global	__aeabi_dcmpgt
  84              		.global	__aeabi_fdiv
  85              		.global	__aeabi_fsub
  86              		.section	.text.alt_kalman,"ax",%progbits
  87              		.align	1
  88              		.global	alt_kalman
  89              		.thumb
  90              		.thumb_func
  92              	alt_kalman:
  93              	.LFB11:
 134:estimator.c   **** 
 135:estimator.c   **** void alt_kalman(float gps_z) {
  94              		.loc 1 135 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 16
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              	.LVL0:
  99 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100              	.LCFI0:
 101              		.cfi_def_cfa_offset 36
 102              		.cfi_offset 14, -4
 103              		.cfi_offset 11, -8
 104              		.cfi_offset 10, -12
 105              		.cfi_offset 9, -16
 106              		.cfi_offset 8, -20
 107              		.cfi_offset 7, -24
 108              		.cfi_offset 6, -28
 109              		.cfi_offset 5, -32
 110              		.cfi_offset 4, -36
 136:estimator.c   ****   float DT;
 137:estimator.c   ****   float R;
 138:estimator.c   ****   float SIGMA2;
 139:estimator.c   **** 
 140:estimator.c   **** #if USE_BARO_MS5534A
 141:estimator.c   ****   if (alt_baro_enabled) {
 142:estimator.c   ****     DT = BARO_DT;
 143:estimator.c   ****     R = baro_MS5534A_r;
 144:estimator.c   ****     SIGMA2 = baro_MS5534A_sigma2;
 145:estimator.c   ****   } else
 146:estimator.c   **** #elif USE_BARO_ETS
 147:estimator.c   ****   if (baro_ets_enabled) {
 148:estimator.c   ****     DT = BARO_ETS_DT;
 149:estimator.c   ****     R = baro_ets_r;
 150:estimator.c   ****     SIGMA2 = baro_ets_sigma2;
 151:estimator.c   ****   } else
 152:estimator.c   **** #elif USE_BARO_BMP
 153:estimator.c   ****   if (baro_bmp_enabled) {
 154:estimator.c   ****     DT = BARO_BMP_DT;
 155:estimator.c   ****     R = baro_bmp_r;
 156:estimator.c   ****     SIGMA2 = baro_bmp_sigma2;
 157:estimator.c   ****   } else
 158:estimator.c   **** #endif
 159:estimator.c   ****   {
 160:estimator.c   ****     DT = GPS_DT;
 161:estimator.c   ****     R = GPS_R;
 162:estimator.c   ****     SIGMA2 = GPS_SIGMA2;
 163:estimator.c   ****   }
 164:estimator.c   **** 
 165:estimator.c   ****   float q[2][2];
 166:estimator.c   ****   q[0][0] = DT*DT*DT*DT/4.;
 167:estimator.c   ****   q[0][1] = DT*DT*DT/2.;
 168:estimator.c   ****   q[1][0] = DT*DT*DT/2.;
 169:estimator.c   ****   q[1][1] = DT*DT;
 170:estimator.c   **** 
 171:estimator.c   **** 
 172:estimator.c   ****   /* predict */
 173:estimator.c   ****   estimator_z += estimator_z_dot * DT;
 111              		.loc 1 173 0
 112 0004 564B     		ldr	r3, .L11+8
 135:estimator.c   **** void alt_kalman(float gps_z) {
 113              		.loc 1 135 0
 114 0006 85B0     		sub	sp, sp, #20
 115              	.LCFI1:
 116              		.cfi_def_cfa_offset 56
 117              		.loc 1 173 0
 118 0008 1B68     		ldr	r3, [r3, #0]	@ float
 119 000a DFF85C81 		ldr	r8, .L11+16
 135:estimator.c   **** void alt_kalman(float gps_z) {
 120              		.loc 1 135 0
 121 000e 0390     		str	r0, [sp, #12]	@ float
 122              		.loc 1 173 0
 123 0010 4FF07A51 		mov	r1, #1048576000
 124 0014 1846     		mov	r0, r3
 125              	.LVL1:
 126 0016 0093     		str	r3, [sp, #0]	@ float
 127 0018 FFF7FEFF 		bl	__aeabi_fmul
 128 001c D8F80010 		ldr	r1, [r8, #0]	@ float
 129 0020 FFF7FEFF 		bl	__aeabi_fadd
 174:estimator.c   ****   p[0][0] = p[0][0]+p[1][0]*DT+DT*(p[0][1]+p[1][1]*DT) + SIGMA2*q[0][0];
 130              		.loc 1 174 0
 131 0024 4F4C     		ldr	r4, .L11+12
 173:estimator.c   ****   estimator_z += estimator_z_dot * DT;
 132              		.loc 1 173 0
 133 0026 C8F80000 		str	r0, [r8, #0]	@ float
 134              		.loc 1 174 0
 135 002a E768     		ldr	r7, [r4, #12]	@ float
 136 002c 4FF07A51 		mov	r1, #1048576000
 173:estimator.c   ****   estimator_z += estimator_z_dot * DT;
 137              		.loc 1 173 0
 138 0030 0646     		mov	r6, r0
 139              		.loc 1 174 0
 140 0032 3846     		mov	r0, r7
 141 0034 FFF7FEFF 		bl	__aeabi_fmul
 142 0038 6168     		ldr	r1, [r4, #4]	@ float
 143 003a 8346     		mov	fp, r0
 144 003c FFF7FEFF 		bl	__aeabi_fadd
 145 0040 D4F80890 		ldr	r9, [r4, #8]	@ float
 146 0044 8246     		mov	sl, r0
 147 0046 4FF07A51 		mov	r1, #1048576000
 148 004a 4846     		mov	r0, r9
 149 004c FFF7FEFF 		bl	__aeabi_fmul
 150 0050 2168     		ldr	r1, [r4, #0]	@ float
 151 0052 FFF7FEFF 		bl	__aeabi_fadd
 152 0056 4FF07A51 		mov	r1, #1048576000
 153 005a 0546     		mov	r5, r0
 154 005c 5046     		mov	r0, sl
 155 005e FFF7FEFF 		bl	__aeabi_fmul
 156 0062 0146     		mov	r1, r0
 157 0064 2846     		mov	r0, r5
 158 0066 FFF7FEFF 		bl	__aeabi_fadd
 159 006a 4FF06A51 		mov	r1, #981467136
 160 006e FFF7FEFF 		bl	__aeabi_fadd
 175:estimator.c   ****   p[0][1] = p[0][1]+p[1][1]*DT + SIGMA2*q[0][1];
 161              		.loc 1 175 0
 162 0072 4FF07051 		mov	r1, #1006632960
 174:estimator.c   ****   p[0][0] = p[0][0]+p[1][0]*DT+DT*(p[0][1]+p[1][1]*DT) + SIGMA2*q[0][0];
 163              		.loc 1 174 0
 164 0076 0546     		mov	r5, r0
 165 0078 2060     		str	r0, [r4, #0]	@ float
 166              		.loc 1 175 0
 167 007a 5046     		mov	r0, sl
 168 007c FFF7FEFF 		bl	__aeabi_fadd
 176:estimator.c   ****   p[1][0] = p[1][0]+p[1][1]*DT + SIGMA2*q[1][0];
 169              		.loc 1 176 0
 170 0080 5946     		mov	r1, fp
 175:estimator.c   ****   p[0][1] = p[0][1]+p[1][1]*DT + SIGMA2*q[0][1];
 171              		.loc 1 175 0
 172 0082 6060     		str	r0, [r4, #4]	@ float
 173 0084 8246     		mov	sl, r0
 174              		.loc 1 176 0
 175 0086 4846     		mov	r0, r9
 176 0088 FFF7FEFF 		bl	__aeabi_fadd
 177 008c 4FF07051 		mov	r1, #1006632960
 178 0090 FFF7FEFF 		bl	__aeabi_fadd
 177:estimator.c   ****   p[1][1] = p[1][1] + SIGMA2*q[1][1];
 179              		.loc 1 177 0
 180 0094 4FF07651 		mov	r1, #1031798784
 176:estimator.c   ****   p[1][0] = p[1][0]+p[1][1]*DT + SIGMA2*q[1][0];
 181              		.loc 1 176 0
 182 0098 A060     		str	r0, [r4, #8]	@ float
 183 009a 8146     		mov	r9, r0
 184              		.loc 1 177 0
 185 009c 3846     		mov	r0, r7
 186 009e FFF7FEFF 		bl	__aeabi_fadd
 178:estimator.c   **** 
 179:estimator.c   ****   /* error estimate */
 180:estimator.c   ****   float e = p[0][0] + R;
 187              		.loc 1 180 0
 188 00a2 4FF08041 		mov	r1, #1073741824
 177:estimator.c   ****   p[1][1] = p[1][1] + SIGMA2*q[1][1];
 189              		.loc 1 177 0
 190 00a6 0190     		str	r0, [sp, #4]	@ float
 191 00a8 E060     		str	r0, [r4, #12]	@ float
 192              		.loc 1 180 0
 193 00aa 2846     		mov	r0, r5
 194 00ac FFF7FEFF 		bl	__aeabi_fadd
 195 00b0 0746     		mov	r7, r0
 196              	.LVL2:
 181:estimator.c   **** 
 182:estimator.c   ****   if (fabs(e) > 1e-5) {
 197              		.loc 1 182 0
 198 00b2 20F00040 		bic	r0, r0, #-2147483648
 199              	.LVL3:
 200 00b6 FFF7FEFF 		bl	__aeabi_f2d
 201 00ba 27A3     		adr	r3, .L11
 202 00bc D3E90023 		ldrd	r2, [r3]
 203 00c0 FFF7FEFF 		bl	__aeabi_dcmpgt
 204 00c4 0028     		cmp	r0, #0
 205 00c6 44D0     		beq	.L7
 206              	.LBB2:
 183:estimator.c   ****     float k_0 = p[0][0] / e;
 207              		.loc 1 183 0
 208 00c8 3946     		mov	r1, r7
 209 00ca 2846     		mov	r0, r5
 210 00cc FFF7FEFF 		bl	__aeabi_fdiv
 184:estimator.c   ****     float k_1 =  p[1][0] / e;
 211              		.loc 1 184 0
 212 00d0 3946     		mov	r1, r7
 183:estimator.c   ****     float k_0 = p[0][0] / e;
 213              		.loc 1 183 0
 214 00d2 0290     		str	r0, [sp, #8]	@ float
 215              	.LVL4:
 216              		.loc 1 184 0
 217 00d4 4846     		mov	r0, r9
 218              	.LVL5:
 219 00d6 FFF7FEFF 		bl	__aeabi_fdiv
 185:estimator.c   ****     e = gps_z - estimator_z;
 220              		.loc 1 185 0
 221 00da 3146     		mov	r1, r6
 184:estimator.c   ****     float k_1 =  p[1][0] / e;
 222              		.loc 1 184 0
 223 00dc 0746     		mov	r7, r0
 224              	.LVL6:
 225              		.loc 1 185 0
 226 00de 0398     		ldr	r0, [sp, #12]	@ float
 227              	.LVL7:
 228 00e0 FFF7FEFF 		bl	__aeabi_fsub
 229 00e4 8346     		mov	fp, r0
 230              	.LVL8:
 186:estimator.c   **** 
 187:estimator.c   ****     /* correction */
 188:estimator.c   ****     estimator_z += k_0 * e;
 231              		.loc 1 188 0
 232 00e6 5946     		mov	r1, fp
 233 00e8 0298     		ldr	r0, [sp, #8]	@ float
 234              	.LVL9:
 235 00ea FFF7FEFF 		bl	__aeabi_fmul
 236              	.LVL10:
 237 00ee 0146     		mov	r1, r0
 238 00f0 3046     		mov	r0, r6
 239 00f2 FFF7FEFF 		bl	__aeabi_fadd
 189:estimator.c   ****     estimator_z_dot += k_1 * e;
 240              		.loc 1 189 0
 241 00f6 5946     		mov	r1, fp
 188:estimator.c   ****     estimator_z += k_0 * e;
 242              		.loc 1 188 0
 243 00f8 C8F80000 		str	r0, [r8, #0]	@ float
 244              		.loc 1 189 0
 245 00fc 3846     		mov	r0, r7
 246 00fe FFF7FEFF 		bl	__aeabi_fmul
 247 0102 0146     		mov	r1, r0
 248 0104 0098     		ldr	r0, [sp, #0]	@ float
 249 0106 FFF7FEFF 		bl	__aeabi_fadd
 250 010a 154B     		ldr	r3, .L11+8
 190:estimator.c   **** 
 191:estimator.c   ****     p[1][0] = -p[0][0]*k_1+p[1][0];
 251              		.loc 1 191 0
 252 010c 3946     		mov	r1, r7
 189:estimator.c   ****     estimator_z_dot += k_1 * e;
 253              		.loc 1 189 0
 254 010e 1860     		str	r0, [r3, #0]	@ float
 255              		.loc 1 191 0
 256 0110 05F10040 		add	r0, r5, #-2147483648
 257 0114 FFF7FEFF 		bl	__aeabi_fmul
 258 0118 4946     		mov	r1, r9
 259 011a FFF7FEFF 		bl	__aeabi_fadd
 192:estimator.c   ****     p[1][1] = -p[0][1]*k_1+p[1][1];
 260              		.loc 1 192 0
 261 011e 3946     		mov	r1, r7
 191:estimator.c   ****     p[1][0] = -p[0][0]*k_1+p[1][0];
 262              		.loc 1 191 0
 263 0120 A060     		str	r0, [r4, #8]	@ float
 264              		.loc 1 192 0
 265 0122 0AF10040 		add	r0, sl, #-2147483648
 266 0126 FFF7FEFF 		bl	__aeabi_fmul
 267 012a 0199     		ldr	r1, [sp, #4]	@ float
 268 012c FFF7FEFF 		bl	__aeabi_fadd
 193:estimator.c   ****     p[0][0] = p[0][0] * (1-k_0);
 269              		.loc 1 193 0
 270 0130 0299     		ldr	r1, [sp, #8]	@ float
 192:estimator.c   ****     p[1][1] = -p[0][1]*k_1+p[1][1];
 271              		.loc 1 192 0
 272 0132 E060     		str	r0, [r4, #12]	@ float
 273              		.loc 1 193 0
 274 0134 4FF07E50 		mov	r0, #1065353216
 275 0138 FFF7FEFF 		bl	__aeabi_fsub
 276 013c 0646     		mov	r6, r0
 277 013e 3146     		mov	r1, r6
 278 0140 2846     		mov	r0, r5
 279 0142 FFF7FEFF 		bl	__aeabi_fmul
 194:estimator.c   ****     p[0][1] = p[0][1] * (1-k_0);
 280              		.loc 1 194 0
 281 0146 3146     		mov	r1, r6
 193:estimator.c   ****     p[0][0] = p[0][0] * (1-k_0);
 282              		.loc 1 193 0
 283 0148 2060     		str	r0, [r4, #0]	@ float
 284              		.loc 1 194 0
 285 014a 5046     		mov	r0, sl
 286 014c FFF7FEFF 		bl	__aeabi_fmul
 287 0150 6060     		str	r0, [r4, #4]	@ float
 288              	.LVL11:
 289              	.L7:
 290              	.LBE2:
 195:estimator.c   ****   }
 196:estimator.c   **** 
 197:estimator.c   **** #ifdef DEBUG_ALT_KALMAN
 198:estimator.c   ****   DOWNLINK_SEND_ALT_KALMAN(DefaultChannel,DefaultDevice,&(p[0][0]),&(p[0][1]),&(p[1][0]), &(p[1][1]
 199:estimator.c   **** #endif
 200:estimator.c   **** }
 291              		.loc 1 200 0
 292 0152 05B0     		add	sp, sp, #20
 293 0154 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 294              	.L12:
 295              		.align	3
 296              	.L11:
 297 0158 F168E388 		.word	2296604913
 298 015c B5F8E43E 		.word	1055193269
 299 0160 00000000 		.word	.LANCHOR2
 300 0164 00000000 		.word	.LANCHOR0
 301 0168 00000000 		.word	.LANCHOR3
 302              		.cfi_endproc
 303              	.LFE11:
 305 016c AFF30080 		.section	.text.estimator_init,"ax",%progbits
 306              		.align	1
 307              		.global	estimator_init
 308              		.thumb
 309              		.thumb_func
 311              	estimator_init:
 312              	.LFB8:
  85:estimator.c   **** void estimator_init( void ) {
 313              		.loc 1 85 0
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
  87:estimator.c   ****   EstimatorSetPosXY(0., 0.);
 317              		.loc 1 87 0
 318 0000 154B     		ldr	r3, .L17
  85:estimator.c   **** void estimator_init( void ) {
 319              		.loc 1 85 0
 320 0002 10B5     		push	{r4, lr}
 321              	.LCFI2:
 322              		.cfi_def_cfa_offset 8
 323              		.cfi_offset 14, -4
 324              		.cfi_offset 4, -8
  87:estimator.c   ****   EstimatorSetPosXY(0., 0.);
 325              		.loc 1 87 0
 326 0004 0024     		movs	r4, #0
 327 0006 1C60     		str	r4, [r3, #0]	@ float
 328 0008 144B     		ldr	r3, .L17+4
 329 000a 1C60     		str	r4, [r3, #0]	@ float
  88:estimator.c   ****   EstimatorSetAlt(0.);
 330              		.loc 1 88 0
 331 000c 144B     		ldr	r3, .L17+8
 332 000e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 333 0010 13B9     		cbnz	r3, .L14
  88:estimator.c   ****   EstimatorSetAlt(0.);
 334              		.loc 1 88 0 is_stmt 0 discriminator 1
 335 0012 144B     		ldr	r3, .L17+12
 336 0014 1C60     		str	r4, [r3, #0]	@ float
 337 0016 02E0     		b	.L15
 338              	.L14:
  88:estimator.c   ****   EstimatorSetAlt(0.);
 339              		.loc 1 88 0 discriminator 2
 340 0018 2046     		mov	r0, r4
 341 001a FFF7FEFF 		bl	alt_kalman
 342              	.L15:
  90:estimator.c   ****   EstimatorSetAtt (0., 0., 0);
 343              		.loc 1 90 0 is_stmt 1
 344 001e 124B     		ldr	r3, .L17+16
 345 0020 1C60     		str	r4, [r3, #0]	@ float
 346 0022 124B     		ldr	r3, .L17+20
 347 0024 1C60     		str	r4, [r3, #0]	@ float
 348 0026 124B     		ldr	r3, .L17+24
 349 0028 1C60     		str	r4, [r3, #0]	@ float
  92:estimator.c   ****   EstimatorSetSpeedPol ( 0., 0., 0.);
 350              		.loc 1 92 0
 351 002a 124B     		ldr	r3, .L17+28
 352 002c 1C60     		str	r4, [r3, #0]	@ float
 353 002e 124B     		ldr	r3, .L17+32
 354 0030 1C60     		str	r4, [r3, #0]	@ float
 355 0032 0B4B     		ldr	r3, .L17+8
 356 0034 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 357 0036 13B9     		cbnz	r3, .L16
  92:estimator.c   ****   EstimatorSetSpeedPol ( 0., 0., 0.);
 358              		.loc 1 92 0 is_stmt 0 discriminator 1
 359 0038 104B     		ldr	r3, .L17+36
 360 003a 0022     		movs	r2, #0
 361 003c 1A60     		str	r2, [r3, #0]	@ float
 362              	.L16:
  94:estimator.c   ****   EstimatorSetRate(0., 0., 0.);
 363              		.loc 1 94 0 is_stmt 1
 364 003e 104B     		ldr	r3, .L17+40
 100:estimator.c   ****   estimator_flight_time = 0;
 365              		.loc 1 100 0
 366 0040 0022     		movs	r2, #0
  94:estimator.c   ****   EstimatorSetRate(0., 0., 0.);
 367              		.loc 1 94 0
 368 0042 1C60     		str	r4, [r3, #0]	@ float
 369 0044 0F4B     		ldr	r3, .L17+44
 370 0046 1C60     		str	r4, [r3, #0]	@ float
 371 0048 0F4B     		ldr	r3, .L17+48
 372 004a 1C60     		str	r4, [r3, #0]	@ float
 100:estimator.c   ****   estimator_flight_time = 0;
 373              		.loc 1 100 0
 374 004c 0F4B     		ldr	r3, .L17+52
 375 004e 1A80     		strh	r2, [r3, #0]	@ movhi
 103:estimator.c   ****   EstimatorSetAirspeed( NOMINAL_AIRSPEED );
 376              		.loc 1 103 0
 377 0050 0F4A     		ldr	r2, .L17+56
 378 0052 104B     		ldr	r3, .L17+60
 379 0054 1A60     		str	r2, [r3, #0]	@ float
 104:estimator.c   **** }
 380              		.loc 1 104 0
 381 0056 10BD     		pop	{r4, pc}
 382              	.L18:
 383              		.align	2
 384              	.L17:
 385 0058 00000000 		.word	.LANCHOR4
 386 005c 00000000 		.word	.LANCHOR5
 387 0060 00000000 		.word	.LANCHOR1
 388 0064 00000000 		.word	.LANCHOR3
 389 0068 00000000 		.word	.LANCHOR6
 390 006c 00000000 		.word	.LANCHOR7
 391 0070 00000000 		.word	.LANCHOR8
 392 0074 00000000 		.word	.LANCHOR9
 393 0078 00000000 		.word	.LANCHOR10
 394 007c 00000000 		.word	.LANCHOR2
 395 0080 00000000 		.word	.LANCHOR11
 396 0084 00000000 		.word	.LANCHOR12
 397 0088 00000000 		.word	.LANCHOR13
 398 008c 00000000 		.word	.LANCHOR14
 399 0090 00007041 		.word	1097859072
 400 0094 00000000 		.word	.LANCHOR15
 401              		.cfi_endproc
 402              	.LFE8:
 404              		.global	__aeabi_i2d
 405              		.global	__aeabi_ddiv
 406              		.global	__aeabi_d2f
 407              		.global	__aeabi_i2f
 408              		.section	.text.estimator_update_state_gps,"ax",%progbits
 409              		.align	1
 410              		.global	estimator_update_state_gps
 411              		.thumb
 412              		.thumb_func
 414              	estimator_update_state_gps:
 415              	.LFB12:
 201:estimator.c   **** 
 202:estimator.c   **** #endif // ALT_KALMAN
 203:estimator.c   **** 
 204:estimator.c   **** void estimator_update_state_gps( void ) {
 416              		.loc 1 204 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420 0000 70B5     		push	{r4, r5, r6, lr}
 421              	.LCFI3:
 422              		.cfi_def_cfa_offset 16
 423              		.cfi_offset 14, -4
 424              		.cfi_offset 6, -8
 425              		.cfi_offset 5, -12
 426              		.cfi_offset 4, -16
 205:estimator.c   ****   float gps_east = gps.utm_pos.east / 100.;
 427              		.loc 1 205 0
 428 0002 354C     		ldr	r4, .L23+8
 429 0004 E069     		ldr	r0, [r4, #28]
 430 0006 FFF7FEFF 		bl	__aeabi_i2d
 431 000a 0022     		movs	r2, #0
 432 000c 334B     		ldr	r3, .L23+12
 433 000e FFF7FEFF 		bl	__aeabi_ddiv
 434 0012 FFF7FEFF 		bl	__aeabi_d2f
 435 0016 0546     		mov	r5, r0
 436              	.LVL12:
 206:estimator.c   ****   float gps_north = gps.utm_pos.north / 100.;
 437              		.loc 1 206 0
 438 0018 A069     		ldr	r0, [r4, #24]
 439              	.LVL13:
 440 001a FFF7FEFF 		bl	__aeabi_i2d
 441 001e 0022     		movs	r2, #0
 442 0020 2E4B     		ldr	r3, .L23+12
 443 0022 FFF7FEFF 		bl	__aeabi_ddiv
 444 0026 FFF7FEFF 		bl	__aeabi_d2f
 207:estimator.c   **** 
 208:estimator.c   ****   /* Relative position to reference */
 209:estimator.c   ****   gps_east -= nav_utm_east0;
 210:estimator.c   ****   gps_north -= nav_utm_north0;
 445              		.loc 1 210 0
 446 002a 2D4B     		ldr	r3, .L23+16
 206:estimator.c   ****   float gps_north = gps.utm_pos.north / 100.;
 447              		.loc 1 206 0
 448 002c 0646     		mov	r6, r0
 449              	.LVL14:
 450              		.loc 1 210 0
 451 002e 1868     		ldr	r0, [r3, #0]
 452              	.LVL15:
 453 0030 FFF7FEFF 		bl	__aeabi_i2f
 454              	.LVL16:
 455 0034 0146     		mov	r1, r0
 456 0036 3046     		mov	r0, r6
 457 0038 FFF7FEFF 		bl	__aeabi_fsub
 209:estimator.c   ****   gps_east -= nav_utm_east0;
 458              		.loc 1 209 0
 459 003c 294B     		ldr	r3, .L23+20
 460              		.loc 1 210 0
 461 003e 0646     		mov	r6, r0
 462              	.LVL17:
 209:estimator.c   ****   gps_east -= nav_utm_east0;
 463              		.loc 1 209 0
 464 0040 1868     		ldr	r0, [r3, #0]
 465              	.LVL18:
 466 0042 FFF7FEFF 		bl	__aeabi_i2f
 467              	.LVL19:
 468 0046 0146     		mov	r1, r0
 469 0048 2846     		mov	r0, r5
 470 004a FFF7FEFF 		bl	__aeabi_fsub
 211:estimator.c   **** 
 212:estimator.c   ****   EstimatorSetPosXY(gps_east, gps_north);
 471              		.loc 1 212 0
 472 004e 264B     		ldr	r3, .L23+24
 473 0050 1860     		str	r0, [r3, #0]	@ float
 474 0052 264B     		ldr	r3, .L23+28
 213:estimator.c   **** #if !USE_BARO_BMP && !USE_BARO_ETS && !USE_BARO_MS5534A
 214:estimator.c   ****   float falt = gps.hmsl / 1000.;
 475              		.loc 1 214 0
 476 0054 A06A     		ldr	r0, [r4, #40]
 212:estimator.c   ****   EstimatorSetPosXY(gps_east, gps_north);
 477              		.loc 1 212 0
 478 0056 1E60     		str	r6, [r3, #0]	@ float
 479              		.loc 1 214 0
 480 0058 FFF7FEFF 		bl	__aeabi_i2d
 481 005c 0022     		movs	r2, #0
 482 005e 244B     		ldr	r3, .L23+32
 483 0060 FFF7FEFF 		bl	__aeabi_ddiv
 484 0064 FFF7FEFF 		bl	__aeabi_d2f
 485              	.LVL20:
 215:estimator.c   ****   EstimatorSetAlt(falt);
 486              		.loc 1 215 0
 487 0068 224A     		ldr	r2, .L23+36
 488 006a 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 489 006c 12B9     		cbnz	r2, .L20
 490              		.loc 1 215 0 is_stmt 0 discriminator 1
 491 006e 224A     		ldr	r2, .L23+40
 492 0070 1060     		str	r0, [r2, #0]	@ float
 493 0072 01E0     		b	.L21
 494              	.L20:
 495              		.loc 1 215 0 discriminator 2
 496 0074 FFF7FEFF 		bl	alt_kalman
 497              	.LVL21:
 498              	.L21:
 216:estimator.c   **** #endif
 217:estimator.c   ****   float fspeed = gps.gspeed / 100.;
 218:estimator.c   ****   float fclimb = -gps.ned_vel.z / 100.;
 219:estimator.c   ****   float fcourse = gps.course / 1e7;
 499              		.loc 1 219 0 is_stmt 1
 500 0078 A06C     		ldr	r0, [r4, #72]
 501 007a FFF7FEFF 		bl	__aeabi_i2d
 502              	.LVL22:
 503 007e 14A3     		adr	r3, .L23
 504 0080 D3E90023 		ldrd	r2, [r3]
 505 0084 FFF7FEFF 		bl	__aeabi_ddiv
 506 0088 FFF7FEFF 		bl	__aeabi_d2f
 507 008c 0646     		mov	r6, r0
 508              	.LVL23:
 217:estimator.c   ****   float fspeed = gps.gspeed / 100.;
 509              		.loc 1 217 0
 510 008e B4F94400 		ldrsh	r0, [r4, #68]
 511 0092 FFF7FEFF 		bl	__aeabi_i2d
 512 0096 114B     		ldr	r3, .L23+12
 513 0098 0022     		movs	r2, #0
 514 009a FFF7FEFF 		bl	__aeabi_ddiv
 515 009e FFF7FEFF 		bl	__aeabi_d2f
 516 00a2 164B     		ldr	r3, .L23+44
 218:estimator.c   ****   float fclimb = -gps.ned_vel.z / 100.;
 517              		.loc 1 218 0
 518 00a4 256C     		ldr	r5, [r4, #64]
 519              	.LVL24:
 217:estimator.c   ****   float fspeed = gps.gspeed / 100.;
 520              		.loc 1 217 0
 521 00a6 1860     		str	r0, [r3, #0]	@ float
 220:estimator.c   ****   EstimatorSetSpeedPol(fspeed, fcourse, fclimb);
 522              		.loc 1 220 0
 523 00a8 154B     		ldr	r3, .L23+48
 524 00aa 1E60     		str	r6, [r3, #0]	@ float
 525 00ac 114B     		ldr	r3, .L23+36
 526 00ae 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 527 00b0 53B9     		cbnz	r3, .L19
 218:estimator.c   ****   float fclimb = -gps.ned_vel.z / 100.;
 528              		.loc 1 218 0 discriminator 1
 529 00b2 6842     		negs	r0, r5
 530 00b4 FFF7FEFF 		bl	__aeabi_i2d
 531              	.LVL25:
 532 00b8 084B     		ldr	r3, .L23+12
 533 00ba 0022     		movs	r2, #0
 534 00bc FFF7FEFF 		bl	__aeabi_ddiv
 535 00c0 FFF7FEFF 		bl	__aeabi_d2f
 536 00c4 0F4B     		ldr	r3, .L23+52
 537 00c6 1860     		str	r0, [r3, #0]	@ float
 538              	.L19:
 539 00c8 70BD     		pop	{r4, r5, r6, pc}
 540              	.L24:
 541 00ca 00BFAFF3 		.align	3
 541      0080
 542              	.L23:
 543 00d0 00000000 		.word	0
 544 00d4 D0126341 		.word	1097011920
 545 00d8 00000000 		.word	gps
 546 00dc 00005940 		.word	1079574528
 547 00e0 00000000 		.word	nav_utm_north0
 548 00e4 00000000 		.word	nav_utm_east0
 549 00e8 00000000 		.word	.LANCHOR4
 550 00ec 00000000 		.word	.LANCHOR5
 551 00f0 00408F40 		.word	1083129856
 552 00f4 00000000 		.word	.LANCHOR1
 553 00f8 00000000 		.word	.LANCHOR3
 554 00fc 00000000 		.word	.LANCHOR9
 555 0100 00000000 		.word	.LANCHOR10
 556 0104 00000000 		.word	.LANCHOR2
 557              		.cfi_endproc
 558              	.LFE12:
 560              		.global	alt_kalman_enabled
 561              		.global	estimator_AOA
 562              		.global	estimator_airspeed
 563              		.global	wind_north
 564              		.global	wind_east
 565              		.global	estimator_hspeed_dir
 566              		.global	estimator_hspeed_mod
 567              		.global	estimator_t
 568              		.global	estimator_flight_time
 569              		.global	estimator_r
 570              		.global	estimator_q
 571              		.global	estimator_p
 572              		.global	estimator_theta
 573              		.global	estimator_psi
 574              		.global	estimator_phi
 575              		.global	estimator_z_dot
 576              		.global	estimator_z
 577              		.global	estimator_y
 578              		.global	estimator_x
 579              		.section	.bss.estimator_hspeed_dir,"aw",%nobits
 580              		.align	2
 581              		.set	.LANCHOR10,. + 0
 584              	estimator_hspeed_dir:
 585 0000 00000000 		.space	4
 586              		.section	.bss.estimator_t,"aw",%nobits
 587              		.align	2
 590              	estimator_t:
 591 0000 00000000 		.space	4
 592              		.section	.bss.estimator_airspeed,"aw",%nobits
 593              		.align	2
 594              		.set	.LANCHOR15,. + 0
 597              	estimator_airspeed:
 598 0000 00000000 		.space	4
 599              		.section	.bss.estimator_AOA,"aw",%nobits
 600              		.align	2
 603              	estimator_AOA:
 604 0000 00000000 		.space	4
 605              		.section	.bss.p,"aw",%nobits
 606              		.align	2
 607              		.set	.LANCHOR0,. + 0
 610              	p:
 611 0000 00000000 		.space	16
 611      00000000 
 611      00000000 
 611      00000000 
 612              		.section	.bss.estimator_z_dot,"aw",%nobits
 613              		.align	2
 614              		.set	.LANCHOR2,. + 0
 617              	estimator_z_dot:
 618 0000 00000000 		.space	4
 619              		.section	.bss.estimator_flight_time,"aw",%nobits
 620              		.align	1
 621              		.set	.LANCHOR14,. + 0
 624              	estimator_flight_time:
 625 0000 0000     		.space	2
 626              		.section	.bss.wind_east,"aw",%nobits
 627              		.align	2
 630              	wind_east:
 631 0000 00000000 		.space	4
 632              		.section	.bss.alt_kalman_enabled,"aw",%nobits
 633              		.set	.LANCHOR1,. + 0
 636              	alt_kalman_enabled:
 637 0000 00       		.space	1
 638              		.section	.bss.estimator_psi,"aw",%nobits
 639              		.align	2
 640              		.set	.LANCHOR7,. + 0
 643              	estimator_psi:
 644 0000 00000000 		.space	4
 645              		.section	.bss.estimator_r,"aw",%nobits
 646              		.align	2
 647              		.set	.LANCHOR13,. + 0
 650              	estimator_r:
 651 0000 00000000 		.space	4
 652              		.section	.bss.wind_north,"aw",%nobits
 653              		.align	2
 656              	wind_north:
 657 0000 00000000 		.space	4
 658              		.section	.bss.estimator_p,"aw",%nobits
 659              		.align	2
 660              		.set	.LANCHOR11,. + 0
 663              	estimator_p:
 664 0000 00000000 		.space	4
 665              		.section	.bss.estimator_theta,"aw",%nobits
 666              		.align	2
 667              		.set	.LANCHOR8,. + 0
 670              	estimator_theta:
 671 0000 00000000 		.space	4
 672              		.section	.bss.estimator_q,"aw",%nobits
 673              		.align	2
 674              		.set	.LANCHOR12,. + 0
 677              	estimator_q:
 678 0000 00000000 		.space	4
 679              		.section	.bss.estimator_x,"aw",%nobits
 680              		.align	2
 681              		.set	.LANCHOR4,. + 0
 684              	estimator_x:
 685 0000 00000000 		.space	4
 686              		.section	.bss.estimator_y,"aw",%nobits
 687              		.align	2
 688              		.set	.LANCHOR5,. + 0
 691              	estimator_y:
 692 0000 00000000 		.space	4
 693              		.section	.bss.estimator_z,"aw",%nobits
 694              		.align	2
 695              		.set	.LANCHOR3,. + 0
 698              	estimator_z:
 699 0000 00000000 		.space	4
 700              		.section	.bss.estimator_hspeed_mod,"aw",%nobits
 701              		.align	2
 702              		.set	.LANCHOR9,. + 0
 705              	estimator_hspeed_mod:
 706 0000 00000000 		.space	4
 707              		.section	.bss.estimator_phi,"aw",%nobits
 708              		.align	2
 709              		.set	.LANCHOR6,. + 0
 712              	estimator_phi:
 713 0000 00000000 		.space	4
 714              		.text
 715              	.Letext0:
 716              		.file 2 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 717              		.file 3 "/home/uav/USTUAV/paparazzi/sw/include/std.h"
 718              		.file 4 "./math/pprz_algebra_int.h"
 719              		.file 5 "./subsystems/imu.h"
 720              		.file 6 "./subsystems/imu/imu_aspirin2.h"
 721              		.file 7 "./math/pprz_geodetic_int.h"
 722              		.file 8 "subsystems/gps.h"
 723              		.file 9 "estimator.h"
 724              		.file 10 "./subsystems/datalink/datalink.h"
 725              		.file 11 "./subsystems/datalink/xbee.h"
 726              		.file 12 "./subsystems/navigation/common_nav.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 estimator.c
     /tmp/cc3GVbud.s:18     .text.alt_kalman_reset:0000000000000000 $t
     /tmp/cc3GVbud.s:23     .text.alt_kalman_reset:0000000000000000 alt_kalman_reset
     /tmp/cc3GVbud.s:49     .text.alt_kalman_reset:0000000000000014 $d
     /tmp/cc3GVbud.s:54     .text.alt_kalman_init:0000000000000000 $t
     /tmp/cc3GVbud.s:59     .text.alt_kalman_init:0000000000000000 alt_kalman_init
     /tmp/cc3GVbud.s:76     .text.alt_kalman_init:000000000000000c $d
     /tmp/cc3GVbud.s:87     .text.alt_kalman:0000000000000000 $t
     /tmp/cc3GVbud.s:92     .text.alt_kalman:0000000000000000 alt_kalman
     /tmp/cc3GVbud.s:297    .text.alt_kalman:0000000000000158 $d
     /tmp/cc3GVbud.s:306    .text.estimator_init:0000000000000000 $t
     /tmp/cc3GVbud.s:311    .text.estimator_init:0000000000000000 estimator_init
     /tmp/cc3GVbud.s:385    .text.estimator_init:0000000000000058 $d
     /tmp/cc3GVbud.s:409    .text.estimator_update_state_gps:0000000000000000 $t
     /tmp/cc3GVbud.s:414    .text.estimator_update_state_gps:0000000000000000 estimator_update_state_gps
     /tmp/cc3GVbud.s:543    .text.estimator_update_state_gps:00000000000000d0 $d
     /tmp/cc3GVbud.s:636    .bss.alt_kalman_enabled:0000000000000000 alt_kalman_enabled
     /tmp/cc3GVbud.s:603    .bss.estimator_AOA:0000000000000000 estimator_AOA
     /tmp/cc3GVbud.s:597    .bss.estimator_airspeed:0000000000000000 estimator_airspeed
     /tmp/cc3GVbud.s:656    .bss.wind_north:0000000000000000 wind_north
     /tmp/cc3GVbud.s:630    .bss.wind_east:0000000000000000 wind_east
     /tmp/cc3GVbud.s:584    .bss.estimator_hspeed_dir:0000000000000000 estimator_hspeed_dir
     /tmp/cc3GVbud.s:705    .bss.estimator_hspeed_mod:0000000000000000 estimator_hspeed_mod
     /tmp/cc3GVbud.s:590    .bss.estimator_t:0000000000000000 estimator_t
     /tmp/cc3GVbud.s:624    .bss.estimator_flight_time:0000000000000000 estimator_flight_time
     /tmp/cc3GVbud.s:650    .bss.estimator_r:0000000000000000 estimator_r
     /tmp/cc3GVbud.s:677    .bss.estimator_q:0000000000000000 estimator_q
     /tmp/cc3GVbud.s:663    .bss.estimator_p:0000000000000000 estimator_p
     /tmp/cc3GVbud.s:670    .bss.estimator_theta:0000000000000000 estimator_theta
     /tmp/cc3GVbud.s:643    .bss.estimator_psi:0000000000000000 estimator_psi
     /tmp/cc3GVbud.s:712    .bss.estimator_phi:0000000000000000 estimator_phi
     /tmp/cc3GVbud.s:617    .bss.estimator_z_dot:0000000000000000 estimator_z_dot
     /tmp/cc3GVbud.s:698    .bss.estimator_z:0000000000000000 estimator_z
     /tmp/cc3GVbud.s:691    .bss.estimator_y:0000000000000000 estimator_y
     /tmp/cc3GVbud.s:684    .bss.estimator_x:0000000000000000 estimator_x
     /tmp/cc3GVbud.s:580    .bss.estimator_hspeed_dir:0000000000000000 $d
     /tmp/cc3GVbud.s:587    .bss.estimator_t:0000000000000000 $d
     /tmp/cc3GVbud.s:593    .bss.estimator_airspeed:0000000000000000 $d
     /tmp/cc3GVbud.s:600    .bss.estimator_AOA:0000000000000000 $d
     /tmp/cc3GVbud.s:606    .bss.p:0000000000000000 $d
     /tmp/cc3GVbud.s:610    .bss.p:0000000000000000 p
     /tmp/cc3GVbud.s:613    .bss.estimator_z_dot:0000000000000000 $d
     /tmp/cc3GVbud.s:620    .bss.estimator_flight_time:0000000000000000 $d
     /tmp/cc3GVbud.s:627    .bss.wind_east:0000000000000000 $d
     /tmp/cc3GVbud.s:637    .bss.alt_kalman_enabled:0000000000000000 $d
     /tmp/cc3GVbud.s:639    .bss.estimator_psi:0000000000000000 $d
     /tmp/cc3GVbud.s:646    .bss.estimator_r:0000000000000000 $d
     /tmp/cc3GVbud.s:653    .bss.wind_north:0000000000000000 $d
     /tmp/cc3GVbud.s:659    .bss.estimator_p:0000000000000000 $d
     /tmp/cc3GVbud.s:666    .bss.estimator_theta:0000000000000000 $d
     /tmp/cc3GVbud.s:673    .bss.estimator_q:0000000000000000 $d
     /tmp/cc3GVbud.s:680    .bss.estimator_x:0000000000000000 $d
     /tmp/cc3GVbud.s:687    .bss.estimator_y:0000000000000000 $d
     /tmp/cc3GVbud.s:694    .bss.estimator_z:0000000000000000 $d
     /tmp/cc3GVbud.s:701    .bss.estimator_hspeed_mod:0000000000000000 $d
     /tmp/cc3GVbud.s:708    .bss.estimator_phi:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
     /tmp/cc3GVbud.s:305    .text.alt_kalman:000000000000016c $t

UNDEFINED SYMBOLS
__aeabi_fmul
__aeabi_fadd
__aeabi_f2d
__aeabi_dcmpgt
__aeabi_fdiv
__aeabi_fsub
__aeabi_i2d
__aeabi_ddiv
__aeabi_d2f
__aeabi_i2f
gps
nav_utm_north0
nav_utm_east0
