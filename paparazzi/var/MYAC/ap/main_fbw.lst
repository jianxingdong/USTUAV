   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"main_fbw.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.inter_mcu_fill_fbw_state,"ax",%progbits
  18              		.align	1
  19              		.thumb
  20              		.thumb_func
  22              	inter_mcu_fill_fbw_state:
  23              	.LFB30:
  24              		.file 1 "./inter_mcu.h"
   1:./inter_mcu.h **** /*  $Id$
   2:./inter_mcu.h ****  *
   3:./inter_mcu.h ****  * Copyright (C) 2003-2005  Pascal Brisset, Antoine Drouin
   4:./inter_mcu.h ****  *
   5:./inter_mcu.h ****  * This file is part of paparazzi.
   6:./inter_mcu.h ****  *
   7:./inter_mcu.h ****  * paparazzi is free software; you can redistribute it and/or modify
   8:./inter_mcu.h ****  * it under the terms of the GNU General Public License as published by
   9:./inter_mcu.h ****  * the Free Software Foundation; either version 2, or (at your option)
  10:./inter_mcu.h ****  * any later version.
  11:./inter_mcu.h ****  *
  12:./inter_mcu.h ****  * paparazzi is distributed in the hope that it will be useful,
  13:./inter_mcu.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:./inter_mcu.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:./inter_mcu.h ****  * GNU General Public License for more details.
  16:./inter_mcu.h ****  *
  17:./inter_mcu.h ****  * You should have received a copy of the GNU General Public License
  18:./inter_mcu.h ****  * along with paparazzi; see the file COPYING.  If not, write to
  19:./inter_mcu.h ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  20:./inter_mcu.h ****  * Boston, MA 02111-1307, USA.
  21:./inter_mcu.h ****  *
  22:./inter_mcu.h ****  */
  23:./inter_mcu.h **** 
  24:./inter_mcu.h **** /** \brief Communication between fbw and ap processes
  25:./inter_mcu.h ****  * This unit contains the data structure used to communicate between the
  26:./inter_mcu.h ****  * "fly by wire" process and the "autopilot" process. It must be linked once in a
  27:./inter_mcu.h ****  * monoprocessor architecture, twice in a twin-processors (the historical
  28:./inter_mcu.h ****  * Atmel AVRs mega8-mega128 one) architecture. In the latter case, the
  29:./inter_mcu.h ****  * inter-mcu communication process (e.g. SPI) must fill and read these data structures.
  30:./inter_mcu.h **** */
  31:./inter_mcu.h **** 
  32:./inter_mcu.h **** #ifndef INTER_MCU_H
  33:./inter_mcu.h **** #define INTER_MCU_H
  34:./inter_mcu.h **** 
  35:./inter_mcu.h **** 
  36:./inter_mcu.h **** #ifdef INTER_MCU
  37:./inter_mcu.h **** 
  38:./inter_mcu.h **** #include <inttypes.h>
  39:./inter_mcu.h **** 
  40:./inter_mcu.h **** #include "std.h"
  41:./inter_mcu.h **** 
  42:./inter_mcu.h **** #include "paparazzi.h"
  43:./inter_mcu.h **** #include "generated/airframe.h"
  44:./inter_mcu.h **** #include "subsystems/radio_control.h"
  45:./inter_mcu.h **** #include "subsystems/electrical.h"
  46:./inter_mcu.h **** #include "firmwares/fixedwing/main_fbw.h"
  47:./inter_mcu.h **** 
  48:./inter_mcu.h **** #ifndef SINGLE_MCU
  49:./inter_mcu.h **** #include "generated/radio.h"
  50:./inter_mcu.h **** #define RADIO_CONTROL_NB_CHANNEL RADIO_CTL_NB
  51:./inter_mcu.h **** #endif
  52:./inter_mcu.h **** 
  53:./inter_mcu.h **** /** Data structure shared by fbw and ap processes */
  54:./inter_mcu.h **** struct fbw_state {
  55:./inter_mcu.h **** #if defined RADIO_CONTROL || RADIO_CONTROL_AUTO1
  56:./inter_mcu.h ****   pprz_t channels[RADIO_CONTROL_NB_CHANNEL];
  57:./inter_mcu.h ****   uint8_t ppm_cpt;
  58:./inter_mcu.h **** #endif
  59:./inter_mcu.h ****   uint8_t status;
  60:./inter_mcu.h ****   uint8_t nb_err;
  61:./inter_mcu.h ****   uint8_t vsupply; 	/* 1e-1 V */
  62:./inter_mcu.h ****   int32_t current;	/* milliAmps */
  63:./inter_mcu.h **** };
  64:./inter_mcu.h **** 
  65:./inter_mcu.h **** struct ap_state {
  66:./inter_mcu.h ****   pprz_t commands[COMMANDS_NB];
  67:./inter_mcu.h ****   pprz_t command_roll_trim;
  68:./inter_mcu.h ****   pprz_t command_pitch_trim;
  69:./inter_mcu.h **** };
  70:./inter_mcu.h **** 
  71:./inter_mcu.h **** // Status bits from FBW to AUTOPILOT
  72:./inter_mcu.h **** #define STATUS_RADIO_OK 0
  73:./inter_mcu.h **** #define STATUS_RADIO_REALLY_LOST 1
  74:./inter_mcu.h **** #define STATUS_MODE_AUTO 2
  75:./inter_mcu.h **** #define STATUS_MODE_FAILSAFE 3
  76:./inter_mcu.h **** #define AVERAGED_CHANNELS_SENT 4
  77:./inter_mcu.h **** #define MASK_FBW_CHANGED 0xf
  78:./inter_mcu.h **** 
  79:./inter_mcu.h **** 
  80:./inter_mcu.h **** extern struct fbw_state* fbw_state;
  81:./inter_mcu.h **** extern struct ap_state*  ap_state;
  82:./inter_mcu.h **** 
  83:./inter_mcu.h **** extern volatile bool_t inter_mcu_received_fbw;
  84:./inter_mcu.h **** extern volatile bool_t inter_mcu_received_ap;
  85:./inter_mcu.h **** 
  86:./inter_mcu.h **** 
  87:./inter_mcu.h **** #ifdef FBW
  88:./inter_mcu.h **** 
  89:./inter_mcu.h **** extern uint8_t time_since_last_ap;
  90:./inter_mcu.h **** extern bool_t ap_ok;
  91:./inter_mcu.h **** 
  92:./inter_mcu.h **** #define AP_STALLED_TIME        30  // 500ms with a 60Hz timer
  93:./inter_mcu.h **** 
  94:./inter_mcu.h **** 
  95:./inter_mcu.h **** static inline void inter_mcu_init(void) {
  96:./inter_mcu.h ****   fbw_state->status = 0;
  97:./inter_mcu.h ****   fbw_state->nb_err = 0;
  98:./inter_mcu.h **** 
  99:./inter_mcu.h ****   ap_ok = FALSE;
 100:./inter_mcu.h **** }
 101:./inter_mcu.h **** 
 102:./inter_mcu.h **** 
 103:./inter_mcu.h **** /* Prepare data to be sent to mcu0 */
 104:./inter_mcu.h **** static inline void inter_mcu_fill_fbw_state (void) {
  25              		.loc 1 104 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 14, -4
  34              		.cfi_offset 4, -8
 105:./inter_mcu.h ****   uint8_t status = 0;
 106:./inter_mcu.h **** 
 107:./inter_mcu.h **** #ifdef RADIO_CONTROL
 108:./inter_mcu.h ****   uint8_t i;
 109:./inter_mcu.h ****   for(i = 0; i < RADIO_CONTROL_NB_CHANNEL; i++)
 110:./inter_mcu.h ****     fbw_state->channels[i] = radio_control.values[i];
  35              		.loc 1 110 0
  36 0002 184B     		ldr	r3, .L12
 104:./inter_mcu.h **** static inline void inter_mcu_fill_fbw_state (void) {
  37              		.loc 1 104 0
  38 0004 1848     		ldr	r0, .L12+4
  39              		.loc 1 110 0
  40 0006 1B68     		ldr	r3, [r3, #0]
  41 0008 0022     		movs	r2, #0
  42              	.LVL1:
  43              	.L2:
 104:./inter_mcu.h **** static inline void inter_mcu_fill_fbw_state (void) {
  44              		.loc 1 104 0 discriminator 2
  45 000a 1418     		adds	r4, r2, r0
  46              		.loc 1 110 0 discriminator 2
  47 000c E488     		ldrh	r4, [r4, #6]
 104:./inter_mcu.h **** static inline void inter_mcu_fill_fbw_state (void) {
  48              		.loc 1 104 0 discriminator 2
  49 000e 1649     		ldr	r1, .L12+4
  50              		.loc 1 110 0 discriminator 2
  51 0010 9C52     		strh	r4, [r3, r2]	@ movhi
  52 0012 0232     		adds	r2, r2, #2
 109:./inter_mcu.h ****   for(i = 0; i < RADIO_CONTROL_NB_CHANNEL; i++)
  53              		.loc 1 109 0 discriminator 2
  54 0014 182A     		cmp	r2, #24
  55 0016 F8D1     		bne	.L2
 111:./inter_mcu.h **** 
 112:./inter_mcu.h ****   fbw_state->ppm_cpt = radio_control.frame_rate;
  56              		.loc 1 112 0
  57 0018 CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
  58 001a 1A76     		strb	r2, [r3, #24]
 113:./inter_mcu.h **** 
 114:./inter_mcu.h ****   status = (radio_control.status == RC_OK ? _BV(STATUS_RADIO_OK) : 0);
  59              		.loc 1 114 0
  60 001c 0A78     		ldrb	r2, [r1, #0]	@ zero_extendqisi2
  61              	.LVL2:
 115:./inter_mcu.h ****   status |= (radio_control.status == RC_REALLY_LOST ? _BV(STATUS_RADIO_REALLY_LOST) : 0);
  62              		.loc 1 115 0
  63 001e 022A     		cmp	r2, #2
  64 0020 0CBF     		ite	eq
  65 0022 0221     		moveq	r1, #2
  66 0024 0021     		movne	r1, #0
  67 0026 002A     		cmp	r2, #0
  68 0028 08BF     		it	eq
  69 002a 41F00101 		orreq	r1, r1, #1
  70              	.LVL3:
 116:./inter_mcu.h ****   status |= (radio_control.status == RC_OK ? _BV(AVERAGED_CHANNELS_SENT) : 0); // Any valid frame c
  71              		.loc 1 116 0
  72 002e 002A     		cmp	r2, #0
  73 0030 0CBF     		ite	eq
  74 0032 1022     		moveq	r2, #16
  75 0034 0022     		movne	r2, #0
  76 0036 0A43     		orrs	r2, r2, r1
  77              	.LVL4:
 117:./inter_mcu.h **** #endif // RADIO_CONTROL
 118:./inter_mcu.h **** 
 119:./inter_mcu.h ****   status |= (fbw_mode == FBW_MODE_AUTO ? _BV(STATUS_MODE_AUTO) : 0);
  78              		.loc 1 119 0
  79 0038 0C49     		ldr	r1, .L12+8
  80 003a 0978     		ldrb	r1, [r1, #0]	@ zero_extendqisi2
  81 003c 0129     		cmp	r1, #1
  82 003e 0CBF     		ite	eq
  83 0040 0420     		moveq	r0, #4
  84 0042 0020     		movne	r0, #0
  85 0044 0243     		orrs	r2, r2, r0
  86              	.LVL5:
 120:./inter_mcu.h ****   status |= (fbw_mode == FBW_MODE_FAILSAFE ? _BV(STATUS_MODE_FAILSAFE) : 0);
  87              		.loc 1 120 0
  88 0046 0229     		cmp	r1, #2
  89 0048 0CBF     		ite	eq
  90 004a 0821     		moveq	r1, #8
  91 004c 0021     		movne	r1, #0
  92              	.LVL6:
  93 004e 1143     		orrs	r1, r1, r2
  94              	.LVL7:
 121:./inter_mcu.h ****   fbw_state->status  = status;
 122:./inter_mcu.h **** 
 123:./inter_mcu.h ****   fbw_state->vsupply = electrical.vsupply;
  95              		.loc 1 123 0
  96 0050 074A     		ldr	r2, .L12+12
 121:./inter_mcu.h ****   fbw_state->status  = status;
  97              		.loc 1 121 0
  98 0052 5976     		strb	r1, [r3, #25]
  99              		.loc 1 123 0
 100 0054 1178     		ldrb	r1, [r2, #0]	@ zero_extendqisi2
 124:./inter_mcu.h ****   fbw_state->current = electrical.current;
 101              		.loc 1 124 0
 102 0056 5268     		ldr	r2, [r2, #4]
 123:./inter_mcu.h ****   fbw_state->vsupply = electrical.vsupply;
 103              		.loc 1 123 0
 104 0058 D976     		strb	r1, [r3, #27]
 105              		.loc 1 124 0
 106 005a DA61     		str	r2, [r3, #28]
 125:./inter_mcu.h **** #if defined SINGLE_MCU
 126:./inter_mcu.h ****   /**Directly set the flag indicating to AP that shared buffer is available*/
 127:./inter_mcu.h ****   inter_mcu_received_fbw = TRUE;
 107              		.loc 1 127 0
 108 005c 054B     		ldr	r3, .L12+16
 109 005e 0122     		movs	r2, #1
 110 0060 1A70     		strb	r2, [r3, #0]
 128:./inter_mcu.h **** #endif
 129:./inter_mcu.h **** }
 111              		.loc 1 129 0
 112 0062 10BD     		pop	{r4, pc}
 113              	.L13:
 114              		.align	2
 115              	.L12:
 116 0064 00000000 		.word	fbw_state
 117 0068 00000000 		.word	radio_control
 118 006c 00000000 		.word	.LANCHOR0
 119 0070 00000000 		.word	electrical
 120 0074 00000000 		.word	inter_mcu_received_fbw
 121              		.cfi_endproc
 122              	.LFE30:
 124              		.section	.text.handle_rc_frame,"ax",%progbits
 125              		.align	1
 126              		.thumb
 127              		.thumb_func
 129              	handle_rc_frame:
 130              	.LFB40:
 131              		.file 2 "firmwares/fixedwing/main_fbw.c"
   1:firmwares/fixedwing/main_fbw.c **** /*
   2:firmwares/fixedwing/main_fbw.c ****  * Paparazzi $Id$
   3:firmwares/fixedwing/main_fbw.c ****  *
   4:firmwares/fixedwing/main_fbw.c ****  * Copyright (C) 2003-2010 The Paparazzi Team
   5:firmwares/fixedwing/main_fbw.c ****  *
   6:firmwares/fixedwing/main_fbw.c ****  * This file is part of Paparazzi.
   7:firmwares/fixedwing/main_fbw.c ****  *
   8:firmwares/fixedwing/main_fbw.c ****  * Paparazzi is free software; you can redistribute it and/or modify
   9:firmwares/fixedwing/main_fbw.c ****  * it under the terms of the GNU General Public License as published by
  10:firmwares/fixedwing/main_fbw.c ****  * the Free Software Foundation; either version 2, or (at your option)
  11:firmwares/fixedwing/main_fbw.c ****  * any later version.
  12:firmwares/fixedwing/main_fbw.c ****  *
  13:firmwares/fixedwing/main_fbw.c ****  * Paparazzi is distributed in the hope that it will be useful,
  14:firmwares/fixedwing/main_fbw.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:firmwares/fixedwing/main_fbw.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:firmwares/fixedwing/main_fbw.c ****  * GNU General Public License for more details.
  17:firmwares/fixedwing/main_fbw.c ****  *
  18:firmwares/fixedwing/main_fbw.c ****  * You should have received a copy of the GNU General Public License
  19:firmwares/fixedwing/main_fbw.c ****  * along with Paparazzi; see the file COPYING.  If not, write to
  20:firmwares/fixedwing/main_fbw.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  21:firmwares/fixedwing/main_fbw.c ****  * Boston, MA 02111-1307, USA.
  22:firmwares/fixedwing/main_fbw.c ****  *
  23:firmwares/fixedwing/main_fbw.c ****  */
  24:firmwares/fixedwing/main_fbw.c **** 
  25:firmwares/fixedwing/main_fbw.c **** /** \file main_fbw.c
  26:firmwares/fixedwing/main_fbw.c ****  *  \brief FBW ( FlyByWire ) process
  27:firmwares/fixedwing/main_fbw.c ****  *
  28:firmwares/fixedwing/main_fbw.c ****  *   This process is responsible for decoding radio control, generating actuators
  29:firmwares/fixedwing/main_fbw.c ****  * signals either from the radio control or from the commands provided by the
  30:firmwares/fixedwing/main_fbw.c ****  * AP (autopilot) process. It also performs a telemetry task and a low level monitoring
  31:firmwares/fixedwing/main_fbw.c ****  * ( for parameters like the supply )
  32:firmwares/fixedwing/main_fbw.c ****  */
  33:firmwares/fixedwing/main_fbw.c **** 
  34:firmwares/fixedwing/main_fbw.c **** #include "generated/airframe.h"
  35:firmwares/fixedwing/main_fbw.c **** 
  36:firmwares/fixedwing/main_fbw.c **** #include "firmwares/fixedwing/main_fbw.h"
  37:firmwares/fixedwing/main_fbw.c **** #include "mcu.h"
  38:firmwares/fixedwing/main_fbw.c **** #include "mcu_periph/sys_time.h"
  39:firmwares/fixedwing/main_fbw.c **** #include "commands.h"
  40:firmwares/fixedwing/main_fbw.c **** #include "firmwares/fixedwing/actuators.h"
  41:firmwares/fixedwing/main_fbw.c **** #include "subsystems/electrical.h"
  42:firmwares/fixedwing/main_fbw.c **** #include "subsystems/radio_control.h"
  43:firmwares/fixedwing/main_fbw.c **** #include "firmwares/fixedwing/autopilot.h"
  44:firmwares/fixedwing/main_fbw.c **** #include "fbw_downlink.h"
  45:firmwares/fixedwing/main_fbw.c **** #include "paparazzi.h"
  46:firmwares/fixedwing/main_fbw.c **** #include "mcu_periph/i2c.h"
  47:firmwares/fixedwing/main_fbw.c **** 
  48:firmwares/fixedwing/main_fbw.c **** #ifdef MCU_SPI_LINK
  49:firmwares/fixedwing/main_fbw.c **** #include "link_mcu.h"
  50:firmwares/fixedwing/main_fbw.c **** #endif
  51:firmwares/fixedwing/main_fbw.c **** 
  52:firmwares/fixedwing/main_fbw.c **** uint8_t fbw_mode;
  53:firmwares/fixedwing/main_fbw.c **** 
  54:firmwares/fixedwing/main_fbw.c **** #include "inter_mcu.h"
  55:firmwares/fixedwing/main_fbw.c **** 
  56:firmwares/fixedwing/main_fbw.c **** 
  57:firmwares/fixedwing/main_fbw.c **** volatile uint8_t fbw_new_actuators = 0;
  58:firmwares/fixedwing/main_fbw.c **** 
  59:firmwares/fixedwing/main_fbw.c **** tid_t fbw_periodic_tid; ///< id for periodic_task_fbw() timer
  60:firmwares/fixedwing/main_fbw.c **** tid_t electrical_tid;   ///< id for electrical_periodic() timer
  61:firmwares/fixedwing/main_fbw.c **** 
  62:firmwares/fixedwing/main_fbw.c **** /********** INIT *************************************************************/
  63:firmwares/fixedwing/main_fbw.c **** void init_fbw( void ) {
  64:firmwares/fixedwing/main_fbw.c **** 
  65:firmwares/fixedwing/main_fbw.c ****   mcu_init();
  66:firmwares/fixedwing/main_fbw.c **** 
  67:firmwares/fixedwing/main_fbw.c ****   electrical_init();
  68:firmwares/fixedwing/main_fbw.c **** 
  69:firmwares/fixedwing/main_fbw.c **** #ifdef ACTUATORS
  70:firmwares/fixedwing/main_fbw.c ****   actuators_init();
  71:firmwares/fixedwing/main_fbw.c ****   /* Load the failsafe defaults */
  72:firmwares/fixedwing/main_fbw.c ****   SetCommands(commands_failsafe);
  73:firmwares/fixedwing/main_fbw.c ****   fbw_new_actuators = 1;
  74:firmwares/fixedwing/main_fbw.c **** #endif
  75:firmwares/fixedwing/main_fbw.c **** #ifdef RADIO_CONTROL
  76:firmwares/fixedwing/main_fbw.c ****   radio_control_init();
  77:firmwares/fixedwing/main_fbw.c **** #endif
  78:firmwares/fixedwing/main_fbw.c **** #ifdef INTER_MCU
  79:firmwares/fixedwing/main_fbw.c ****   inter_mcu_init();
  80:firmwares/fixedwing/main_fbw.c **** #endif
  81:firmwares/fixedwing/main_fbw.c **** #ifdef MCU_SPI_LINK
  82:firmwares/fixedwing/main_fbw.c ****   link_mcu_restart();
  83:firmwares/fixedwing/main_fbw.c **** #endif
  84:firmwares/fixedwing/main_fbw.c **** 
  85:firmwares/fixedwing/main_fbw.c ****   fbw_mode = FBW_MODE_FAILSAFE;
  86:firmwares/fixedwing/main_fbw.c **** 
  87:firmwares/fixedwing/main_fbw.c ****   /**** start timers for periodic functions *****/
  88:firmwares/fixedwing/main_fbw.c ****   fbw_periodic_tid = sys_time_register_timer((1./60.), NULL);
  89:firmwares/fixedwing/main_fbw.c ****   electrical_tid = sys_time_register_timer(0.1, NULL);
  90:firmwares/fixedwing/main_fbw.c **** 
  91:firmwares/fixedwing/main_fbw.c **** #ifndef SINGLE_MCU
  92:firmwares/fixedwing/main_fbw.c ****   mcu_int_enable();
  93:firmwares/fixedwing/main_fbw.c **** #endif
  94:firmwares/fixedwing/main_fbw.c **** }
  95:firmwares/fixedwing/main_fbw.c **** 
  96:firmwares/fixedwing/main_fbw.c **** 
  97:firmwares/fixedwing/main_fbw.c **** static inline void set_failsafe_mode( void ) {
  98:firmwares/fixedwing/main_fbw.c ****   fbw_mode = FBW_MODE_FAILSAFE;
  99:firmwares/fixedwing/main_fbw.c ****   SetCommands(commands_failsafe);
 100:firmwares/fixedwing/main_fbw.c ****   fbw_new_actuators = 1;
 101:firmwares/fixedwing/main_fbw.c **** }
 102:firmwares/fixedwing/main_fbw.c **** 
 103:firmwares/fixedwing/main_fbw.c **** 
 104:firmwares/fixedwing/main_fbw.c **** #ifdef RADIO_CONTROL
 105:firmwares/fixedwing/main_fbw.c **** static inline void handle_rc_frame( void ) {
 132              		.loc 2 105 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 106:firmwares/fixedwing/main_fbw.c ****   fbw_mode = FBW_MODE_OF_PPRZ(radio_control.values[RADIO_MODE]);
 137              		.loc 2 106 0
 138 0000 0B4B     		ldr	r3, .L16
 139 0002 0C49     		ldr	r1, .L16+4
 140 0004 B3F91020 		ldrsh	r2, [r3, #16]
 141 0008 12F5965F 		cmn	r2, #4800
 142 000c B4BF     		ite	lt
 143 000e 0022     		movlt	r2, #0
 144 0010 0122     		movge	r2, #1
 145 0012 0A70     		strb	r2, [r1, #0]
 107:firmwares/fixedwing/main_fbw.c ****   if (fbw_mode == FBW_MODE_MANUAL)
 146              		.loc 2 107 0
 147 0014 5AB9     		cbnz	r2, .L14
 148              	.LBB25:
 149              	.LBB26:
 108:firmwares/fixedwing/main_fbw.c ****   {
 109:firmwares/fixedwing/main_fbw.c ****     SetCommandsFromRC(commands, radio_control.values);
 150              		.loc 2 109 0
 151 0016 084A     		ldr	r2, .L16+8
 152 0018 1989     		ldrh	r1, [r3, #8]
 153 001a 5180     		strh	r1, [r2, #2]	@ movhi
 154 001c 5989     		ldrh	r1, [r3, #10]
 155 001e 9180     		strh	r1, [r2, #4]	@ movhi
 156 0020 D988     		ldrh	r1, [r3, #6]
 157 0022 9B89     		ldrh	r3, [r3, #12]
 158 0024 1180     		strh	r1, [r2, #0]	@ movhi
 159 0026 D380     		strh	r3, [r2, #6]	@ movhi
 110:firmwares/fixedwing/main_fbw.c ****     fbw_new_actuators = 1;
 160              		.loc 2 110 0
 161 0028 044B     		ldr	r3, .L16+12
 162 002a 0122     		movs	r2, #1
 163 002c 1A70     		strb	r2, [r3, #0]
 164              	.L14:
 165 002e 7047     		bx	lr
 166              	.L17:
 167              		.align	2
 168              	.L16:
 169 0030 00000000 		.word	radio_control
 170 0034 00000000 		.word	.LANCHOR0
 171 0038 00000000 		.word	commands
 172 003c 00000000 		.word	.LANCHOR1
 173              	.LBE26:
 174              	.LBE25:
 175              		.cfi_endproc
 176              	.LFE40:
 178              		.section	.text.init_fbw,"ax",%progbits
 179              		.align	1
 180              		.global	init_fbw
 181              		.thumb
 182              		.thumb_func
 184              	init_fbw:
 185              	.LFB38:
  63:firmwares/fixedwing/main_fbw.c **** void init_fbw( void ) {
 186              		.loc 2 63 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190 0000 70B5     		push	{r4, r5, r6, lr}
 191              	.LCFI1:
 192              		.cfi_def_cfa_offset 16
 193              		.cfi_offset 14, -4
 194              		.cfi_offset 6, -8
 195              		.cfi_offset 5, -12
 196              		.cfi_offset 4, -16
  65:firmwares/fixedwing/main_fbw.c ****   mcu_init();
 197              		.loc 2 65 0
 198 0002 FFF7FEFF 		bl	mcu_init
  67:firmwares/fixedwing/main_fbw.c ****   electrical_init();
 199              		.loc 2 67 0
 200 0006 FFF7FEFF 		bl	electrical_init
  70:firmwares/fixedwing/main_fbw.c ****   actuators_init();
 201              		.loc 2 70 0
 202 000a FFF7FEFF 		bl	actuators_init
 203              	.LVL8:
 204              	.LBB27:
  72:firmwares/fixedwing/main_fbw.c ****   SetCommands(commands_failsafe);
 205              		.loc 2 72 0
 206 000e 1B4A     		ldr	r2, .L21
 207 0010 1B4B     		ldr	r3, .L21+4
 208 0012 1188     		ldrh	r1, [r2, #0]
 209              	.LBE27:
 210              	.LBB28:
 211              	.LBB29:
  63:firmwares/fixedwing/main_fbw.c **** void init_fbw( void ) {
 212              		.loc 2 63 0
 213 0014 1B48     		ldr	r0, .L21+8
 214              	.LBE29:
 215              	.LBE28:
 216              	.LBB31:
  72:firmwares/fixedwing/main_fbw.c ****   SetCommands(commands_failsafe);
 217              		.loc 2 72 0
 218 0016 1980     		strh	r1, [r3, #0]	@ movhi
 219              	.LVL9:
 220 0018 5188     		ldrh	r1, [r2, #2]
 221 001a 5980     		strh	r1, [r3, #2]	@ movhi
 222              	.LVL10:
 223 001c 9188     		ldrh	r1, [r2, #4]
 224 001e D288     		ldrh	r2, [r2, #6]
 225 0020 9980     		strh	r1, [r3, #4]	@ movhi
 226              	.LVL11:
 227 0022 DA80     		strh	r2, [r3, #6]	@ movhi
 228              	.LVL12:
 229              	.LBE31:
  73:firmwares/fixedwing/main_fbw.c ****   fbw_new_actuators = 1;
 230              		.loc 2 73 0
 231 0024 184B     		ldr	r3, .L21+12
 232 0026 0122     		movs	r2, #1
 233 0028 1A70     		strb	r2, [r3, #0]
 234              	.LVL13:
 235 002a 0022     		movs	r2, #0
 236              	.LBB32:
 237              	.LBB30:
 238              		.file 3 "./subsystems/radio_control.h"
   1:./subsystems/radio_control.h **** /*
   2:./subsystems/radio_control.h ****  * Paparazzi $Id$
   3:./subsystems/radio_control.h ****  *
   4:./subsystems/radio_control.h ****  * Copyright (C) 2006 Pascal Brisset, Antoine Drouin
   5:./subsystems/radio_control.h ****  *
   6:./subsystems/radio_control.h ****  * This file is part of paparazzi.
   7:./subsystems/radio_control.h ****  *
   8:./subsystems/radio_control.h ****  * paparazzi is free software; you can redistribute it and/or modify
   9:./subsystems/radio_control.h ****  * it under the terms of the GNU General Public License as published by
  10:./subsystems/radio_control.h ****  * the Free Software Foundation; either version 2, or (at your option)
  11:./subsystems/radio_control.h ****  * any later version.
  12:./subsystems/radio_control.h ****  *
  13:./subsystems/radio_control.h ****  * paparazzi is distributed in the hope that it will be useful,
  14:./subsystems/radio_control.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:./subsystems/radio_control.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:./subsystems/radio_control.h ****  * GNU General Public License for more details.
  17:./subsystems/radio_control.h ****  *
  18:./subsystems/radio_control.h ****  * You should have received a copy of the GNU General Public License
  19:./subsystems/radio_control.h ****  * along with paparazzi; see the file COPYING.  If not, write to
  20:./subsystems/radio_control.h ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  21:./subsystems/radio_control.h ****  * Boston, MA 02111-1307, USA.
  22:./subsystems/radio_control.h ****  *
  23:./subsystems/radio_control.h ****  */
  24:./subsystems/radio_control.h **** 
  25:./subsystems/radio_control.h **** #ifndef RADIO_CONTROL_H
  26:./subsystems/radio_control.h **** #define RADIO_CONTROL_H
  27:./subsystems/radio_control.h **** 
  28:./subsystems/radio_control.h **** #if defined RADIO_CONTROL
  29:./subsystems/radio_control.h **** 
  30:./subsystems/radio_control.h **** #include "led.h"
  31:./subsystems/radio_control.h **** #include "generated/airframe.h"
  32:./subsystems/radio_control.h **** #include "paparazzi.h"
  33:./subsystems/radio_control.h **** 
  34:./subsystems/radio_control.h **** /* underlying hardware */
  35:./subsystems/radio_control.h **** #include RADIO_CONTROL_TYPE_H
  36:./subsystems/radio_control.h **** /* must be defined by underlying hardware */
  37:./subsystems/radio_control.h **** extern void radio_control_impl_init(void);
  38:./subsystems/radio_control.h **** /* RADIO_CONTROL_NB_CHANNEL has to be defined by the implementation */
  39:./subsystems/radio_control.h **** 
  40:./subsystems/radio_control.h **** /* timeouts - for now assumes 60Hz periodic */
  41:./subsystems/radio_control.h **** #define RC_AVG_PERIOD 8  /* TODO remove if IIR filter is used */
  42:./subsystems/radio_control.h **** #define RC_LOST_TIME 30  /* 500ms with a 60Hz timer */
  43:./subsystems/radio_control.h **** #define RC_REALLY_LOST_TIME 60 /* ~1s */
  44:./subsystems/radio_control.h **** /* Number of valid frames before going back to RC OK */
  45:./subsystems/radio_control.h **** #define RC_OK_CPT 15
  46:./subsystems/radio_control.h **** 
  47:./subsystems/radio_control.h **** #define RC_OK          0
  48:./subsystems/radio_control.h **** #define RC_LOST        1
  49:./subsystems/radio_control.h **** #define RC_REALLY_LOST 2
  50:./subsystems/radio_control.h **** 
  51:./subsystems/radio_control.h **** struct RadioControl {
  52:./subsystems/radio_control.h ****   uint8_t status;
  53:./subsystems/radio_control.h ****   uint8_t time_since_last_frame;
  54:./subsystems/radio_control.h ****   uint8_t radio_ok_cpt;
  55:./subsystems/radio_control.h ****   uint8_t frame_rate;
  56:./subsystems/radio_control.h ****   uint8_t frame_cpt;
  57:./subsystems/radio_control.h ****   pprz_t  values[RADIO_CONTROL_NB_CHANNEL];
  58:./subsystems/radio_control.h **** };
  59:./subsystems/radio_control.h **** 
  60:./subsystems/radio_control.h **** extern struct RadioControl radio_control;
  61:./subsystems/radio_control.h **** 
  62:./subsystems/radio_control.h **** 
  63:./subsystems/radio_control.h **** /************* INIT ******************************************************/
  64:./subsystems/radio_control.h **** static inline void radio_control_init ( void ) {
  65:./subsystems/radio_control.h ****   uint8_t i;
  66:./subsystems/radio_control.h ****   for (i=0; i<RADIO_CONTROL_NB_CHANNEL; i++)
  67:./subsystems/radio_control.h ****     radio_control.values[i] = 0;
 239              		.loc 3 67 0
 240 002c 1146     		mov	r1, r2
 241              	.LVL14:
 242              	.L19:
  63:firmwares/fixedwing/main_fbw.c **** void init_fbw( void ) {
 243              		.loc 2 63 0
 244 002e 1618     		adds	r6, r2, r0
 245              		.loc 3 67 0
 246 0030 0232     		adds	r2, r2, #2
 247 0032 0024     		movs	r4, #0
  66:./subsystems/radio_control.h ****   for (i=0; i<RADIO_CONTROL_NB_CHANNEL; i++)
 248              		.loc 3 66 0
 249 0034 182A     		cmp	r2, #24
  63:firmwares/fixedwing/main_fbw.c **** void init_fbw( void ) {
 250              		.loc 2 63 0
 251 0036 134B     		ldr	r3, .L21+8
 252              		.loc 3 67 0
 253 0038 2546     		mov	r5, r4	@ movhi
 254 003a F180     		strh	r1, [r6, #6]	@ movhi
  66:./subsystems/radio_control.h ****   for (i=0; i<RADIO_CONTROL_NB_CHANNEL; i++)
 255              		.loc 3 66 0
 256 003c F7D1     		bne	.L19
  68:./subsystems/radio_control.h ****   radio_control.status = RC_REALLY_LOST;
  69:./subsystems/radio_control.h ****   radio_control.time_since_last_frame = RC_REALLY_LOST_TIME;
 257              		.loc 3 69 0
 258 003e 3C22     		movs	r2, #60
  68:./subsystems/radio_control.h ****   radio_control.status = RC_REALLY_LOST;
 259              		.loc 3 68 0
 260 0040 0226     		movs	r6, #2
 261              		.loc 3 69 0
 262 0042 5A70     		strb	r2, [r3, #1]
  68:./subsystems/radio_control.h ****   radio_control.status = RC_REALLY_LOST;
 263              		.loc 3 68 0
 264 0044 1E70     		strb	r6, [r3, #0]
  70:./subsystems/radio_control.h ****   radio_control.radio_ok_cpt = 0;
 265              		.loc 3 70 0
 266 0046 9C70     		strb	r4, [r3, #2]
  71:./subsystems/radio_control.h ****   radio_control.frame_rate = 0;
 267              		.loc 3 71 0
 268 0048 DC70     		strb	r4, [r3, #3]
  72:./subsystems/radio_control.h ****   radio_control.frame_cpt = 0;
 269              		.loc 3 72 0
 270 004a 1C71     		strb	r4, [r3, #4]
  73:./subsystems/radio_control.h ****   radio_control_impl_init();
 271              		.loc 3 73 0
 272 004c FFF7FEFF 		bl	radio_control_impl_init
 273              	.LBE30:
 274              	.LBE32:
 275              	.LBB33:
 276              	.LBB34:
  96:./inter_mcu.h ****   fbw_state->status = 0;
 277              		.loc 1 96 0
 278 0050 0E4B     		ldr	r3, .L21+16
 279              	.LBE34:
 280              	.LBE33:
  88:firmwares/fixedwing/main_fbw.c ****   fbw_periodic_tid = sys_time_register_timer((1./60.), NULL);
 281              		.loc 2 88 0
 282 0052 2146     		mov	r1, r4
 283              	.LBB37:
 284              	.LBB35:
  96:./inter_mcu.h ****   fbw_state->status = 0;
 285              		.loc 1 96 0
 286 0054 1B68     		ldr	r3, [r3, #0]
 287              	.LBE35:
 288              	.LBE37:
  88:firmwares/fixedwing/main_fbw.c ****   fbw_periodic_tid = sys_time_register_timer((1./60.), NULL);
 289              		.loc 2 88 0
 290 0056 0E48     		ldr	r0, .L21+20
 291              	.LBB38:
 292              	.LBB36:
  96:./inter_mcu.h ****   fbw_state->status = 0;
 293              		.loc 1 96 0
 294 0058 5C76     		strb	r4, [r3, #25]
  97:./inter_mcu.h ****   fbw_state->nb_err = 0;
 295              		.loc 1 97 0
 296 005a 9C76     		strb	r4, [r3, #26]
  99:./inter_mcu.h ****   ap_ok = FALSE;
 297              		.loc 1 99 0
 298 005c 0D4B     		ldr	r3, .L21+24
 299 005e 1C70     		strb	r4, [r3, #0]
 300              	.LBE36:
 301              	.LBE38:
  85:firmwares/fixedwing/main_fbw.c ****   fbw_mode = FBW_MODE_FAILSAFE;
 302              		.loc 2 85 0
 303 0060 0D4B     		ldr	r3, .L21+28
 304 0062 1E70     		strb	r6, [r3, #0]
  88:firmwares/fixedwing/main_fbw.c ****   fbw_periodic_tid = sys_time_register_timer((1./60.), NULL);
 305              		.loc 2 88 0
 306 0064 FFF7FEFF 		bl	sys_time_register_timer
 307 0068 0C4B     		ldr	r3, .L21+32
  89:firmwares/fixedwing/main_fbw.c ****   electrical_tid = sys_time_register_timer(0.1, NULL);
 308              		.loc 2 89 0
 309 006a 2146     		mov	r1, r4
  88:firmwares/fixedwing/main_fbw.c ****   fbw_periodic_tid = sys_time_register_timer((1./60.), NULL);
 310              		.loc 2 88 0
 311 006c 1870     		strb	r0, [r3, #0]
  89:firmwares/fixedwing/main_fbw.c ****   electrical_tid = sys_time_register_timer(0.1, NULL);
 312              		.loc 2 89 0
 313 006e 0C48     		ldr	r0, .L21+36
 314 0070 FFF7FEFF 		bl	sys_time_register_timer
 315 0074 0B4B     		ldr	r3, .L21+40
 316 0076 1870     		strb	r0, [r3, #0]
  94:firmwares/fixedwing/main_fbw.c **** }
 317              		.loc 2 94 0
 318 0078 70BD     		pop	{r4, r5, r6, pc}
 319              	.L22:
 320 007a 00BF     		.align	2
 321              	.L21:
 322 007c 00000000 		.word	commands_failsafe
 323 0080 00000000 		.word	commands
 324 0084 00000000 		.word	radio_control
 325 0088 00000000 		.word	.LANCHOR1
 326 008c 00000000 		.word	fbw_state
 327 0090 8988883C 		.word	1015580809
 328 0094 00000000 		.word	ap_ok
 329 0098 00000000 		.word	.LANCHOR0
 330 009c 00000000 		.word	.LANCHOR2
 331 00a0 CDCCCC3D 		.word	1036831949
 332 00a4 00000000 		.word	.LANCHOR3
 333              		.cfi_endproc
 334              	.LFE38:
 336              		.global	__aeabi_i2f
 337              		.global	__aeabi_f2d
 338              		.global	__aeabi_fcmpgt
 339              		.global	__aeabi_dmul
 340              		.global	__aeabi_d2f
 341              		.global	__aeabi_f2iz
 342              		.global	__aeabi_i2d
 343              		.global	__aeabi_dadd
 344              		.section	.text.event_task_fbw,"ax",%progbits
 345              		.align	1
 346              		.global	event_task_fbw
 347              		.thumb
 348              		.thumb_func
 350              	event_task_fbw:
 351              	.LFB41:
 111:firmwares/fixedwing/main_fbw.c ****   }
 112:firmwares/fixedwing/main_fbw.c **** }
 113:firmwares/fixedwing/main_fbw.c **** #endif
 114:firmwares/fixedwing/main_fbw.c **** 
 115:firmwares/fixedwing/main_fbw.c **** 
 116:firmwares/fixedwing/main_fbw.c **** /********** EVENT ************************************************************/
 117:firmwares/fixedwing/main_fbw.c **** 
 118:firmwares/fixedwing/main_fbw.c **** void event_task_fbw( void) {
 352              		.loc 2 118 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 357              	.LCFI2:
 358              		.cfi_def_cfa_offset 32
 359              		.cfi_offset 14, -4
 360              		.cfi_offset 9, -8
 361              		.cfi_offset 8, -12
 362              		.cfi_offset 7, -16
 363              		.cfi_offset 6, -20
 364              		.cfi_offset 5, -24
 365              		.cfi_offset 4, -28
 366              		.cfi_offset 3, -32
 119:firmwares/fixedwing/main_fbw.c **** #ifdef RADIO_CONTROL
 120:firmwares/fixedwing/main_fbw.c ****   RadioControlEvent(handle_rc_frame);
 367              		.loc 2 120 0
 368 0004 A648     		ldr	r0, .L57+56
 369 0006 FFF7FEFF 		bl	RadioControlEventImp
 121:firmwares/fixedwing/main_fbw.c **** #endif
 122:firmwares/fixedwing/main_fbw.c **** 
 123:firmwares/fixedwing/main_fbw.c ****   i2c_event();
 370              		.loc 2 123 0
 371 000a FFF7FEFF 		bl	i2c_event
 124:firmwares/fixedwing/main_fbw.c **** 
 125:firmwares/fixedwing/main_fbw.c **** #ifdef INTER_MCU
 126:firmwares/fixedwing/main_fbw.c **** #ifdef MCU_SPI_LINK
 127:firmwares/fixedwing/main_fbw.c ****     link_mcu_event_task();
 128:firmwares/fixedwing/main_fbw.c **** #endif /* MCU_SPI_LINK */
 129:firmwares/fixedwing/main_fbw.c **** 
 130:firmwares/fixedwing/main_fbw.c **** 
 131:firmwares/fixedwing/main_fbw.c ****   if (inter_mcu_received_ap) {
 372              		.loc 2 131 0
 373 000e A54B     		ldr	r3, .L57+60
 374 0010 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 375 0012 002A     		cmp	r2, #0
 376 0014 24D0     		beq	.L24
 132:firmwares/fixedwing/main_fbw.c ****     inter_mcu_received_ap = FALSE;
 377              		.loc 2 132 0
 378 0016 0022     		movs	r2, #0
 379 0018 1A70     		strb	r2, [r3, #0]
 380              	.LBB39:
 381              	.LBB40:
 130:./inter_mcu.h **** 
 131:./inter_mcu.h **** /** Prepares date for next comm with AP. Set ::ap_ok to TRUE */
 132:./inter_mcu.h **** static inline void inter_mcu_event_task( void) {
 133:./inter_mcu.h ****   time_since_last_ap = 0;
 382              		.loc 1 133 0
 383 001a A34B     		ldr	r3, .L57+64
 134:./inter_mcu.h ****   ap_ok = TRUE;
 384              		.loc 1 134 0
 385 001c 0121     		movs	r1, #1
 133:./inter_mcu.h ****   time_since_last_ap = 0;
 386              		.loc 1 133 0
 387 001e 1A70     		strb	r2, [r3, #0]
 388              		.loc 1 134 0
 389 0020 A24B     		ldr	r3, .L57+68
 390              	.LBE40:
 391              	.LBE39:
 133:firmwares/fixedwing/main_fbw.c ****     inter_mcu_event_task();
 134:firmwares/fixedwing/main_fbw.c ****     command_roll_trim = ap_state->command_roll_trim;
 392              		.loc 2 134 0
 393 0022 A34A     		ldr	r2, .L57+72
 394              	.LBB42:
 395              	.LBB41:
 396              		.loc 1 134 0
 397 0024 1970     		strb	r1, [r3, #0]
 398              	.LBE41:
 399              	.LBE42:
 400              		.loc 2 134 0
 401 0026 A34B     		ldr	r3, .L57+76
 402 0028 1B68     		ldr	r3, [r3, #0]
 403 002a 1889     		ldrh	r0, [r3, #8]
 404 002c 1080     		strh	r0, [r2, #0]	@ movhi
 135:firmwares/fixedwing/main_fbw.c ****     command_pitch_trim = ap_state->command_pitch_trim;
 405              		.loc 2 135 0
 406 002e 5889     		ldrh	r0, [r3, #10]
 407 0030 A14A     		ldr	r2, .L57+80
 408 0032 1080     		strh	r0, [r2, #0]	@ movhi
 136:firmwares/fixedwing/main_fbw.c ****     if (ap_ok && fbw_mode == FBW_MODE_FAILSAFE) {
 409              		.loc 2 136 0
 410 0034 A14A     		ldr	r2, .L57+84
 411 0036 1078     		ldrb	r0, [r2, #0]	@ zero_extendqisi2
 412 0038 0228     		cmp	r0, #2
 137:firmwares/fixedwing/main_fbw.c ****       fbw_mode = FBW_MODE_AUTO;
 413              		.loc 2 137 0
 414 003a 08BF     		it	eq
 415 003c 1170     		strbeq	r1, [r2, #0]
 138:firmwares/fixedwing/main_fbw.c ****     }
 139:firmwares/fixedwing/main_fbw.c ****     if (fbw_mode == FBW_MODE_AUTO) {
 416              		.loc 2 139 0
 417 003e 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 418 0040 012A     		cmp	r2, #1
 419 0042 08D1     		bne	.L26
 420              	.LBB43:
 140:firmwares/fixedwing/main_fbw.c ****       SetCommands(ap_state->commands);
 421              		.loc 2 140 0
 422 0044 1988     		ldrh	r1, [r3, #0]
 423 0046 9E4A     		ldr	r2, .L57+88
 424 0048 1180     		strh	r1, [r2, #0]	@ movhi
 425              	.LVL15:
 426 004a 5988     		ldrh	r1, [r3, #2]
 427 004c 5180     		strh	r1, [r2, #2]	@ movhi
 428              	.LVL16:
 429 004e 9988     		ldrh	r1, [r3, #4]
 430 0050 DB88     		ldrh	r3, [r3, #6]
 431 0052 9180     		strh	r1, [r2, #4]	@ movhi
 432              	.LVL17:
 433 0054 D380     		strh	r3, [r2, #6]	@ movhi
 434              	.LVL18:
 435              	.L26:
 436              	.LBE43:
 141:firmwares/fixedwing/main_fbw.c ****     }
 142:firmwares/fixedwing/main_fbw.c **** #ifdef SetApOnlyCommands
 143:firmwares/fixedwing/main_fbw.c ****     else
 144:firmwares/fixedwing/main_fbw.c ****     {
 145:firmwares/fixedwing/main_fbw.c ****       SetApOnlyCommands(ap_state->commands);
 146:firmwares/fixedwing/main_fbw.c ****     }
 147:firmwares/fixedwing/main_fbw.c **** #endif
 148:firmwares/fixedwing/main_fbw.c ****     fbw_new_actuators = 1;
 437              		.loc 2 148 0
 438 0056 9B4B     		ldr	r3, .L57+92
 439 0058 0122     		movs	r2, #1
 440 005a 1A70     		strb	r2, [r3, #0]
 149:firmwares/fixedwing/main_fbw.c **** 
 150:firmwares/fixedwing/main_fbw.c **** #ifdef SINGLE_MCU
 151:firmwares/fixedwing/main_fbw.c ****     inter_mcu_fill_fbw_state();
 441              		.loc 2 151 0
 442 005c FFF7FEFF 		bl	inter_mcu_fill_fbw_state
 443              	.L24:
 152:firmwares/fixedwing/main_fbw.c **** #endif /**Else the buffer is filled even if the last receive was not correct */
 153:firmwares/fixedwing/main_fbw.c ****   }
 154:firmwares/fixedwing/main_fbw.c **** 
 155:firmwares/fixedwing/main_fbw.c **** #ifdef ACTUATORS
 156:firmwares/fixedwing/main_fbw.c ****   if (fbw_new_actuators > 0)
 444              		.loc 2 156 0
 445 0060 984B     		ldr	r3, .L57+92
 446 0062 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 447 0064 002B     		cmp	r3, #0
 448 0066 00F0FA80 		beq	.L23
 449              	.LVL19:
 450              	.LBB44:
 157:firmwares/fixedwing/main_fbw.c ****   {
 158:firmwares/fixedwing/main_fbw.c ****     pprz_t trimmed_commands[COMMANDS_NB];
 159:firmwares/fixedwing/main_fbw.c ****     int i;
 160:firmwares/fixedwing/main_fbw.c ****     for(i = 0; i < COMMANDS_NB; i++) trimmed_commands[i] = commands[i];
 161:firmwares/fixedwing/main_fbw.c **** 
 162:firmwares/fixedwing/main_fbw.c ****     #ifdef COMMAND_ROLL
 163:firmwares/fixedwing/main_fbw.c ****     trimmed_commands[COMMAND_ROLL] += ChopAbs(command_roll_trim, MAX_PPRZ/10);
 451              		.loc 2 163 0 discriminator 1
 452 006a 914A     		ldr	r2, .L57+72
 160:firmwares/fixedwing/main_fbw.c ****     for(i = 0; i < COMMANDS_NB; i++) trimmed_commands[i] = commands[i];
 453              		.loc 2 160 0 discriminator 1
 454 006c 944B     		ldr	r3, .L57+88
 455              		.loc 2 163 0 discriminator 1
 456 006e B2F90020 		ldrsh	r2, [r2, #0]
 160:firmwares/fixedwing/main_fbw.c ****     for(i = 0; i < COMMANDS_NB; i++) trimmed_commands[i] = commands[i];
 457              		.loc 2 160 0 discriminator 1
 458 0072 1888     		ldrh	r0, [r3, #0]
 459              	.LVL20:
 460              		.loc 2 163 0 discriminator 1
 461 0074 12F5707F 		cmn	r2, #960
 160:firmwares/fixedwing/main_fbw.c ****     for(i = 0; i < COMMANDS_NB; i++) trimmed_commands[i] = commands[i];
 462              		.loc 2 160 0 discriminator 1
 463 0078 9C88     		ldrh	r4, [r3, #4]
 464              	.LVL21:
 465 007a DD88     		ldrh	r5, [r3, #6]
 466              	.LVL22:
 467              		.loc 2 163 0 discriminator 1
 468 007c 5B88     		ldrh	r3, [r3, #2]
 469 007e 07DB     		blt	.L41
 470 0080 B2F5707F 		cmp	r2, #960
 471 0084 B4BF     		ite	lt
 472 0086 1646     		movlt	r6, r2
 473 0088 4FF47076 		movge	r6, #960
 474 008c B6B2     		uxth	r6, r6
 475 008e 01E0     		b	.L28
 476              	.L41:
 477              		.loc 2 163 0 is_stmt 0
 478 0090 4FF64046 		movw	r6, #64576
 479              	.L28:
 480              		.loc 2 163 0 discriminator 3
 481 0094 F618     		adds	r6, r6, r3
 164:firmwares/fixedwing/main_fbw.c ****     #endif
 165:firmwares/fixedwing/main_fbw.c ****     #ifdef COMMAND_PITCH
 166:firmwares/fixedwing/main_fbw.c ****     trimmed_commands[COMMAND_PITCH] += ChopAbs(command_pitch_trim, MAX_PPRZ/10);
 482              		.loc 2 166 0 is_stmt 1 discriminator 3
 483 0096 884B     		ldr	r3, .L57+80
 163:firmwares/fixedwing/main_fbw.c ****     trimmed_commands[COMMAND_ROLL] += ChopAbs(command_roll_trim, MAX_PPRZ/10);
 484              		.loc 2 163 0 discriminator 3
 485 0098 B6B2     		uxth	r6, r6
 486              		.loc 2 166 0 discriminator 3
 487 009a B3F90020 		ldrsh	r2, [r3, #0]
 488 009e A4B2     		uxth	r4, r4
 489 00a0 12F5707F 		cmn	r2, #960
 490 00a4 07DB     		blt	.L42
 491              		.loc 2 166 0 is_stmt 0 discriminator 1
 492 00a6 B2F5707F 		cmp	r2, #960
 493 00aa B4BF     		ite	lt
 494 00ac 1346     		movlt	r3, r2
 495 00ae 4FF47073 		movge	r3, #960
 496 00b2 9BB2     		uxth	r3, r3
 497 00b4 01E0     		b	.L29
 498              	.L42:
 499              		.loc 2 166 0
 500 00b6 4FF64043 		movw	r3, #64576
 501              	.L29:
 502              	.LBB45:
 167:firmwares/fixedwing/main_fbw.c ****     #endif
 168:firmwares/fixedwing/main_fbw.c **** 
 169:firmwares/fixedwing/main_fbw.c ****     SetActuatorsFromCommands(trimmed_commands);
 503              		.loc 2 169 0 is_stmt 1 discriminator 3
 504 00ba 00B2     		sxth	r0, r0
 505              	.LBE45:
 166:firmwares/fixedwing/main_fbw.c ****     trimmed_commands[COMMAND_PITCH] += ChopAbs(command_pitch_trim, MAX_PPRZ/10);
 506              		.loc 2 166 0 discriminator 3
 507 00bc 1C19     		adds	r4, r3, r4
 508              	.LBB46:
 509              		.loc 2 169 0 discriminator 3
 510 00be FFF7FEFF 		bl	__aeabi_i2f
 511 00c2 0746     		mov	r7, r0
 512              	.LVL23:
 513 00c4 FFF7FEFF 		bl	__aeabi_f2d
 514              	.LVL24:
 515 00c8 8046     		mov	r8, r0
 516 00ca 8946     		mov	r9, r1
 517 00cc 3846     		mov	r0, r7
 518 00ce 0021     		movs	r1, #0
 519              	.LBE46:
 166:firmwares/fixedwing/main_fbw.c ****     trimmed_commands[COMMAND_PITCH] += ChopAbs(command_pitch_trim, MAX_PPRZ/10);
 520              		.loc 2 166 0 discriminator 3
 521 00d0 A4B2     		uxth	r4, r4
 522              	.LBB47:
 523              		.loc 2 169 0 discriminator 3
 524 00d2 FFF7FEFF 		bl	__aeabi_fcmpgt
 525 00d6 18B1     		cbz	r0, .L54
 526              		.loc 2 169 0 is_stmt 0
 527 00d8 63A3     		adr	r3, .L57
 528 00da D3E90023 		ldrd	r2, [r3]
 529 00de 01E0     		b	.L30
 530              	.L54:
 531 00e0 0022     		movs	r2, #0
 532 00e2 0023     		movs	r3, #0
 533              	.L30:
 534              	.LVL25:
 535              		.loc 2 169 0 discriminator 3
 536 00e4 4046     		mov	r0, r8
 537 00e6 4946     		mov	r1, r9
 538 00e8 FFF7FEFF 		bl	__aeabi_dmul
 539              	.LVL26:
 540 00ec FFF7FEFF 		bl	__aeabi_d2f
 541 00f0 FFF7FEFF 		bl	__aeabi_f2iz
 542              	.LVL27:
 543 00f4 10F58C63 		adds	r3, r0, #1120
 544 00f8 06D2     		bcs	.L44
 545              		.loc 2 169 0 discriminator 4
 546 00fa B3F5F06F 		cmp	r3, #1920
 547 00fe 28BF     		it	cs
 548 0100 4FF4F063 		movcs	r3, #1920
 549 0104 9BB2     		uxth	r3, r3
 550 0106 01E0     		b	.L32
 551              	.L44:
 552              		.loc 2 169 0
 553 0108 4FF48C63 		mov	r3, #1120
 554              	.L32:
 555              		.loc 2 169 0 discriminator 6
 556 010c 6E4A     		ldr	r2, .L57+96
 557 010e 20B2     		sxth	r0, r4
 558              	.LVL28:
 559 0110 5380     		strh	r3, [r2, #2]	@ movhi
 560 0112 6E4A     		ldr	r2, .L57+100
 561 0114 5360     		str	r3, [r2, #4]
 562 0116 FFF7FEFF 		bl	__aeabi_i2f
 563 011a 0446     		mov	r4, r0
 564              	.LVL29:
 565 011c FFF7FEFF 		bl	__aeabi_f2d
 566              	.LVL30:
 567 0120 8046     		mov	r8, r0
 568 0122 8946     		mov	r9, r1
 569 0124 2046     		mov	r0, r4
 570 0126 0021     		movs	r1, #0
 571 0128 FFF7FEFF 		bl	__aeabi_fcmpgt
 572 012c 18B1     		cbz	r0, .L55
 573              		.loc 2 169 0
 574 012e 50A3     		adr	r3, .L57+8
 575 0130 D3E90023 		ldrd	r2, [r3]
 576 0134 02E0     		b	.L33
 577              	.L55:
 578 0136 50A3     		adr	r3, .L57+16
 579 0138 D3E90023 		ldrd	r2, [r3]
 580              	.L33:
 581              	.LVL31:
 582              		.loc 2 169 0 discriminator 9
 583 013c 4046     		mov	r0, r8
 584 013e 4946     		mov	r1, r9
 585 0140 FFF7FEFF 		bl	__aeabi_dmul
 586              	.LVL32:
 587 0144 FFF7FEFF 		bl	__aeabi_d2f
 588 0148 FFF7FEFF 		bl	__aeabi_f2iz
 589 014c 40F24B43 		movw	r3, #1099
 590 0150 00F2EB50 		addw	r0, r0, #1515
 591              	.LVL33:
 592 0154 9842     		cmp	r0, r3
 593 0156 06D9     		bls	.L46
 594              		.loc 2 169 0 discriminator 10
 595 0158 40F26C73 		movw	r3, #1900
 596 015c 9842     		cmp	r0, r3
 597 015e 38BF     		it	cc
 598 0160 0346     		movcc	r3, r0
 599 0162 9BB2     		uxth	r3, r3
 600 0164 01E0     		b	.L35
 601              	.L46:
 602              		.loc 2 169 0
 603 0166 40F24C43 		movw	r3, #1100
 604              	.L35:
 605              		.loc 2 169 0 discriminator 12
 606 016a 574A     		ldr	r2, .L57+96
 607 016c 28B2     		sxth	r0, r5
 608              	.LVL34:
 609 016e 9380     		strh	r3, [r2, #4]	@ movhi
 610 0170 564A     		ldr	r2, .L57+100
 611 0172 9360     		str	r3, [r2, #8]
 612 0174 FFF7FEFF 		bl	__aeabi_i2d
 613 0178 0446     		mov	r4, r0
 614 017a 30B2     		sxth	r0, r6
 615 017c 0D46     		mov	r5, r1
 616 017e FFF7FEFF 		bl	__aeabi_i2d
 617 0182 3FA3     		adr	r3, .L57+24
 618 0184 D3E90023 		ldrd	r2, [r3]
 619 0188 FFF7FEFF 		bl	__aeabi_dmul
 620 018c 0246     		mov	r2, r0
 621 018e 0B46     		mov	r3, r1
 622 0190 2046     		mov	r0, r4
 623 0192 2946     		mov	r1, r5
 624 0194 FFF7FEFF 		bl	__aeabi_dadd
 625 0198 FFF7FEFF 		bl	__aeabi_d2f
 626 019c 0746     		mov	r7, r0
 627              	.LVL35:
 628 019e FFF7FEFF 		bl	__aeabi_f2d
 629              	.LVL36:
 630 01a2 0446     		mov	r4, r0
 631 01a4 0D46     		mov	r5, r1
 632 01a6 3846     		mov	r0, r7
 633 01a8 0021     		movs	r1, #0
 634 01aa FFF7FEFF 		bl	__aeabi_fcmpgt
 635 01ae 18B1     		cbz	r0, .L56
 636              		.loc 2 169 0
 637 01b0 35A3     		adr	r3, .L57+32
 638 01b2 D3E90023 		ldrd	r2, [r3]
 639 01b6 02E0     		b	.L36
 640              	.L56:
 641 01b8 35A3     		adr	r3, .L57+40
 642 01ba D3E90023 		ldrd	r2, [r3]
 643              	.L36:
 644              	.LVL37:
 645              		.loc 2 169 0 discriminator 15
 646 01be 2046     		mov	r0, r4
 647 01c0 2946     		mov	r1, r5
 648 01c2 FFF7FEFF 		bl	__aeabi_dmul
 649              	.LVL38:
 650 01c6 FFF7FEFF 		bl	__aeabi_d2f
 651 01ca FFF7FEFF 		bl	__aeabi_f2iz
 652 01ce 40F2B533 		movw	r3, #949
 653 01d2 00F5B460 		add	r0, r0, #1440
 654              	.LVL39:
 655 01d6 9842     		cmp	r0, r3
 656 01d8 06D9     		bls	.L48
 657              		.loc 2 169 0 discriminator 16
 658 01da 40F60203 		movw	r3, #2050
 659 01de 9842     		cmp	r0, r3
 660 01e0 38BF     		it	cc
 661 01e2 0346     		movcc	r3, r0
 662 01e4 9BB2     		uxth	r3, r3
 663 01e6 01E0     		b	.L38
 664              	.L48:
 665              		.loc 2 169 0
 666 01e8 40F2B633 		movw	r3, #950
 667              	.L38:
 668              		.loc 2 169 0 discriminator 18
 669 01ec 364D     		ldr	r5, .L57+96
 670 01ee 374C     		ldr	r4, .L57+100
 671 01f0 EB80     		strh	r3, [r5, #6]	@ movhi
 672 01f2 E360     		str	r3, [r4, #12]
 673              	.LVL40:
 674 01f4 30B2     		sxth	r0, r6
 675              	.LVL41:
 676 01f6 FFF7FEFF 		bl	__aeabi_i2f
 677 01fa FFF7FEFF 		bl	__aeabi_f2d
 678 01fe 26A3     		adr	r3, .L57+48
 679 0200 D3E90023 		ldrd	r2, [r3]
 680 0204 FFF7FEFF 		bl	__aeabi_dmul
 681              	.LVL42:
 682 0208 FFF7FEFF 		bl	__aeabi_d2f
 683 020c FFF7FEFF 		bl	__aeabi_f2iz
 684 0210 40F2E733 		movw	r3, #999
 685 0214 00F2DC50 		addw	r0, r0, #1500
 686              	.LVL43:
 687 0218 9842     		cmp	r0, r3
 688 021a 1A46     		mov	r2, r3
 689 021c 07D9     		bls	.L49
 690              		.loc 2 169 0 discriminator 19
 691 021e B0F5FA6F 		cmp	r0, #2000
 692 0222 34BF     		ite	cc
 693 0224 0346     		movcc	r3, r0
 694 0226 4FF4FA63 		movcs	r3, #2000
 695 022a 9BB2     		uxth	r3, r3
 696 022c 01E0     		b	.L39
 697              	.L49:
 698              		.loc 2 169 0
 699 022e 4FF47A73 		mov	r3, #1000
 700              	.L39:
 701              		.loc 2 169 0 discriminator 21
 702 0232 9042     		cmp	r0, r2
 703 0234 6B81     		strh	r3, [r5, #10]	@ movhi
 704 0236 6361     		str	r3, [r4, #20]
 705 0238 06D9     		bls	.L50
 706              		.loc 2 169 0 discriminator 22
 707 023a B0F5FA6F 		cmp	r0, #2000
 708 023e 28BF     		it	cs
 709 0240 4FF4FA60 		movcs	r0, #2000
 710              	.LVL44:
 711 0244 80B2     		uxth	r0, r0
 712 0246 01E0     		b	.L40
 713              	.LVL45:
 714              	.L50:
 715              		.loc 2 169 0
 716 0248 4FF47A70 		mov	r0, #1000
 717              	.LVL46:
 718              	.L40:
 719              		.loc 2 169 0 discriminator 24
 720 024c 1E4B     		ldr	r3, .L57+96
 721 024e 1881     		strh	r0, [r3, #8]	@ movhi
 722 0250 1E4B     		ldr	r3, .L57+100
 723 0252 1861     		str	r0, [r3, #16]
 724 0254 FFF7FEFF 		bl	actuators_pwm_commit
 725              	.LBE47:
 170:firmwares/fixedwing/main_fbw.c ****     fbw_new_actuators = 0;
 726              		.loc 2 170 0 is_stmt 1 discriminator 24
 727 0258 1A4B     		ldr	r3, .L57+92
 728 025a 0022     		movs	r2, #0
 729 025c 1A70     		strb	r2, [r3, #0]
 730              	.LVL47:
 731              	.L23:
 732 025e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 733              	.L58:
 734 0262 00BFAFF3 		.align	3
 734      0080
 735              	.L57:
 736 0268 F34B5555 		.word	1431653363
 737 026c 5555B53F 		.word	1068848469
 738 0270 4C9B8888 		.word	2290654028
 739 0274 8888A43F 		.word	1067747464
 740 0278 E6342222 		.word	572667110
 741 027c 2222A63F 		.word	1067852322
 742 0280 33333333 		.word	858993459
 743 0284 3333D33F 		.word	1070805811
 744 0288 A64D4444 		.word	1145327014
 745 028c 4444B03F 		.word	1068516420
 746 0290 E6342222 		.word	572667110
 747 0294 2222AA3F 		.word	1068114466
 748 0298 E797AAAA 		.word	2863306727
 749 029c AAAAAA3F 		.word	1068149418
 750 02a0 00000000 		.word	handle_rc_frame
 751 02a4 00000000 		.word	inter_mcu_received_ap
 752 02a8 00000000 		.word	time_since_last_ap
 753 02ac 00000000 		.word	ap_ok
 754 02b0 00000000 		.word	command_roll_trim
 755 02b4 00000000 		.word	ap_state
 756 02b8 00000000 		.word	command_pitch_trim
 757 02bc 00000000 		.word	.LANCHOR0
 758 02c0 00000000 		.word	commands
 759 02c4 00000000 		.word	.LANCHOR1
 760 02c8 00000000 		.word	actuators
 761 02cc 00000000 		.word	actuators_pwm_values
 762              	.LBE44:
 763              		.cfi_endproc
 764              	.LFE41:
 766              		.section	.text.periodic_task_fbw,"ax",%progbits
 767              		.align	1
 768              		.global	periodic_task_fbw
 769              		.thumb
 770              		.thumb_func
 772              	periodic_task_fbw:
 773              	.LFB42:
 171:firmwares/fixedwing/main_fbw.c ****   }
 172:firmwares/fixedwing/main_fbw.c **** #endif
 173:firmwares/fixedwing/main_fbw.c **** 
 174:firmwares/fixedwing/main_fbw.c **** 
 175:firmwares/fixedwing/main_fbw.c **** #ifdef MCU_SPI_LINK
 176:firmwares/fixedwing/main_fbw.c ****   if (link_mcu_received) {
 177:firmwares/fixedwing/main_fbw.c ****     link_mcu_received = FALSE;
 178:firmwares/fixedwing/main_fbw.c ****     inter_mcu_fill_fbw_state(); /** Prepares the next message for AP */
 179:firmwares/fixedwing/main_fbw.c ****     link_mcu_restart(); /** Prepares the next SPI communication */
 180:firmwares/fixedwing/main_fbw.c ****   }
 181:firmwares/fixedwing/main_fbw.c **** #endif /* MCU_SPI_LINK */
 182:firmwares/fixedwing/main_fbw.c **** #endif /* INTER_MCU */
 183:firmwares/fixedwing/main_fbw.c **** 
 184:firmwares/fixedwing/main_fbw.c **** }
 185:firmwares/fixedwing/main_fbw.c **** 
 186:firmwares/fixedwing/main_fbw.c **** 
 187:firmwares/fixedwing/main_fbw.c **** /************* PERIODIC ******************************************************/
 188:firmwares/fixedwing/main_fbw.c **** void periodic_task_fbw( void ) {
 774              		.loc 2 188 0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 0
 777              		@ frame_needed = 0, uses_anonymous_args = 0
 778 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 779              	.LCFI3:
 780              		.cfi_def_cfa_offset 24
 781              		.cfi_offset 14, -4
 782              		.cfi_offset 8, -8
 783              		.cfi_offset 7, -12
 784              		.cfi_offset 6, -16
 785              		.cfi_offset 5, -20
 786              		.cfi_offset 4, -24
 787              	.LBB97:
 788              	.LBB98:
  74:./subsystems/radio_control.h **** }
  75:./subsystems/radio_control.h **** 
  76:./subsystems/radio_control.h **** /************* PERIODIC ******************************************************/
  77:./subsystems/radio_control.h **** static inline void radio_control_periodic_task ( void ) {
  78:./subsystems/radio_control.h ****   static uint8_t _1Hz;
  79:./subsystems/radio_control.h ****   _1Hz++;
 789              		.loc 3 79 0
 790 0004 7B4A     		ldr	r2, .L101
 791 0006 1378     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 792 0008 0133     		adds	r3, r3, #1
 793 000a DBB2     		uxtb	r3, r3
  80:./subsystems/radio_control.h **** 
  81:./subsystems/radio_control.h ****   if (_1Hz >= 60) {
 794              		.loc 3 81 0
 795 000c 3B2B     		cmp	r3, #59
  79:./subsystems/radio_control.h ****   _1Hz++;
 796              		.loc 3 79 0
 797 000e 1370     		strb	r3, [r2, #0]
 798 0010 794B     		ldr	r3, .L101+4
 799              		.loc 3 81 0
 800 0012 04D9     		bls	.L60
  82:./subsystems/radio_control.h ****     _1Hz = 0;
 801              		.loc 3 82 0
 802 0014 0021     		movs	r1, #0
 803 0016 1170     		strb	r1, [r2, #0]
  83:./subsystems/radio_control.h ****     radio_control.frame_rate = radio_control.frame_cpt;
 804              		.loc 3 83 0
 805 0018 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
  84:./subsystems/radio_control.h ****     radio_control.frame_cpt = 0;
 806              		.loc 3 84 0
 807 001a 1971     		strb	r1, [r3, #4]
  83:./subsystems/radio_control.h ****     radio_control.frame_rate = radio_control.frame_cpt;
 808              		.loc 3 83 0
 809 001c DA70     		strb	r2, [r3, #3]
 810              	.L60:
  85:./subsystems/radio_control.h ****   }
  86:./subsystems/radio_control.h **** 
  87:./subsystems/radio_control.h ****   if (radio_control.time_since_last_frame >= RC_REALLY_LOST_TIME) {
 811              		.loc 3 87 0
 812 001e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 813 0020 754B     		ldr	r3, .L101+4
 814 0022 3B2A     		cmp	r2, #59
 815 0024 02D9     		bls	.L61
  88:./subsystems/radio_control.h ****     radio_control.status = RC_REALLY_LOST;
 816              		.loc 3 88 0
 817 0026 0222     		movs	r2, #2
 818 0028 1A70     		strb	r2, [r3, #0]
 819 002a 07E0     		b	.L62
 820              	.L61:
  89:./subsystems/radio_control.h ****   } else {
  90:./subsystems/radio_control.h ****     if (radio_control.time_since_last_frame >= RC_LOST_TIME) {
 821              		.loc 3 90 0
 822 002c 1D2A     		cmp	r2, #29
 823 002e 03D9     		bls	.L63
  91:./subsystems/radio_control.h ****       radio_control.status = RC_LOST;
 824              		.loc 3 91 0
 825 0030 0121     		movs	r1, #1
 826 0032 1970     		strb	r1, [r3, #0]
  92:./subsystems/radio_control.h ****       radio_control.radio_ok_cpt = RC_OK_CPT;
 827              		.loc 3 92 0
 828 0034 0F21     		movs	r1, #15
 829 0036 9970     		strb	r1, [r3, #2]
 830              	.L63:
  93:./subsystems/radio_control.h ****     }
  94:./subsystems/radio_control.h ****     radio_control.time_since_last_frame++;
 831              		.loc 3 94 0
 832 0038 0132     		adds	r2, r2, #1
 833 003a 5A70     		strb	r2, [r3, #1]
 834              	.L62:
  95:./subsystems/radio_control.h ****   }
  96:./subsystems/radio_control.h **** 
  97:./subsystems/radio_control.h **** #if defined RADIO_CONTROL_LED
  98:./subsystems/radio_control.h ****   if (radio_control.status == RC_OK) {
 835              		.loc 3 98 0
 836 003c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 837 003e 2021     		movs	r1, #32
 838 0040 6E4B     		ldr	r3, .L101+8
 839 0042 0AB9     		cbnz	r2, .L64
  99:./subsystems/radio_control.h ****     LED_ON(RADIO_CONTROL_LED);
 840              		.loc 3 99 0
 841 0044 5961     		str	r1, [r3, #20]
 842 0046 00E0     		b	.L65
 843              	.L64:
 100:./subsystems/radio_control.h ****   }
 101:./subsystems/radio_control.h ****   else {
 102:./subsystems/radio_control.h ****     LED_OFF(RADIO_CONTROL_LED);
 844              		.loc 3 102 0
 845 0048 1961     		str	r1, [r3, #16]
 846              	.L65:
 847              	.LBE98:
 848              	.LBE97:
 189:firmwares/fixedwing/main_fbw.c **** 
 190:firmwares/fixedwing/main_fbw.c **** #ifdef RADIO_CONTROL
 191:firmwares/fixedwing/main_fbw.c ****   radio_control_periodic_task();
 192:firmwares/fixedwing/main_fbw.c ****   if (fbw_mode == FBW_MODE_MANUAL && radio_control.status == RC_REALLY_LOST) {
 849              		.loc 2 192 0
 850 004a 6D4B     		ldr	r3, .L101+12
 851 004c 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 852 004e 19B9     		cbnz	r1, .L66
 853              		.loc 2 192 0 is_stmt 0 discriminator 1
 854 0050 022A     		cmp	r2, #2
 855 0052 01D1     		bne	.L66
 193:firmwares/fixedwing/main_fbw.c ****     fbw_mode = FBW_MODE_AUTO;
 856              		.loc 2 193 0 is_stmt 1
 857 0054 0122     		movs	r2, #1
 858 0056 1A70     		strb	r2, [r3, #0]
 859              	.L66:
 860              	.LBB99:
 861              	.LBB100:
 135:./inter_mcu.h **** }
 136:./inter_mcu.h **** 
 137:./inter_mcu.h **** /** Monitors AP. Set ::ap_ok to false if AP is down for a long time. */
 138:./inter_mcu.h **** static inline void inter_mcu_periodic_task(void) {
 139:./inter_mcu.h ****   if (time_since_last_ap >= AP_STALLED_TIME) {
 862              		.loc 1 139 0
 863 0058 6A4B     		ldr	r3, .L101+16
 864 005a 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 865 005c 1D2A     		cmp	r2, #29
 866 005e 05D9     		bls	.L67
 140:./inter_mcu.h ****     ap_ok = FALSE;
 867              		.loc 1 140 0
 868 0060 694B     		ldr	r3, .L101+20
 869 0062 0022     		movs	r2, #0
 870 0064 1A70     		strb	r2, [r3, #0]
 141:./inter_mcu.h **** #ifdef SINGLE_MCU
 142:./inter_mcu.h ****     // Keep filling the buffer even if no AP commands are received
 143:./inter_mcu.h ****     inter_mcu_fill_fbw_state();
 871              		.loc 1 143 0
 872 0066 FFF7FEFF 		bl	inter_mcu_fill_fbw_state
 873 006a 01E0     		b	.L68
 874              	.L67:
 144:./inter_mcu.h **** #endif
 145:./inter_mcu.h **** 
 146:./inter_mcu.h ****   } else
 147:./inter_mcu.h ****     time_since_last_ap++;
 875              		.loc 1 147 0
 876 006c 0132     		adds	r2, r2, #1
 877 006e 1A70     		strb	r2, [r3, #0]
 878              	.L68:
 879              	.LBE100:
 880              	.LBE99:
 194:firmwares/fixedwing/main_fbw.c ****   }
 195:firmwares/fixedwing/main_fbw.c **** #endif
 196:firmwares/fixedwing/main_fbw.c **** 
 197:firmwares/fixedwing/main_fbw.c **** #ifdef INTER_MCU
 198:firmwares/fixedwing/main_fbw.c ****   inter_mcu_periodic_task();
 199:firmwares/fixedwing/main_fbw.c ****   if (fbw_mode == FBW_MODE_AUTO && !ap_ok)
 881              		.loc 2 199 0
 882 0070 634B     		ldr	r3, .L101+12
 883 0072 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 884 0074 0129     		cmp	r1, #1
 885 0076 10D1     		bne	.L69
 886              		.loc 2 199 0 is_stmt 0 discriminator 1
 887 0078 634A     		ldr	r2, .L101+20
 888 007a 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 889 007c 6AB9     		cbnz	r2, .L69
 890              	.LBB101:
 891              	.LBB102:
  98:firmwares/fixedwing/main_fbw.c ****   fbw_mode = FBW_MODE_FAILSAFE;
 892              		.loc 2 98 0 is_stmt 1
 893 007e 0222     		movs	r2, #2
 894 0080 1A70     		strb	r2, [r3, #0]
 895              	.LVL48:
 896              	.LBB103:
  99:firmwares/fixedwing/main_fbw.c ****   SetCommands(commands_failsafe);
 897              		.loc 2 99 0
 898 0082 624A     		ldr	r2, .L101+24
 899 0084 624B     		ldr	r3, .L101+28
 900 0086 1088     		ldrh	r0, [r2, #0]
 901 0088 1880     		strh	r0, [r3, #0]	@ movhi
 902              	.LVL49:
 903 008a 5088     		ldrh	r0, [r2, #2]
 904 008c 5880     		strh	r0, [r3, #2]	@ movhi
 905              	.LVL50:
 906 008e 9088     		ldrh	r0, [r2, #4]
 907 0090 D288     		ldrh	r2, [r2, #6]
 908 0092 9880     		strh	r0, [r3, #4]	@ movhi
 909              	.LVL51:
 910 0094 DA80     		strh	r2, [r3, #6]	@ movhi
 911              	.LVL52:
 912              	.LBE103:
 100:firmwares/fixedwing/main_fbw.c ****   fbw_new_actuators = 1;
 913              		.loc 2 100 0
 914 0096 5F4B     		ldr	r3, .L101+32
 915 0098 1970     		strb	r1, [r3, #0]
 916              	.LVL53:
 917              	.L69:
 918              	.LBE102:
 919              	.LBE101:
 920              	.LBB104:
 921              	.LBB105:
 922              		.file 4 "firmwares/fixedwing/fbw_downlink.h"
   1:firmwares/fixedwing/fbw_downlink.h **** /*
   2:firmwares/fixedwing/fbw_downlink.h ****  * Paparazzi $Id$
   3:firmwares/fixedwing/fbw_downlink.h ****  *
   4:firmwares/fixedwing/fbw_downlink.h ****  * Copyright (C) 2006- Pascal Brisset, Antoine Drouin
   5:firmwares/fixedwing/fbw_downlink.h ****  *
   6:firmwares/fixedwing/fbw_downlink.h ****  * This file is part of paparazzi.
   7:firmwares/fixedwing/fbw_downlink.h ****  *
   8:firmwares/fixedwing/fbw_downlink.h ****  * paparazzi is free software; you can redistribute it and/or modify
   9:firmwares/fixedwing/fbw_downlink.h ****  * it under the terms of the GNU General Public License as published by
  10:firmwares/fixedwing/fbw_downlink.h ****  * the Free Software Foundation; either version 2, or (at your option)
  11:firmwares/fixedwing/fbw_downlink.h ****  * any later version.
  12:firmwares/fixedwing/fbw_downlink.h ****  *
  13:firmwares/fixedwing/fbw_downlink.h ****  * paparazzi is distributed in the hope that it will be useful,
  14:firmwares/fixedwing/fbw_downlink.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:firmwares/fixedwing/fbw_downlink.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:firmwares/fixedwing/fbw_downlink.h ****  * GNU General Public License for more details.
  17:firmwares/fixedwing/fbw_downlink.h ****  *
  18:firmwares/fixedwing/fbw_downlink.h ****  * You should have received a copy of the GNU General Public License
  19:firmwares/fixedwing/fbw_downlink.h ****  * along with paparazzi; see the file COPYING.  If not, write to
  20:firmwares/fixedwing/fbw_downlink.h ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  21:firmwares/fixedwing/fbw_downlink.h ****  * Boston, MA 02111-1307, USA.
  22:firmwares/fixedwing/fbw_downlink.h ****  *
  23:firmwares/fixedwing/fbw_downlink.h ****  */
  24:firmwares/fixedwing/fbw_downlink.h **** 
  25:firmwares/fixedwing/fbw_downlink.h **** /** \file fbw_downlink.h
  26:firmwares/fixedwing/fbw_downlink.h ****  *  \brief Set of macros defining the periodic telemetry messages of FBW process
  27:firmwares/fixedwing/fbw_downlink.h ****  *
  28:firmwares/fixedwing/fbw_downlink.h ****  * The PeriodicSendAp() macro is generated from the telemetry description
  29:firmwares/fixedwing/fbw_downlink.h ****  * (named in conf.xml, usually in conf/telemetry directory). This macro
  30:firmwares/fixedwing/fbw_downlink.h ****  * is a sequence of calls to PERIODIC_SEND_message() which have to be defined
  31:firmwares/fixedwing/fbw_downlink.h ****  * in the present file.
  32:firmwares/fixedwing/fbw_downlink.h ****  *
  33:firmwares/fixedwing/fbw_downlink.h ****  */
  34:firmwares/fixedwing/fbw_downlink.h **** 
  35:firmwares/fixedwing/fbw_downlink.h **** #ifndef FBW_DOWNLINK_H
  36:firmwares/fixedwing/fbw_downlink.h **** #define FBW_DOWNLINK_H
  37:firmwares/fixedwing/fbw_downlink.h **** 
  38:firmwares/fixedwing/fbw_downlink.h **** #include <inttypes.h>
  39:firmwares/fixedwing/fbw_downlink.h **** #include "messages.h"
  40:firmwares/fixedwing/fbw_downlink.h **** #include "generated/periodic_telemetry.h"
  41:firmwares/fixedwing/fbw_downlink.h **** #include "generated/airframe.h"
  42:firmwares/fixedwing/fbw_downlink.h **** #include "commands.h"
  43:firmwares/fixedwing/fbw_downlink.h **** #include "actuators.h"
  44:firmwares/fixedwing/fbw_downlink.h **** 
  45:firmwares/fixedwing/fbw_downlink.h **** #include "mcu_periph/uart.h"
  46:firmwares/fixedwing/fbw_downlink.h **** #include "firmwares/fixedwing/main_fbw.h"
  47:firmwares/fixedwing/fbw_downlink.h **** #include "subsystems/radio_control.h"
  48:firmwares/fixedwing/fbw_downlink.h **** #include "subsystems/electrical.h"
  49:firmwares/fixedwing/fbw_downlink.h **** #include "inter_mcu.h"
  50:firmwares/fixedwing/fbw_downlink.h **** 
  51:firmwares/fixedwing/fbw_downlink.h **** #ifndef DOWNLINK_DEVICE
  52:firmwares/fixedwing/fbw_downlink.h **** #define DOWNLINK_DEVICE DOWNLINK_FBW_DEVICE
  53:firmwares/fixedwing/fbw_downlink.h **** #endif
  54:firmwares/fixedwing/fbw_downlink.h **** #include "subsystems/datalink/downlink.h"
  55:firmwares/fixedwing/fbw_downlink.h **** 
  56:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_COMMANDS(_trans, _dev) DOWNLINK_SEND_COMMANDS(_trans, _dev, COMMANDS_NB, comm
  57:firmwares/fixedwing/fbw_downlink.h **** 
  58:firmwares/fixedwing/fbw_downlink.h **** #ifdef RADIO_CONTROL
  59:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_FBW_STATUS(_trans, _dev) DOWNLINK_SEND_FBW_STATUS(_trans, _dev, &(radio_contr
  60:firmwares/fixedwing/fbw_downlink.h **** #ifdef RADIO_CONTROL_TYPE_PPM
  61:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_PPM(_trans, _dev) {                           \
  62:firmwares/fixedwing/fbw_downlink.h ****   uint16_t ppm_pulses_usec[RADIO_CONTROL_NB_CHANNEL];        \
  63:firmwares/fixedwing/fbw_downlink.h ****   for (int i=0;i<RADIO_CONTROL_NB_CHANNEL;i++)               \
  64:firmwares/fixedwing/fbw_downlink.h ****     ppm_pulses_usec[i] = USEC_OF_RC_PPM_TICKS(ppm_pulses[i]); \
  65:firmwares/fixedwing/fbw_downlink.h ****   DOWNLINK_SEND_PPM(_trans, _dev,                            \
  66:firmwares/fixedwing/fbw_downlink.h ****                     &radio_control.frame_rate,               \
  67:firmwares/fixedwing/fbw_downlink.h ****                     PPM_NB_CHANNEL,                          \
  68:firmwares/fixedwing/fbw_downlink.h ****                     ppm_pulses_usec);                        \
  69:firmwares/fixedwing/fbw_downlink.h **** }
  70:firmwares/fixedwing/fbw_downlink.h **** #else
  71:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_PPM(_trans, _dev) {}
  72:firmwares/fixedwing/fbw_downlink.h **** #endif
  73:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_RC(_trans, _dev) DOWNLINK_SEND_RC(_trans, _dev, RADIO_CONTROL_NB_CHANNEL, rad
  74:firmwares/fixedwing/fbw_downlink.h **** #else // RADIO_CONTROL
  75:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_FBW_STATUS(_trans, _dev) { uint8_t dummy = 0; DOWNLINK_SEND_FBW_STATUS(_trans
  76:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_PPM(_trans, _dev) {}
  77:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_RC(_trans, _dev) {}
  78:firmwares/fixedwing/fbw_downlink.h **** #endif // RADIO_CONTROL
  79:firmwares/fixedwing/fbw_downlink.h **** 
  80:firmwares/fixedwing/fbw_downlink.h **** #ifdef ACTUATORS
  81:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_ACTUATORS(_trans, _dev) DOWNLINK_SEND_ACTUATORS(_trans, _dev, SERVOS_NB, actu
  82:firmwares/fixedwing/fbw_downlink.h **** #else
  83:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_ACTUATORS(_trans, _dev) {}
  84:firmwares/fixedwing/fbw_downlink.h **** #endif
  85:firmwares/fixedwing/fbw_downlink.h **** 
  86:firmwares/fixedwing/fbw_downlink.h **** #ifdef BRICOLAGE_ADC
  87:firmwares/fixedwing/fbw_downlink.h **** extern uint16_t adc0_val[];
  88:firmwares/fixedwing/fbw_downlink.h **** 
  89:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_ADC(_trans, _dev) {			\
  90:firmwares/fixedwing/fbw_downlink.h ****     static const uint8_t mcu = 0;			\
  91:firmwares/fixedwing/fbw_downlink.h ****     DOWNLINK_SEND_ADC(_trans, _dev, &mcu, 8, adc0_val);	\
  92:firmwares/fixedwing/fbw_downlink.h ****   }
  93:firmwares/fixedwing/fbw_downlink.h **** #else
  94:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_ADC(_trans, _dev) {}
  95:firmwares/fixedwing/fbw_downlink.h **** #endif
  96:firmwares/fixedwing/fbw_downlink.h **** 
  97:firmwares/fixedwing/fbw_downlink.h **** static inline void fbw_downlink_periodic_task(void) {
  98:firmwares/fixedwing/fbw_downlink.h ****   PeriodicSendFbw(DefaultChannel,DefaultDevice)
 923              		.loc 4 98 0
 924 009a 5F4B     		ldr	r3, .L101+36
 925 009c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 926 009e 002A     		cmp	r2, #0
 927 00a0 40F08F81 		bne	.L70
 928              	.LBB106:
 929 00a4 5D4B     		ldr	r3, .L101+40
 930 00a6 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 931 00a8 0131     		adds	r1, r1, #1
 932 00aa C9B2     		uxtb	r1, r1
 933 00ac 7729     		cmp	r1, #119
 934 00ae 1970     		strb	r1, [r3, #0]
 935 00b0 88BF     		it	hi
 936 00b2 1A70     		strbhi	r2, [r3, #0]
 937 00b4 5A4B     		ldr	r3, .L101+44
 938 00b6 1A88     		ldrh	r2, [r3, #0]
 939 00b8 0132     		adds	r2, r2, #1
 940 00ba 92B2     		uxth	r2, r2
 941 00bc B2F5967F 		cmp	r2, #300
 942 00c0 1A80     		strh	r2, [r3, #0]	@ movhi
 943 00c2 01D3     		bcc	.L72
 944 00c4 0022     		movs	r2, #0
 945 00c6 1A80     		strh	r2, [r3, #0]	@ movhi
 946              	.L72:
 947 00c8 544B     		ldr	r3, .L101+40
 948 00ca 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 949 00cc 002B     		cmp	r3, #0
 950 00ce 40F0B980 		bne	.L73
 951 00d2 5448     		ldr	r0, .L101+48
 952 00d4 0E21     		movs	r1, #14
 953 00d6 FFF7FEFF 		bl	uart_check_free_space
 954 00da 0028     		cmp	r0, #0
 955 00dc 00F0AE80 		beq	.L74
 956 00e0 514B     		ldr	r3, .L101+52
 957              	.LBB107:
 958 00e2 9921     		movs	r1, #153
 959              	.LBE107:
 960 00e4 1A88     		ldrh	r2, [r3, #0]
 961              	.LBB108:
 962 00e6 4F48     		ldr	r0, .L101+48
 963              	.LBE108:
 964 00e8 0E32     		adds	r2, r2, #14
 965 00ea 1A80     		strh	r2, [r3, #0]	@ movhi
 966 00ec 4F4B     		ldr	r3, .L101+56
 967 00ee 504D     		ldr	r5, .L101+60
 968 00f0 1A88     		ldrh	r2, [r3, #0]
 969 00f2 504C     		ldr	r4, .L101+64
 970 00f4 0132     		adds	r2, r2, #1
 971 00f6 1A80     		strh	r2, [r3, #0]	@ movhi
 972              	.LBB109:
 973 00f8 FFF7FEFF 		bl	uart_transmit
 974              	.LVL54:
 975 00fc 0E21     		movs	r1, #14
 976 00fe 4948     		ldr	r0, .L101+48
 977 0100 FFF7FEFF 		bl	uart_transmit
 978              	.LBE109:
 979 0104 0F23     		movs	r3, #15
 980 0106 2B70     		strb	r3, [r5, #0]
 981 0108 0121     		movs	r1, #1
 982 010a 1D23     		movs	r3, #29
 983 010c 4548     		ldr	r0, .L101+48
 984 010e 2370     		strb	r3, [r4, #0]
 985 0110 FFF7FEFF 		bl	uart_transmit
 986 0114 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 987 0116 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 988 0118 6733     		adds	r3, r3, #103
 989              	.LBB110:
 990 011a 374E     		ldr	r6, .L101+4
 991              	.LBE110:
 992 011c DBB2     		uxtb	r3, r3
 993 011e 2B70     		strb	r3, [r5, #0]
 994 0120 6721     		movs	r1, #103
 995 0122 9B18     		adds	r3, r3, r2
 996 0124 3F48     		ldr	r0, .L101+48
 997 0126 2370     		strb	r3, [r4, #0]
 998 0128 FFF7FEFF 		bl	uart_transmit
 999              	.LBB111:
 1000 012c 3178     		ldrb	r1, [r6, #0]	@ zero_extendqisi2
 1001              	.LVL55:
 1002 012e 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1003 0130 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1004 0132 CB18     		adds	r3, r1, r3
 1005 0134 DBB2     		uxtb	r3, r3
 1006              	.LVL56:
 1007 0136 2B70     		strb	r3, [r5, #0]
 1008 0138 3A48     		ldr	r0, .L101+48
 1009 013a 9B18     		adds	r3, r3, r2
 1010              	.LVL57:
 1011 013c 2370     		strb	r3, [r4, #0]
 1012 013e FFF7FEFF 		bl	uart_transmit
 1013              	.LVL58:
 1014              	.LBE111:
 1015              	.LBB112:
 1016 0142 F178     		ldrb	r1, [r6, #3]	@ zero_extendqisi2
 1017              	.LVL59:
 1018 0144 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1019 0146 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1020 0148 CB18     		adds	r3, r1, r3
 1021 014a DBB2     		uxtb	r3, r3
 1022              	.LVL60:
 1023 014c 2B70     		strb	r3, [r5, #0]
 1024 014e 3548     		ldr	r0, .L101+48
 1025 0150 9B18     		adds	r3, r3, r2
 1026              	.LVL61:
 1027 0152 2370     		strb	r3, [r4, #0]
 1028 0154 FFF7FEFF 		bl	uart_transmit
 1029              	.LVL62:
 1030              	.LBE112:
 1031              	.LBB113:
 1032 0158 294B     		ldr	r3, .L101+12
 1033 015a 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1034 015c 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1035              	.LVL63:
 1036 015e 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1037              	.LBE113:
 1038              	.LBB114:
 1039 0160 354E     		ldr	r6, .L101+68
 1040              	.LBE114:
 1041              	.LBB115:
 1042 0162 CB18     		adds	r3, r1, r3
 1043 0164 DBB2     		uxtb	r3, r3
 1044              	.LVL64:
 1045 0166 2B70     		strb	r3, [r5, #0]
 1046 0168 2E48     		ldr	r0, .L101+48
 1047 016a 9B18     		adds	r3, r3, r2
 1048              	.LVL65:
 1049 016c 2370     		strb	r3, [r4, #0]
 1050 016e FFF7FEFF 		bl	uart_transmit
 1051              	.LVL66:
 1052              	.LBE115:
 1053              	.LBB116:
 1054 0172 3178     		ldrb	r1, [r6, #0]	@ zero_extendqisi2
 1055              	.LVL67:
 1056 0174 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1057 0176 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1058 0178 CB18     		adds	r3, r1, r3
 1059 017a DBB2     		uxtb	r3, r3
 1060              	.LVL68:
 1061 017c 2B70     		strb	r3, [r5, #0]
 1062 017e 2948     		ldr	r0, .L101+48
 1063 0180 9B18     		adds	r3, r3, r2
 1064              	.LVL69:
 1065 0182 2370     		strb	r3, [r4, #0]
 1066 0184 FFF7FEFF 		bl	uart_transmit
 1067              	.LVL70:
 1068              	.LBE116:
 1069              	.LBB117:
 1070 0188 3179     		ldrb	r1, [r6, #4]	@ zero_extendqisi2
 1071              	.LVL71:
 1072 018a 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1073 018c 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1074 018e CB18     		adds	r3, r1, r3
 1075 0190 DBB2     		uxtb	r3, r3
 1076              	.LVL72:
 1077 0192 2B70     		strb	r3, [r5, #0]
 1078 0194 2348     		ldr	r0, .L101+48
 1079 0196 9B18     		adds	r3, r3, r2
 1080              	.LVL73:
 1081 0198 2370     		strb	r3, [r4, #0]
 1082 019a FFF7FEFF 		bl	uart_transmit
 1083              	.LVL74:
 1084              	.LBE117:
 1085              	.LBB118:
 1086 019e 7179     		ldrb	r1, [r6, #5]	@ zero_extendqisi2
 1087              	.LVL75:
 1088 01a0 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1089 01a2 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1090 01a4 CB18     		adds	r3, r1, r3
 1091 01a6 DBB2     		uxtb	r3, r3
 1092              	.LVL76:
 1093 01a8 2B70     		strb	r3, [r5, #0]
 1094 01aa 1E48     		ldr	r0, .L101+48
 1095 01ac 9B18     		adds	r3, r3, r2
 1096              	.LVL77:
 1097 01ae 2370     		strb	r3, [r4, #0]
 1098 01b0 FFF7FEFF 		bl	uart_transmit
 1099              	.LVL78:
 1100              	.LBE118:
 1101              	.LBB119:
 1102 01b4 B179     		ldrb	r1, [r6, #6]	@ zero_extendqisi2
 1103              	.LVL79:
 1104 01b6 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1105 01b8 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1106 01ba CB18     		adds	r3, r1, r3
 1107 01bc DBB2     		uxtb	r3, r3
 1108              	.LVL80:
 1109 01be 2B70     		strb	r3, [r5, #0]
 1110 01c0 1848     		ldr	r0, .L101+48
 1111 01c2 9B18     		adds	r3, r3, r2
 1112              	.LVL81:
 1113 01c4 2370     		strb	r3, [r4, #0]
 1114 01c6 FFF7FEFF 		bl	uart_transmit
 1115              	.LVL82:
 1116              	.LBE119:
 1117              	.LBB120:
 1118 01ca F179     		ldrb	r1, [r6, #7]	@ zero_extendqisi2
 1119              	.LVL83:
 1120 01cc 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1121 01ce 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1122 01d0 CB18     		adds	r3, r1, r3
 1123 01d2 DBB2     		uxtb	r3, r3
 1124              	.LVL84:
 1125 01d4 2B70     		strb	r3, [r5, #0]
 1126 01d6 1348     		ldr	r0, .L101+48
 1127 01d8 9B18     		adds	r3, r3, r2
 1128              	.LVL85:
 1129 01da 2370     		strb	r3, [r4, #0]
 1130 01dc FFF7FEFF 		bl	uart_transmit
 1131              	.LVL86:
 1132              	.LBE120:
 1133 01e0 2978     		ldrb	r1, [r5, #0]	@ zero_extendqisi2
 1134 01e2 1048     		ldr	r0, .L101+48
 1135 01e4 FFF7FEFF 		bl	uart_transmit
 1136 01e8 0E48     		ldr	r0, .L101+48
 1137 01ea 2178     		ldrb	r1, [r4, #0]	@ zero_extendqisi2
 1138 01ec FFF7FEFF 		bl	uart_transmit
 1139 01f0 28E0     		b	.L73
 1140              	.L102:
 1141 01f2 00BF     		.align	2
 1142              	.L101:
 1143 01f4 00000000 		.word	.LANCHOR4
 1144 01f8 00000000 		.word	radio_control
 1145 01fc 00100140 		.word	1073811456
 1146 0200 00000000 		.word	.LANCHOR0
 1147 0204 00000000 		.word	time_since_last_ap
 1148 0208 00000000 		.word	ap_ok
 1149 020c 00000000 		.word	commands_failsafe
 1150 0210 00000000 		.word	commands
 1151 0214 00000000 		.word	.LANCHOR1
 1152 0218 00000000 		.word	telemetry_mode_Fbw
 1153 021c 00000000 		.word	.LANCHOR5
 1154 0220 00000000 		.word	.LANCHOR6
 1155 0224 00000000 		.word	uart2
 1156 0228 00000000 		.word	downlink_nb_bytes
 1157 022c 00000000 		.word	downlink_nb_msgs
 1158 0230 00000000 		.word	ck_a
 1159 0234 00000000 		.word	ck_b
 1160 0238 00000000 		.word	electrical
 1161              	.LVL87:
 1162              	.L74:
 1163 023c A04B     		ldr	r3, .L103
 1164 023e 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1165 0240 0132     		adds	r2, r2, #1
 1166 0242 1A70     		strb	r2, [r3, #0]
 1167              	.L73:
 1168 0244 9F4B     		ldr	r3, .L103+4
 1169 0246 1B88     		ldrh	r3, [r3, #0]
 1170 0248 062B     		cmp	r3, #6
 1171 024a 55D1     		bne	.L75
 1172 024c 9E48     		ldr	r0, .L103+8
 1173 024e 0F21     		movs	r1, #15
 1174 0250 FFF7FEFF 		bl	uart_check_free_space
 1175 0254 0028     		cmp	r0, #0
 1176 0256 00F0B080 		beq	.L78
 1177 025a 9C4B     		ldr	r3, .L103+12
 1178              	.LBB121:
 1179 025c 9A48     		ldr	r0, .L103+8
 1180              	.LBE121:
 1181 025e 1A88     		ldrh	r2, [r3, #0]
 1182              	.LBB122:
 1183 0260 9921     		movs	r1, #153
 1184              	.LBE122:
 1185 0262 0F32     		adds	r2, r2, #15
 1186 0264 1A80     		strh	r2, [r3, #0]	@ movhi
 1187 0266 9A4B     		ldr	r3, .L103+16
 1188 0268 9A4D     		ldr	r5, .L103+20
 1189 026a 1A88     		ldrh	r2, [r3, #0]
 1190 026c 9A4C     		ldr	r4, .L103+24
 1191 026e 0132     		adds	r2, r2, #1
 1192 0270 1A80     		strh	r2, [r3, #0]	@ movhi
 1193              	.LBB123:
 1194 0272 FFF7FEFF 		bl	uart_transmit
 1195              	.LVL88:
 1196 0276 9448     		ldr	r0, .L103+8
 1197 0278 0F21     		movs	r1, #15
 1198 027a FFF7FEFF 		bl	uart_transmit
 1199              	.LBE123:
 1200 027e 1023     		movs	r3, #16
 1201 0280 2B70     		strb	r3, [r5, #0]
 1202 0282 9148     		ldr	r0, .L103+8
 1203 0284 1F23     		movs	r3, #31
 1204 0286 0121     		movs	r1, #1
 1205 0288 2370     		strb	r3, [r4, #0]
 1206 028a FFF7FEFF 		bl	uart_transmit
 1207 028e 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1208 0290 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1209 0292 6633     		adds	r3, r3, #102
 1210 0294 DBB2     		uxtb	r3, r3
 1211 0296 2B70     		strb	r3, [r5, #0]
 1212 0298 8B48     		ldr	r0, .L103+8
 1213 029a 9B18     		adds	r3, r3, r2
 1214 029c 6621     		movs	r1, #102
 1215 029e 2370     		strb	r3, [r4, #0]
 1216 02a0 FFF7FEFF 		bl	uart_transmit
 1217              	.LBB124:
 1218 02a4 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1219 02a6 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1220 02a8 0433     		adds	r3, r3, #4
 1221 02aa DBB2     		uxtb	r3, r3
 1222 02ac 2B70     		strb	r3, [r5, #0]
 1223 02ae 8648     		ldr	r0, .L103+8
 1224 02b0 9B18     		adds	r3, r3, r2
 1225 02b2 0421     		movs	r1, #4
 1226 02b4 2370     		strb	r3, [r4, #0]
 1227 02b6 FFF7FEFF 		bl	uart_transmit
 1228              	.LVL89:
 1229 02ba 884E     		ldr	r6, .L103+28
 1230 02bc 0027     		movs	r7, #0
 1231              	.LBB125:
 1232 02be B046     		mov	r8, r6
 1233              	.LVL90:
 1234              	.L77:
 1235 02c0 18F81710 		ldrb	r1, [r8, r7, lsl #1]	@ zero_extendqisi2
 1236              	.LVL91:
 1237 02c4 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1238 02c6 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1239 02c8 CB18     		adds	r3, r1, r3
 1240 02ca DBB2     		uxtb	r3, r3
 1241              	.LVL92:
 1242 02cc 2B70     		strb	r3, [r5, #0]
 1243 02ce 7E48     		ldr	r0, .L103+8
 1244 02d0 9B18     		adds	r3, r3, r2
 1245              	.LVL93:
 1246 02d2 2370     		strb	r3, [r4, #0]
 1247 02d4 FFF7FEFF 		bl	uart_transmit
 1248              	.LVL94:
 1249              	.LBE125:
 1250              	.LBB126:
 1251 02d8 7178     		ldrb	r1, [r6, #1]	@ zero_extendqisi2
 1252              	.LVL95:
 1253 02da 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1254 02dc 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1255 02de CB18     		adds	r3, r1, r3
 1256 02e0 DBB2     		uxtb	r3, r3
 1257              	.LVL96:
 1258 02e2 2B70     		strb	r3, [r5, #0]
 1259 02e4 7848     		ldr	r0, .L103+8
 1260 02e6 9B18     		adds	r3, r3, r2
 1261              	.LVL97:
 1262 02e8 0137     		adds	r7, r7, #1
 1263 02ea 2370     		strb	r3, [r4, #0]
 1264 02ec 0236     		adds	r6, r6, #2
 1265 02ee FFF7FEFF 		bl	uart_transmit
 1266              	.LVL98:
 1267              	.LBE126:
 1268 02f2 042F     		cmp	r7, #4
 1269 02f4 E4D1     		bne	.L77
 1270 02f6 55E0     		b	.L99
 1271              	.LVL99:
 1272              	.L75:
 1273              	.LBE124:
 1274 02f8 0C2B     		cmp	r3, #12
 1275 02fa 62D1     		bne	.L70
 1276 02fc 7248     		ldr	r0, .L103+8
 1277 02fe 1321     		movs	r1, #19
 1278 0300 FFF7FEFF 		bl	uart_check_free_space
 1279 0304 0028     		cmp	r0, #0
 1280 0306 58D0     		beq	.L78
 1281 0308 704B     		ldr	r3, .L103+12
 1282              	.LBB127:
 1283 030a 6F48     		ldr	r0, .L103+8
 1284              	.LBE127:
 1285 030c 1A88     		ldrh	r2, [r3, #0]
 1286              	.LBB128:
 1287 030e 9921     		movs	r1, #153
 1288              	.LBE128:
 1289 0310 1332     		adds	r2, r2, #19
 1290 0312 1A80     		strh	r2, [r3, #0]	@ movhi
 1291 0314 6E4B     		ldr	r3, .L103+16
 1292 0316 6F4D     		ldr	r5, .L103+20
 1293 0318 1A88     		ldrh	r2, [r3, #0]
 1294 031a 6F4C     		ldr	r4, .L103+24
 1295 031c 0132     		adds	r2, r2, #1
 1296 031e 1A80     		strh	r2, [r3, #0]	@ movhi
 1297              	.LBB129:
 1298 0320 FFF7FEFF 		bl	uart_transmit
 1299              	.LVL100:
 1300 0324 6848     		ldr	r0, .L103+8
 1301 0326 1321     		movs	r1, #19
 1302 0328 FFF7FEFF 		bl	uart_transmit
 1303              	.LBE129:
 1304 032c 1423     		movs	r3, #20
 1305 032e 2B70     		strb	r3, [r5, #0]
 1306 0330 6548     		ldr	r0, .L103+8
 1307 0332 2723     		movs	r3, #39
 1308 0334 0121     		movs	r1, #1
 1309 0336 2370     		strb	r3, [r4, #0]
 1310 0338 FFF7FEFF 		bl	uart_transmit
 1311 033c 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1312 033e 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1313 0340 6933     		adds	r3, r3, #105
 1314 0342 DBB2     		uxtb	r3, r3
 1315 0344 2B70     		strb	r3, [r5, #0]
 1316 0346 6048     		ldr	r0, .L103+8
 1317 0348 9B18     		adds	r3, r3, r2
 1318 034a 6921     		movs	r1, #105
 1319 034c 2370     		strb	r3, [r4, #0]
 1320 034e FFF7FEFF 		bl	uart_transmit
 1321              	.LBB130:
 1322 0352 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1323 0354 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1324 0356 0633     		adds	r3, r3, #6
 1325 0358 DBB2     		uxtb	r3, r3
 1326 035a 2B70     		strb	r3, [r5, #0]
 1327 035c 5A48     		ldr	r0, .L103+8
 1328 035e 9B18     		adds	r3, r3, r2
 1329 0360 0621     		movs	r1, #6
 1330 0362 2370     		strb	r3, [r4, #0]
 1331 0364 FFF7FEFF 		bl	uart_transmit
 1332              	.LVL101:
 1333 0368 5D4E     		ldr	r6, .L103+32
 1334 036a 0027     		movs	r7, #0
 1335              	.LBB131:
 1336 036c B046     		mov	r8, r6
 1337              	.LVL102:
 1338              	.L79:
 1339 036e 18F81710 		ldrb	r1, [r8, r7, lsl #1]	@ zero_extendqisi2
 1340              	.LVL103:
 1341 0372 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1342 0374 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1343 0376 CB18     		adds	r3, r1, r3
 1344 0378 DBB2     		uxtb	r3, r3
 1345              	.LVL104:
 1346 037a 2B70     		strb	r3, [r5, #0]
 1347 037c 5248     		ldr	r0, .L103+8
 1348 037e 9B18     		adds	r3, r3, r2
 1349              	.LVL105:
 1350 0380 2370     		strb	r3, [r4, #0]
 1351 0382 FFF7FEFF 		bl	uart_transmit
 1352              	.LVL106:
 1353              	.LBE131:
 1354              	.LBB132:
 1355 0386 7178     		ldrb	r1, [r6, #1]	@ zero_extendqisi2
 1356              	.LVL107:
 1357 0388 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1358 038a 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1359 038c CB18     		adds	r3, r1, r3
 1360 038e DBB2     		uxtb	r3, r3
 1361              	.LVL108:
 1362 0390 2B70     		strb	r3, [r5, #0]
 1363 0392 4D48     		ldr	r0, .L103+8
 1364 0394 9B18     		adds	r3, r3, r2
 1365              	.LVL109:
 1366 0396 0137     		adds	r7, r7, #1
 1367 0398 2370     		strb	r3, [r4, #0]
 1368 039a 0236     		adds	r6, r6, #2
 1369 039c FFF7FEFF 		bl	uart_transmit
 1370              	.LVL110:
 1371              	.LBE132:
 1372 03a0 062F     		cmp	r7, #6
 1373 03a2 E4D1     		bne	.L79
 1374              	.LVL111:
 1375              	.L99:
 1376              	.LBE130:
 1377 03a4 4B4B     		ldr	r3, .L103+20
 1378 03a6 4848     		ldr	r0, .L103+8
 1379 03a8 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1380 03aa FFF7FEFF 		bl	uart_transmit
 1381 03ae 4A4B     		ldr	r3, .L103+24
 1382 03b0 4548     		ldr	r0, .L103+8
 1383 03b2 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1384 03b4 FFF7FEFF 		bl	uart_transmit
 1385 03b8 03E0     		b	.L70
 1386              	.L78:
 1387 03ba 414B     		ldr	r3, .L103
 1388 03bc 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1389 03be 0132     		adds	r2, r2, #1
 1390 03c0 1A70     		strb	r2, [r3, #0]
 1391              	.L70:
 1392              	.LBE106:
 1393 03c2 484B     		ldr	r3, .L103+36
 1394 03c4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1395 03c6 012B     		cmp	r3, #1
 1396 03c8 40F01282 		bne	.L59
 1397              	.LBB133:
 1398 03cc 464B     		ldr	r3, .L103+40
 1399 03ce 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1400 03d0 0132     		adds	r2, r2, #1
 1401 03d2 D2B2     		uxtb	r2, r2
 1402 03d4 1D2A     		cmp	r2, #29
 1403 03d6 1A70     		strb	r2, [r3, #0]
 1404 03d8 01D9     		bls	.L81
 1405 03da 0022     		movs	r2, #0
 1406 03dc 1A70     		strb	r2, [r3, #0]
 1407              	.L81:
 1408 03de 434B     		ldr	r3, .L103+44
 1409 03e0 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1410 03e2 0132     		adds	r2, r2, #1
 1411 03e4 D2B2     		uxtb	r2, r2
 1412 03e6 3B2A     		cmp	r2, #59
 1413 03e8 1A70     		strb	r2, [r3, #0]
 1414 03ea 01D9     		bls	.L82
 1415 03ec 0022     		movs	r2, #0
 1416 03ee 1A70     		strb	r2, [r3, #0]
 1417              	.L82:
 1418 03f0 3F4B     		ldr	r3, .L103+48
 1419 03f2 1A88     		ldrh	r2, [r3, #0]
 1420 03f4 0132     		adds	r2, r2, #1
 1421 03f6 92B2     		uxth	r2, r2
 1422 03f8 B2F5967F 		cmp	r2, #300
 1423 03fc 1A80     		strh	r2, [r3, #0]	@ movhi
 1424 03fe 01D3     		bcc	.L83
 1425 0400 0022     		movs	r2, #0
 1426 0402 1A80     		strh	r2, [r3, #0]	@ movhi
 1427              	.L83:
 1428 0404 384B     		ldr	r3, .L103+40
 1429 0406 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1430 0408 002B     		cmp	r3, #0
 1431 040a 00F0DA80 		beq	.L84
 1432 040e 062B     		cmp	r3, #6
 1433 0410 72D1     		bne	.L85
 1434 0412 2D48     		ldr	r0, .L103+8
 1435 0414 1F21     		movs	r1, #31
 1436 0416 FFF7FEFF 		bl	uart_check_free_space
 1437 041a 0028     		cmp	r0, #0
 1438 041c 00F0CD80 		beq	.L88
 1439 0420 2A4B     		ldr	r3, .L103+12
 1440              	.LBB134:
 1441 0422 2948     		ldr	r0, .L103+8
 1442              	.LBE134:
 1443 0424 1A88     		ldrh	r2, [r3, #0]
 1444              	.LBB135:
 1445 0426 9921     		movs	r1, #153
 1446              	.LBE135:
 1447 0428 1F32     		adds	r2, r2, #31
 1448 042a 1A80     		strh	r2, [r3, #0]	@ movhi
 1449 042c 284B     		ldr	r3, .L103+16
 1450 042e 294D     		ldr	r5, .L103+20
 1451 0430 1A88     		ldrh	r2, [r3, #0]
 1452 0432 294C     		ldr	r4, .L103+24
 1453 0434 0132     		adds	r2, r2, #1
 1454 0436 1A80     		strh	r2, [r3, #0]	@ movhi
 1455              	.LBB136:
 1456 0438 FFF7FEFF 		bl	uart_transmit
 1457              	.LVL112:
 1458 043c 2248     		ldr	r0, .L103+8
 1459 043e 1F21     		movs	r1, #31
 1460 0440 FFF7FEFF 		bl	uart_transmit
 1461              	.LBE136:
 1462 0444 2023     		movs	r3, #32
 1463 0446 2B70     		strb	r3, [r5, #0]
 1464 0448 1F48     		ldr	r0, .L103+8
 1465 044a 3F23     		movs	r3, #63
 1466 044c 0121     		movs	r1, #1
 1467 044e 2370     		strb	r3, [r4, #0]
 1468 0450 FFF7FEFF 		bl	uart_transmit
 1469 0454 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1470 0456 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1471 0458 6533     		adds	r3, r3, #101
 1472 045a DBB2     		uxtb	r3, r3
 1473              	.LVL113:
 1474 045c 2B70     		strb	r3, [r5, #0]
 1475 045e 1A48     		ldr	r0, .L103+8
 1476 0460 9B18     		adds	r3, r3, r2
 1477              	.LVL114:
 1478 0462 6521     		movs	r1, #101
 1479 0464 2370     		strb	r3, [r4, #0]
 1480 0466 FFF7FEFF 		bl	uart_transmit
 1481              	.LBB137:
 1482 046a 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1483 046c 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1484 046e 0C33     		adds	r3, r3, #12
 1485 0470 DBB2     		uxtb	r3, r3
 1486              	.LVL115:
 1487 0472 2B70     		strb	r3, [r5, #0]
 1488 0474 1448     		ldr	r0, .L103+8
 1489 0476 9B18     		adds	r3, r3, r2
 1490              	.LVL116:
 1491 0478 0C21     		movs	r1, #12
 1492 047a 2370     		strb	r3, [r4, #0]
 1493 047c FFF7FEFF 		bl	uart_transmit
 1494              	.LVL117:
 1495 0480 1C4E     		ldr	r6, .L103+52
 1496 0482 0027     		movs	r7, #0
 1497              	.LBB138:
 1498 0484 06F10608 		add	r8, r6, #6
 1499              	.LVL118:
 1500              	.L87:
 1501 0488 18F81710 		ldrb	r1, [r8, r7, lsl #1]	@ zero_extendqisi2
 1502              	.LVL119:
 1503 048c 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1504 048e 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1505 0490 CB18     		adds	r3, r1, r3
 1506 0492 DBB2     		uxtb	r3, r3
 1507              	.LVL120:
 1508 0494 2B70     		strb	r3, [r5, #0]
 1509 0496 0C48     		ldr	r0, .L103+8
 1510 0498 9B18     		adds	r3, r3, r2
 1511              	.LVL121:
 1512 049a 2370     		strb	r3, [r4, #0]
 1513 049c FFF7FEFF 		bl	uart_transmit
 1514              	.LVL122:
 1515              	.LBE138:
 1516              	.LBB139:
 1517 04a0 F179     		ldrb	r1, [r6, #7]	@ zero_extendqisi2
 1518              	.LVL123:
 1519 04a2 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1520 04a4 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1521 04a6 CB18     		adds	r3, r1, r3
 1522 04a8 DBB2     		uxtb	r3, r3
 1523              	.LVL124:
 1524 04aa 2B70     		strb	r3, [r5, #0]
 1525 04ac 0648     		ldr	r0, .L103+8
 1526 04ae 9B18     		adds	r3, r3, r2
 1527              	.LVL125:
 1528 04b0 0137     		adds	r7, r7, #1
 1529 04b2 2370     		strb	r3, [r4, #0]
 1530 04b4 0236     		adds	r6, r6, #2
 1531 04b6 FFF7FEFF 		bl	uart_transmit
 1532              	.LVL126:
 1533              	.LBE139:
 1534 04ba 0C2F     		cmp	r7, #12
 1535 04bc E4D1     		bne	.L87
 1536 04be 71E0     		b	.L100
 1537              	.L104:
 1538              		.align	2
 1539              	.L103:
 1540 04c0 00000000 		.word	downlink_nb_ovrn
 1541 04c4 00000000 		.word	.LANCHOR6
 1542 04c8 00000000 		.word	uart2
 1543 04cc 00000000 		.word	downlink_nb_bytes
 1544 04d0 00000000 		.word	downlink_nb_msgs
 1545 04d4 00000000 		.word	ck_a
 1546 04d8 00000000 		.word	ck_b
 1547 04dc 00000000 		.word	commands
 1548 04e0 00000000 		.word	actuators
 1549 04e4 00000000 		.word	telemetry_mode_Fbw
 1550 04e8 00000000 		.word	.LANCHOR7
 1551 04ec 00000000 		.word	.LANCHOR8
 1552 04f0 00000000 		.word	.LANCHOR9
 1553 04f4 00000000 		.word	radio_control
 1554              	.LVL127:
 1555              	.L85:
 1556              	.LBE137:
 1557 04f8 0C2B     		cmp	r3, #12
 1558 04fa 62D1     		bne	.L84
 1559 04fc 7B48     		ldr	r0, .L105
 1560 04fe 0F21     		movs	r1, #15
 1561 0500 FFF7FEFF 		bl	uart_check_free_space
 1562 0504 0028     		cmp	r0, #0
 1563 0506 58D0     		beq	.L88
 1564 0508 794B     		ldr	r3, .L105+4
 1565              	.LBB140:
 1566 050a 7848     		ldr	r0, .L105
 1567              	.LBE140:
 1568 050c 1A88     		ldrh	r2, [r3, #0]
 1569              	.LBB141:
 1570 050e 9921     		movs	r1, #153
 1571              	.LBE141:
 1572 0510 0F32     		adds	r2, r2, #15
 1573 0512 1A80     		strh	r2, [r3, #0]	@ movhi
 1574 0514 774B     		ldr	r3, .L105+8
 1575 0516 784D     		ldr	r5, .L105+12
 1576 0518 1A88     		ldrh	r2, [r3, #0]
 1577 051a 784C     		ldr	r4, .L105+16
 1578 051c 0132     		adds	r2, r2, #1
 1579 051e 1A80     		strh	r2, [r3, #0]	@ movhi
 1580              	.LBB142:
 1581 0520 FFF7FEFF 		bl	uart_transmit
 1582              	.LVL128:
 1583 0524 7148     		ldr	r0, .L105
 1584 0526 0F21     		movs	r1, #15
 1585 0528 FFF7FEFF 		bl	uart_transmit
 1586              	.LBE142:
 1587 052c 1023     		movs	r3, #16
 1588 052e 2B70     		strb	r3, [r5, #0]
 1589 0530 6E48     		ldr	r0, .L105
 1590 0532 1F23     		movs	r3, #31
 1591 0534 0121     		movs	r1, #1
 1592 0536 2370     		strb	r3, [r4, #0]
 1593 0538 FFF7FEFF 		bl	uart_transmit
 1594 053c 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1595 053e 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1596 0540 6633     		adds	r3, r3, #102
 1597 0542 DBB2     		uxtb	r3, r3
 1598 0544 2B70     		strb	r3, [r5, #0]
 1599 0546 6948     		ldr	r0, .L105
 1600 0548 9B18     		adds	r3, r3, r2
 1601 054a 6621     		movs	r1, #102
 1602 054c 2370     		strb	r3, [r4, #0]
 1603 054e FFF7FEFF 		bl	uart_transmit
 1604              	.LBB143:
 1605 0552 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1606 0554 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1607 0556 0433     		adds	r3, r3, #4
 1608 0558 DBB2     		uxtb	r3, r3
 1609 055a 2B70     		strb	r3, [r5, #0]
 1610 055c 6348     		ldr	r0, .L105
 1611 055e 9B18     		adds	r3, r3, r2
 1612 0560 0421     		movs	r1, #4
 1613 0562 2370     		strb	r3, [r4, #0]
 1614 0564 FFF7FEFF 		bl	uart_transmit
 1615              	.LVL129:
 1616 0568 654E     		ldr	r6, .L105+20
 1617 056a 0027     		movs	r7, #0
 1618              	.LBB144:
 1619 056c B046     		mov	r8, r6
 1620              	.LVL130:
 1621              	.L89:
 1622 056e 18F81710 		ldrb	r1, [r8, r7, lsl #1]	@ zero_extendqisi2
 1623              	.LVL131:
 1624 0572 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1625 0574 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1626 0576 CB18     		adds	r3, r1, r3
 1627 0578 DBB2     		uxtb	r3, r3
 1628              	.LVL132:
 1629 057a 2B70     		strb	r3, [r5, #0]
 1630 057c 5B48     		ldr	r0, .L105
 1631 057e 9B18     		adds	r3, r3, r2
 1632              	.LVL133:
 1633 0580 2370     		strb	r3, [r4, #0]
 1634 0582 FFF7FEFF 		bl	uart_transmit
 1635              	.LVL134:
 1636              	.LBE144:
 1637              	.LBB145:
 1638 0586 7178     		ldrb	r1, [r6, #1]	@ zero_extendqisi2
 1639              	.LVL135:
 1640 0588 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1641 058a 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1642 058c CB18     		adds	r3, r1, r3
 1643 058e DBB2     		uxtb	r3, r3
 1644              	.LVL136:
 1645 0590 2B70     		strb	r3, [r5, #0]
 1646 0592 5648     		ldr	r0, .L105
 1647 0594 9B18     		adds	r3, r3, r2
 1648              	.LVL137:
 1649 0596 0137     		adds	r7, r7, #1
 1650 0598 2370     		strb	r3, [r4, #0]
 1651 059a 0236     		adds	r6, r6, #2
 1652 059c FFF7FEFF 		bl	uart_transmit
 1653              	.LVL138:
 1654              	.LBE145:
 1655 05a0 042F     		cmp	r7, #4
 1656 05a2 E4D1     		bne	.L89
 1657              	.LVL139:
 1658              	.L100:
 1659              	.LBE143:
 1660 05a4 544B     		ldr	r3, .L105+12
 1661 05a6 5148     		ldr	r0, .L105
 1662 05a8 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1663 05aa FFF7FEFF 		bl	uart_transmit
 1664 05ae 534B     		ldr	r3, .L105+16
 1665 05b0 4E48     		ldr	r0, .L105
 1666 05b2 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1667 05b4 FFF7FEFF 		bl	uart_transmit
 1668 05b8 03E0     		b	.L84
 1669              	.L88:
 1670 05ba 524B     		ldr	r3, .L105+24
 1671 05bc 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1672 05be 0132     		adds	r2, r2, #1
 1673 05c0 1A70     		strb	r2, [r3, #0]
 1674              	.L84:
 1675 05c2 514B     		ldr	r3, .L105+28
 1676 05c4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1677 05c6 122B     		cmp	r3, #18
 1678 05c8 40F0AA80 		bne	.L90
 1679 05cc 4748     		ldr	r0, .L105
 1680 05ce 0E21     		movs	r1, #14
 1681 05d0 FFF7FEFF 		bl	uart_check_free_space
 1682 05d4 0028     		cmp	r0, #0
 1683 05d6 00F09F80 		beq	.L91
 1684 05da 454B     		ldr	r3, .L105+4
 1685              	.LBB146:
 1686 05dc 9921     		movs	r1, #153
 1687              	.LBE146:
 1688 05de 1A88     		ldrh	r2, [r3, #0]
 1689              	.LBB147:
 1690 05e0 4248     		ldr	r0, .L105
 1691              	.LBE147:
 1692 05e2 0E32     		adds	r2, r2, #14
 1693 05e4 1A80     		strh	r2, [r3, #0]	@ movhi
 1694 05e6 434B     		ldr	r3, .L105+8
 1695 05e8 434D     		ldr	r5, .L105+12
 1696 05ea 1A88     		ldrh	r2, [r3, #0]
 1697 05ec 434C     		ldr	r4, .L105+16
 1698 05ee 0132     		adds	r2, r2, #1
 1699 05f0 1A80     		strh	r2, [r3, #0]	@ movhi
 1700              	.LBB148:
 1701 05f2 FFF7FEFF 		bl	uart_transmit
 1702              	.LVL140:
 1703 05f6 0E21     		movs	r1, #14
 1704 05f8 3C48     		ldr	r0, .L105
 1705 05fa FFF7FEFF 		bl	uart_transmit
 1706              	.LBE148:
 1707 05fe 0F23     		movs	r3, #15
 1708 0600 2B70     		strb	r3, [r5, #0]
 1709 0602 0121     		movs	r1, #1
 1710 0604 1D23     		movs	r3, #29
 1711 0606 3948     		ldr	r0, .L105
 1712 0608 2370     		strb	r3, [r4, #0]
 1713 060a FFF7FEFF 		bl	uart_transmit
 1714 060e 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1715 0610 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1716 0612 6733     		adds	r3, r3, #103
 1717              	.LBB149:
 1718 0614 3D4E     		ldr	r6, .L105+32
 1719              	.LBE149:
 1720 0616 DBB2     		uxtb	r3, r3
 1721 0618 2B70     		strb	r3, [r5, #0]
 1722 061a 6721     		movs	r1, #103
 1723 061c 9B18     		adds	r3, r3, r2
 1724 061e 3348     		ldr	r0, .L105
 1725 0620 2370     		strb	r3, [r4, #0]
 1726 0622 FFF7FEFF 		bl	uart_transmit
 1727              	.LBB150:
 1728 0626 3178     		ldrb	r1, [r6, #0]	@ zero_extendqisi2
 1729              	.LVL141:
 1730 0628 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1731 062a 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1732 062c CB18     		adds	r3, r1, r3
 1733 062e DBB2     		uxtb	r3, r3
 1734              	.LVL142:
 1735 0630 2B70     		strb	r3, [r5, #0]
 1736 0632 2E48     		ldr	r0, .L105
 1737 0634 9B18     		adds	r3, r3, r2
 1738              	.LVL143:
 1739 0636 2370     		strb	r3, [r4, #0]
 1740 0638 FFF7FEFF 		bl	uart_transmit
 1741              	.LVL144:
 1742              	.LBE150:
 1743              	.LBB151:
 1744 063c F178     		ldrb	r1, [r6, #3]	@ zero_extendqisi2
 1745              	.LVL145:
 1746 063e 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1747 0640 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1748 0642 CB18     		adds	r3, r1, r3
 1749 0644 DBB2     		uxtb	r3, r3
 1750              	.LVL146:
 1751 0646 2B70     		strb	r3, [r5, #0]
 1752 0648 2848     		ldr	r0, .L105
 1753 064a 9B18     		adds	r3, r3, r2
 1754              	.LVL147:
 1755 064c 2370     		strb	r3, [r4, #0]
 1756 064e FFF7FEFF 		bl	uart_transmit
 1757              	.LVL148:
 1758              	.LBE151:
 1759              	.LBB152:
 1760 0652 2F4B     		ldr	r3, .L105+36
 1761 0654 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1762 0656 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1763              	.LVL149:
 1764 0658 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1765              	.LBE152:
 1766              	.LBB153:
 1767 065a 2E4E     		ldr	r6, .L105+40
 1768              	.LBE153:
 1769              	.LBB154:
 1770 065c CB18     		adds	r3, r1, r3
 1771 065e DBB2     		uxtb	r3, r3
 1772              	.LVL150:
 1773 0660 2B70     		strb	r3, [r5, #0]
 1774 0662 2248     		ldr	r0, .L105
 1775 0664 9B18     		adds	r3, r3, r2
 1776              	.LVL151:
 1777 0666 2370     		strb	r3, [r4, #0]
 1778 0668 FFF7FEFF 		bl	uart_transmit
 1779              	.LVL152:
 1780              	.LBE154:
 1781              	.LBB155:
 1782 066c 3178     		ldrb	r1, [r6, #0]	@ zero_extendqisi2
 1783              	.LVL153:
 1784 066e 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1785 0670 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1786 0672 CB18     		adds	r3, r1, r3
 1787 0674 DBB2     		uxtb	r3, r3
 1788              	.LVL154:
 1789 0676 2B70     		strb	r3, [r5, #0]
 1790 0678 1C48     		ldr	r0, .L105
 1791 067a 9B18     		adds	r3, r3, r2
 1792              	.LVL155:
 1793 067c 2370     		strb	r3, [r4, #0]
 1794 067e FFF7FEFF 		bl	uart_transmit
 1795              	.LVL156:
 1796              	.LBE155:
 1797              	.LBB156:
 1798 0682 3179     		ldrb	r1, [r6, #4]	@ zero_extendqisi2
 1799              	.LVL157:
 1800 0684 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1801 0686 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1802 0688 CB18     		adds	r3, r1, r3
 1803 068a DBB2     		uxtb	r3, r3
 1804              	.LVL158:
 1805 068c 2B70     		strb	r3, [r5, #0]
 1806 068e 1748     		ldr	r0, .L105
 1807 0690 9B18     		adds	r3, r3, r2
 1808              	.LVL159:
 1809 0692 2370     		strb	r3, [r4, #0]
 1810 0694 FFF7FEFF 		bl	uart_transmit
 1811              	.LVL160:
 1812              	.LBE156:
 1813              	.LBB157:
 1814 0698 7179     		ldrb	r1, [r6, #5]	@ zero_extendqisi2
 1815              	.LVL161:
 1816 069a 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1817 069c 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1818 069e CB18     		adds	r3, r1, r3
 1819 06a0 DBB2     		uxtb	r3, r3
 1820              	.LVL162:
 1821 06a2 2B70     		strb	r3, [r5, #0]
 1822 06a4 1148     		ldr	r0, .L105
 1823 06a6 9B18     		adds	r3, r3, r2
 1824              	.LVL163:
 1825 06a8 2370     		strb	r3, [r4, #0]
 1826 06aa FFF7FEFF 		bl	uart_transmit
 1827              	.LVL164:
 1828              	.LBE157:
 1829              	.LBB158:
 1830 06ae B179     		ldrb	r1, [r6, #6]	@ zero_extendqisi2
 1831              	.LVL165:
 1832 06b0 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1833 06b2 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1834 06b4 CB18     		adds	r3, r1, r3
 1835 06b6 DBB2     		uxtb	r3, r3
 1836              	.LVL166:
 1837 06b8 2B70     		strb	r3, [r5, #0]
 1838 06ba 0C48     		ldr	r0, .L105
 1839 06bc 9B18     		adds	r3, r3, r2
 1840              	.LVL167:
 1841 06be 2370     		strb	r3, [r4, #0]
 1842 06c0 FFF7FEFF 		bl	uart_transmit
 1843              	.LVL168:
 1844              	.LBE158:
 1845              	.LBB159:
 1846 06c4 F179     		ldrb	r1, [r6, #7]	@ zero_extendqisi2
 1847              	.LVL169:
 1848 06c6 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1849 06c8 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1850 06ca CB18     		adds	r3, r1, r3
 1851 06cc DBB2     		uxtb	r3, r3
 1852              	.LVL170:
 1853 06ce 2B70     		strb	r3, [r5, #0]
 1854 06d0 0648     		ldr	r0, .L105
 1855 06d2 9B18     		adds	r3, r3, r2
 1856              	.LVL171:
 1857 06d4 2370     		strb	r3, [r4, #0]
 1858 06d6 FFF7FEFF 		bl	uart_transmit
 1859              	.LVL172:
 1860              	.LBE159:
 1861 06da 2978     		ldrb	r1, [r5, #0]	@ zero_extendqisi2
 1862 06dc 0348     		ldr	r0, .L105
 1863 06de FFF7FEFF 		bl	uart_transmit
 1864 06e2 0248     		ldr	r0, .L105
 1865 06e4 2178     		ldrb	r1, [r4, #0]	@ zero_extendqisi2
 1866 06e6 FFF7FEFF 		bl	uart_transmit
 1867 06ea 19E0     		b	.L90
 1868              	.L106:
 1869              		.align	2
 1870              	.L105:
 1871 06ec 00000000 		.word	uart2
 1872 06f0 00000000 		.word	downlink_nb_bytes
 1873 06f4 00000000 		.word	downlink_nb_msgs
 1874 06f8 00000000 		.word	ck_a
 1875 06fc 00000000 		.word	ck_b
 1876 0700 00000000 		.word	commands
 1877 0704 00000000 		.word	downlink_nb_ovrn
 1878 0708 00000000 		.word	.LANCHOR8
 1879 070c 00000000 		.word	radio_control
 1880 0710 00000000 		.word	.LANCHOR0
 1881 0714 00000000 		.word	electrical
 1882              	.LVL173:
 1883              	.L91:
 1884 0718 364B     		ldr	r3, .L107
 1885 071a 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1886 071c 0132     		adds	r2, r2, #1
 1887 071e 1A70     		strb	r2, [r3, #0]
 1888              	.L90:
 1889 0720 354B     		ldr	r3, .L107+4
 1890 0722 1B88     		ldrh	r3, [r3, #0]
 1891 0724 182B     		cmp	r3, #24
 1892 0726 63D1     		bne	.L59
 1893 0728 3448     		ldr	r0, .L107+8
 1894 072a 1321     		movs	r1, #19
 1895 072c FFF7FEFF 		bl	uart_check_free_space
 1896 0730 0028     		cmp	r0, #0
 1897 0732 59D0     		beq	.L92
 1898 0734 324B     		ldr	r3, .L107+12
 1899              	.LBB160:
 1900 0736 3148     		ldr	r0, .L107+8
 1901              	.LBE160:
 1902 0738 1A88     		ldrh	r2, [r3, #0]
 1903              	.LBB161:
 1904 073a 9921     		movs	r1, #153
 1905              	.LBE161:
 1906 073c 1332     		adds	r2, r2, #19
 1907 073e 1A80     		strh	r2, [r3, #0]	@ movhi
 1908 0740 304B     		ldr	r3, .L107+16
 1909 0742 314D     		ldr	r5, .L107+20
 1910 0744 1A88     		ldrh	r2, [r3, #0]
 1911 0746 314C     		ldr	r4, .L107+24
 1912 0748 0132     		adds	r2, r2, #1
 1913 074a 1A80     		strh	r2, [r3, #0]	@ movhi
 1914              	.LBB162:
 1915 074c FFF7FEFF 		bl	uart_transmit
 1916              	.LVL174:
 1917 0750 2A48     		ldr	r0, .L107+8
 1918 0752 1321     		movs	r1, #19
 1919 0754 FFF7FEFF 		bl	uart_transmit
 1920              	.LBE162:
 1921 0758 1423     		movs	r3, #20
 1922 075a 2B70     		strb	r3, [r5, #0]
 1923 075c 2748     		ldr	r0, .L107+8
 1924 075e 2723     		movs	r3, #39
 1925 0760 0121     		movs	r1, #1
 1926 0762 2370     		strb	r3, [r4, #0]
 1927 0764 FFF7FEFF 		bl	uart_transmit
 1928 0768 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1929 076a 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1930 076c 6933     		adds	r3, r3, #105
 1931 076e DBB2     		uxtb	r3, r3
 1932 0770 2B70     		strb	r3, [r5, #0]
 1933 0772 2248     		ldr	r0, .L107+8
 1934 0774 9B18     		adds	r3, r3, r2
 1935 0776 6921     		movs	r1, #105
 1936 0778 2370     		strb	r3, [r4, #0]
 1937 077a FFF7FEFF 		bl	uart_transmit
 1938              	.LBB163:
 1939 077e 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1940 0780 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1941 0782 0633     		adds	r3, r3, #6
 1942 0784 DBB2     		uxtb	r3, r3
 1943 0786 2B70     		strb	r3, [r5, #0]
 1944 0788 1C48     		ldr	r0, .L107+8
 1945 078a 9B18     		adds	r3, r3, r2
 1946 078c 0621     		movs	r1, #6
 1947 078e 2370     		strb	r3, [r4, #0]
 1948 0790 FFF7FEFF 		bl	uart_transmit
 1949              	.LVL175:
 1950 0794 1E4E     		ldr	r6, .L107+28
 1951 0796 0027     		movs	r7, #0
 1952              	.LBB164:
 1953 0798 B046     		mov	r8, r6
 1954              	.LVL176:
 1955              	.L93:
 1956 079a 18F81710 		ldrb	r1, [r8, r7, lsl #1]	@ zero_extendqisi2
 1957              	.LVL177:
 1958 079e 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1959 07a0 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1960 07a2 CB18     		adds	r3, r1, r3
 1961 07a4 DBB2     		uxtb	r3, r3
 1962              	.LVL178:
 1963 07a6 2B70     		strb	r3, [r5, #0]
 1964 07a8 1448     		ldr	r0, .L107+8
 1965 07aa 9B18     		adds	r3, r3, r2
 1966              	.LVL179:
 1967 07ac 2370     		strb	r3, [r4, #0]
 1968 07ae FFF7FEFF 		bl	uart_transmit
 1969              	.LVL180:
 1970              	.LBE164:
 1971              	.LBB165:
 1972 07b2 7178     		ldrb	r1, [r6, #1]	@ zero_extendqisi2
 1973              	.LVL181:
 1974 07b4 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1975 07b6 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1976 07b8 CB18     		adds	r3, r1, r3
 1977 07ba DBB2     		uxtb	r3, r3
 1978              	.LVL182:
 1979 07bc 2B70     		strb	r3, [r5, #0]
 1980 07be 0F48     		ldr	r0, .L107+8
 1981 07c0 9B18     		adds	r3, r3, r2
 1982              	.LVL183:
 1983 07c2 0137     		adds	r7, r7, #1
 1984 07c4 2370     		strb	r3, [r4, #0]
 1985 07c6 0236     		adds	r6, r6, #2
 1986 07c8 FFF7FEFF 		bl	uart_transmit
 1987              	.LVL184:
 1988              	.LBE165:
 1989 07cc 062F     		cmp	r7, #6
 1990 07ce E4D1     		bne	.L93
 1991              	.LBE163:
 1992 07d0 0D4B     		ldr	r3, .L107+20
 1993 07d2 0A48     		ldr	r0, .L107+8
 1994 07d4 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1995 07d6 FFF7FEFF 		bl	uart_transmit
 1996 07da 0C4B     		ldr	r3, .L107+24
 1997 07dc 0748     		ldr	r0, .L107+8
 1998 07de 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1999              	.LBE133:
 2000              	.LBE105:
 2001              	.LBE104:
 200:firmwares/fixedwing/main_fbw.c ****   {
 201:firmwares/fixedwing/main_fbw.c ****     set_failsafe_mode();
 202:firmwares/fixedwing/main_fbw.c ****   }
 203:firmwares/fixedwing/main_fbw.c **** #endif
 204:firmwares/fixedwing/main_fbw.c **** 
 205:firmwares/fixedwing/main_fbw.c **** #ifdef DOWNLINK
 206:firmwares/fixedwing/main_fbw.c ****   fbw_downlink_periodic_task();
 207:firmwares/fixedwing/main_fbw.c **** #endif
 208:firmwares/fixedwing/main_fbw.c **** 
 209:firmwares/fixedwing/main_fbw.c **** }
 2002              		.loc 2 209 0
 2003 07e0 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2004              	.LBB168:
 2005              	.LBB167:
 2006              	.LBB166:
 2007              		.loc 4 98 0
 2008 07e4 FFF7FEBF 		b	uart_transmit
 2009              	.LVL185:
 2010              	.L92:
 2011 07e8 024B     		ldr	r3, .L107
 2012 07ea 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2013 07ec 0132     		adds	r2, r2, #1
 2014 07ee 1A70     		strb	r2, [r3, #0]
 2015              	.L59:
 2016 07f0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2017              	.L108:
 2018              		.align	2
 2019              	.L107:
 2020 07f4 00000000 		.word	downlink_nb_ovrn
 2021 07f8 00000000 		.word	.LANCHOR9
 2022 07fc 00000000 		.word	uart2
 2023 0800 00000000 		.word	downlink_nb_bytes
 2024 0804 00000000 		.word	downlink_nb_msgs
 2025 0808 00000000 		.word	ck_a
 2026 080c 00000000 		.word	ck_b
 2027 0810 00000000 		.word	actuators
 2028              	.LBE166:
 2029              	.LBE167:
 2030              	.LBE168:
 2031              		.cfi_endproc
 2032              	.LFE42:
 2034              		.section	.text.handle_periodic_tasks_fbw,"ax",%progbits
 2035              		.align	1
 2036              		.global	handle_periodic_tasks_fbw
 2037              		.thumb
 2038              		.thumb_func
 2040              	handle_periodic_tasks_fbw:
 2041              	.LFB43:
 210:firmwares/fixedwing/main_fbw.c **** 
 211:firmwares/fixedwing/main_fbw.c **** void handle_periodic_tasks_fbw(void) {
 2042              		.loc 2 211 0
 2043              		.cfi_startproc
 2044              		@ args = 0, pretend = 0, frame = 0
 2045              		@ frame_needed = 0, uses_anonymous_args = 0
 2046              	.LVL186:
 2047 0000 10B5     		push	{r4, lr}
 2048              	.LCFI4:
 2049              		.cfi_def_cfa_offset 8
 2050              		.cfi_offset 14, -4
 2051              		.cfi_offset 4, -8
 2052              	.LBB169:
 2053              	.LBB170:
 2054              		.file 5 "./mcu_periph/sys_time.h"
   1:./mcu_periph/sys_time.h **** /*
   2:./mcu_periph/sys_time.h ****  *
   3:./mcu_periph/sys_time.h ****  * Copyright (C) 2009-2011 The Paparazzi Team
   4:./mcu_periph/sys_time.h ****  *
   5:./mcu_periph/sys_time.h ****  * This file is part of paparazzi.
   6:./mcu_periph/sys_time.h ****  *
   7:./mcu_periph/sys_time.h ****  * paparazzi is free software; you can redistribute it and/or modify
   8:./mcu_periph/sys_time.h ****  * it under the terms of the GNU General Public License as published by
   9:./mcu_periph/sys_time.h ****  * the Free Software Foundation; either version 2, or (at your option)
  10:./mcu_periph/sys_time.h ****  * any later version.
  11:./mcu_periph/sys_time.h ****  *
  12:./mcu_periph/sys_time.h ****  * paparazzi is distributed in the hope that it will be useful,
  13:./mcu_periph/sys_time.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:./mcu_periph/sys_time.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:./mcu_periph/sys_time.h ****  * GNU General Public License for more details.
  16:./mcu_periph/sys_time.h ****  *
  17:./mcu_periph/sys_time.h ****  * You should have received a copy of the GNU General Public License
  18:./mcu_periph/sys_time.h ****  * along with paparazzi; see the file COPYING.  If not, write to
  19:./mcu_periph/sys_time.h ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  20:./mcu_periph/sys_time.h ****  * Boston, MA 02111-1307, USA.
  21:./mcu_periph/sys_time.h ****  *
  22:./mcu_periph/sys_time.h ****  */
  23:./mcu_periph/sys_time.h **** 
  24:./mcu_periph/sys_time.h **** /**
  25:./mcu_periph/sys_time.h ****  * @file mcu_periph/sys_time.h
  26:./mcu_periph/sys_time.h ****  * @brief Architecture independent timing functions.
  27:./mcu_periph/sys_time.h ****  *
  28:./mcu_periph/sys_time.h ****  */
  29:./mcu_periph/sys_time.h **** 
  30:./mcu_periph/sys_time.h **** #ifndef SYS_TIME_H
  31:./mcu_periph/sys_time.h **** #define SYS_TIME_H
  32:./mcu_periph/sys_time.h **** 
  33:./mcu_periph/sys_time.h **** #include <inttypes.h>
  34:./mcu_periph/sys_time.h **** #include <stdlib.h>
  35:./mcu_periph/sys_time.h **** #include "std.h"
  36:./mcu_periph/sys_time.h **** 
  37:./mcu_periph/sys_time.h **** #include BOARD_CONFIG
  38:./mcu_periph/sys_time.h **** 
  39:./mcu_periph/sys_time.h **** #ifndef SYS_TIME_NB_TIMER
  40:./mcu_periph/sys_time.h **** #define SYS_TIME_NB_TIMER 8
  41:./mcu_periph/sys_time.h **** #endif
  42:./mcu_periph/sys_time.h **** 
  43:./mcu_periph/sys_time.h **** typedef uint8_t tid_t; ///< sys_time timer id type
  44:./mcu_periph/sys_time.h **** typedef void (*sys_time_cb) (uint8_t id);
  45:./mcu_periph/sys_time.h **** 
  46:./mcu_periph/sys_time.h **** struct sys_time_timer {
  47:./mcu_periph/sys_time.h ****   bool_t          in_use;
  48:./mcu_periph/sys_time.h ****   sys_time_cb     cb;
  49:./mcu_periph/sys_time.h ****   volatile bool_t elapsed;
  50:./mcu_periph/sys_time.h ****   uint32_t        end_time; ///< in SYS_TICKS
  51:./mcu_periph/sys_time.h ****   uint32_t        duration; ///< in SYS_TICKS
  52:./mcu_periph/sys_time.h **** };
  53:./mcu_periph/sys_time.h **** 
  54:./mcu_periph/sys_time.h **** struct sys_time {
  55:./mcu_periph/sys_time.h ****   volatile uint32_t nb_sec;       ///< full seconds since startup
  56:./mcu_periph/sys_time.h ****   volatile uint32_t nb_sec_rem;   ///< remainder of second in CPU_TICKS
  57:./mcu_periph/sys_time.h ****   volatile uint32_t nb_tick;      ///< in SYS_TICKS with SYS_TIME_RESOLUTION
  58:./mcu_periph/sys_time.h ****   struct sys_time_timer timer[SYS_TIME_NB_TIMER];
  59:./mcu_periph/sys_time.h **** };
  60:./mcu_periph/sys_time.h **** 
  61:./mcu_periph/sys_time.h **** extern struct sys_time sys_time;
  62:./mcu_periph/sys_time.h **** 
  63:./mcu_periph/sys_time.h **** //FIXME temporary hack
  64:./mcu_periph/sys_time.h **** #define cpu_time_sec sys_time.nb_sec
  65:./mcu_periph/sys_time.h **** #define cpu_time_ticks sys_time.nb_sec_rem
  66:./mcu_periph/sys_time.h **** 
  67:./mcu_periph/sys_time.h **** extern void sys_time_init(void);
  68:./mcu_periph/sys_time.h **** 
  69:./mcu_periph/sys_time.h **** /**
  70:./mcu_periph/sys_time.h ****  * Register a new system timer.
  71:./mcu_periph/sys_time.h ****  * @param duration Duration in seconds until the timer elapses.
  72:./mcu_periph/sys_time.h ****  * @param cb Callback function that is called from the ISR when timer elapses, or NULL
  73:./mcu_periph/sys_time.h ****  * @return -1 if it failed, the timer id otherwise
  74:./mcu_periph/sys_time.h ****  */
  75:./mcu_periph/sys_time.h **** extern int sys_time_register_timer(float duration, sys_time_cb cb);
  76:./mcu_periph/sys_time.h **** 
  77:./mcu_periph/sys_time.h **** /**
  78:./mcu_periph/sys_time.h ****  * Cancel a system timer by id.
  79:./mcu_periph/sys_time.h ****  * @param id Timer id.
  80:./mcu_periph/sys_time.h ****  */
  81:./mcu_periph/sys_time.h **** extern void sys_time_cancel_timer(tid_t id);
  82:./mcu_periph/sys_time.h **** 
  83:./mcu_periph/sys_time.h **** /**
  84:./mcu_periph/sys_time.h ****  * Update the duration until a timer elapses.
  85:./mcu_periph/sys_time.h ****  * @param id Timer id
  86:./mcu_periph/sys_time.h ****  * @param duration Duration in seconds until the timer elapses.
  87:./mcu_periph/sys_time.h ****  */
  88:./mcu_periph/sys_time.h **** extern void sys_time_update_timer(tid_t id, float duration);
  89:./mcu_periph/sys_time.h **** 
  90:./mcu_periph/sys_time.h **** static inline bool_t sys_time_check_and_ack_timer(tid_t id) {
  91:./mcu_periph/sys_time.h ****   if (sys_time.timer[id].elapsed) {
 2055              		.loc 5 91 0
 2056 0002 0E4B     		ldr	r3, .L112
 2057 0004 1421     		movs	r1, #20
 2058 0006 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2059 0008 0D4B     		ldr	r3, .L112+4
 2060 000a 01FB0232 		mla	r2, r1, r2, r3
 2061 000e 117D     		ldrb	r1, [r2, #20]	@ zero_extendqisi2
 2062 0010 1C46     		mov	r4, r3
 2063 0012 1032     		adds	r2, r2, #16
 2064 0014 19B1     		cbz	r1, .L110
  92:./mcu_periph/sys_time.h ****     sys_time.timer[id].elapsed = FALSE;
 2065              		.loc 5 92 0
 2066 0016 0023     		movs	r3, #0
 2067 0018 1371     		strb	r3, [r2, #4]
 2068              	.LBE170:
 2069              	.LBE169:
 212:firmwares/fixedwing/main_fbw.c **** 
 213:firmwares/fixedwing/main_fbw.c ****   if (sys_time_check_and_ack_timer(fbw_periodic_tid))
 214:firmwares/fixedwing/main_fbw.c ****     periodic_task_fbw();
 2070              		.loc 2 214 0
 2071 001a FFF7FEFF 		bl	periodic_task_fbw
 2072              	.LVL187:
 2073              	.L110:
 2074              	.LBB171:
 2075              	.LBB172:
  91:./mcu_periph/sys_time.h ****   if (sys_time.timer[id].elapsed) {
 2076              		.loc 5 91 0
 2077 001e 094B     		ldr	r3, .L112+8
 2078 0020 1422     		movs	r2, #20
 2079 0022 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2080 0024 02FB0343 		mla	r3, r2, r3, r4
 2081 0028 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 2082 002a 1033     		adds	r3, r3, #16
 2083 002c 2AB1     		cbz	r2, .L109
 2084              		.loc 5 92 0
 2085 002e 0022     		movs	r2, #0
 2086 0030 1A71     		strb	r2, [r3, #4]
 2087              	.LBE172:
 2088              	.LBE171:
 215:firmwares/fixedwing/main_fbw.c **** 
 216:firmwares/fixedwing/main_fbw.c ****   if (sys_time_check_and_ack_timer(electrical_tid))
 217:firmwares/fixedwing/main_fbw.c ****     electrical_periodic();
 218:firmwares/fixedwing/main_fbw.c **** 
 219:firmwares/fixedwing/main_fbw.c **** }
 2089              		.loc 2 219 0
 2090 0032 BDE81040 		pop	{r4, lr}
 217:firmwares/fixedwing/main_fbw.c ****     electrical_periodic();
 2091              		.loc 2 217 0
 2092 0036 FFF7FEBF 		b	electrical_periodic
 2093              	.LVL188:
 2094              	.L109:
 2095 003a 10BD     		pop	{r4, pc}
 2096              	.L113:
 2097              		.align	2
 2098              	.L112:
 2099 003c 00000000 		.word	.LANCHOR2
 2100 0040 00000000 		.word	sys_time
 2101 0044 00000000 		.word	.LANCHOR3
 2102              		.cfi_endproc
 2103              	.LFE43:
 2105              		.global	electrical_tid
 2106              		.global	fbw_periodic_tid
 2107              		.global	fbw_new_actuators
 2108              		.global	fbw_mode
 2109              		.section	.bss.i300.3604,"aw",%nobits
 2110              		.align	1
 2111              		.set	.LANCHOR6,. + 0
 2114              	i300.3604:
 2115 0000 0000     		.space	2
 2116              		.section	.bss.i30.3628,"aw",%nobits
 2117              		.set	.LANCHOR7,. + 0
 2120              	i30.3628:
 2121 0000 00       		.space	1
 2122              		.section	.bss.fbw_mode,"aw",%nobits
 2123              		.set	.LANCHOR0,. + 0
 2126              	fbw_mode:
 2127 0000 00       		.space	1
 2128              		.section	.bss.fbw_periodic_tid,"aw",%nobits
 2129              		.set	.LANCHOR2,. + 0
 2132              	fbw_periodic_tid:
 2133 0000 00       		.space	1
 2134              		.section	.bss.i60.3629,"aw",%nobits
 2135              		.set	.LANCHOR8,. + 0
 2138              	i60.3629:
 2139 0000 00       		.space	1
 2140              		.section	.bss._1Hz.3375,"aw",%nobits
 2141              		.set	.LANCHOR4,. + 0
 2144              	_1Hz.3375:
 2145 0000 00       		.space	1
 2146              		.section	.bss.fbw_new_actuators,"aw",%nobits
 2147              		.set	.LANCHOR1,. + 0
 2150              	fbw_new_actuators:
 2151 0000 00       		.space	1
 2152              		.section	.bss.i120.3603,"aw",%nobits
 2153              		.set	.LANCHOR5,. + 0
 2156              	i120.3603:
 2157 0000 00       		.space	1
 2158              		.section	.bss.electrical_tid,"aw",%nobits
 2159              		.set	.LANCHOR3,. + 0
 2162              	electrical_tid:
 2163 0000 00       		.space	1
 2164              		.section	.bss.i300.3630,"aw",%nobits
 2165              		.align	1
 2166              		.set	.LANCHOR9,. + 0
 2169              	i300.3630:
 2170 0000 0000     		.space	2
 2171              		.text
 2172              	.Letext0:
 2173              		.file 6 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 2174              		.file 7 "/home/uav/USTUAV/paparazzi/sw/include/std.h"
 2175              		.file 8 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 2176              		.file 9 "./paparazzi.h"
 2177              		.file 10 "./subsystems/electrical.h"
 2178              		.file 11 "./mcu_periph/uart.h"
 2179              		.file 12 "./firmwares/fixedwing/main_fbw.h"
 2180              		.file 13 "./commands.h"
 2181              		.file 14 "./firmwares/fixedwing/actuators.h"
 2182              		.file 15 "/home/uav/USTUAV/paparazzi/sw/airborne/arch/stm32/servos_direct_hw.h"
 2183              		.file 16 "/home/uav/USTUAV/paparazzi/var/MYAC/generated/periodic_telemetry.h"
 2184              		.file 17 "./subsystems/datalink/datalink.h"
 2185              		.file 18 "./subsystems/datalink/pprz_transport.h"
 2186              		.file 19 "./subsystems/datalink/xbee.h"
 2187              		.file 20 "./subsystems/datalink/downlink.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main_fbw.c
     /tmp/cckDGTs9.s:18     .text.inter_mcu_fill_fbw_state:0000000000000000 $t
     /tmp/cckDGTs9.s:22     .text.inter_mcu_fill_fbw_state:0000000000000000 inter_mcu_fill_fbw_state
     /tmp/cckDGTs9.s:116    .text.inter_mcu_fill_fbw_state:0000000000000064 $d
     /tmp/cckDGTs9.s:125    .text.handle_rc_frame:0000000000000000 $t
     /tmp/cckDGTs9.s:129    .text.handle_rc_frame:0000000000000000 handle_rc_frame
     /tmp/cckDGTs9.s:169    .text.handle_rc_frame:0000000000000030 $d
     /tmp/cckDGTs9.s:179    .text.init_fbw:0000000000000000 $t
     /tmp/cckDGTs9.s:184    .text.init_fbw:0000000000000000 init_fbw
     /tmp/cckDGTs9.s:322    .text.init_fbw:000000000000007c $d
     /tmp/cckDGTs9.s:345    .text.event_task_fbw:0000000000000000 $t
     /tmp/cckDGTs9.s:350    .text.event_task_fbw:0000000000000000 event_task_fbw
     /tmp/cckDGTs9.s:736    .text.event_task_fbw:0000000000000268 $d
     /tmp/cckDGTs9.s:767    .text.periodic_task_fbw:0000000000000000 $t
     /tmp/cckDGTs9.s:772    .text.periodic_task_fbw:0000000000000000 periodic_task_fbw
     /tmp/cckDGTs9.s:1143   .text.periodic_task_fbw:00000000000001f4 $d
     /tmp/cckDGTs9.s:1163   .text.periodic_task_fbw:000000000000023c $t
     /tmp/cckDGTs9.s:1540   .text.periodic_task_fbw:00000000000004c0 $d
     /tmp/cckDGTs9.s:1557   .text.periodic_task_fbw:00000000000004f8 $t
     /tmp/cckDGTs9.s:1871   .text.periodic_task_fbw:00000000000006ec $d
     /tmp/cckDGTs9.s:1884   .text.periodic_task_fbw:0000000000000718 $t
     /tmp/cckDGTs9.s:2020   .text.periodic_task_fbw:00000000000007f4 $d
     /tmp/cckDGTs9.s:2035   .text.handle_periodic_tasks_fbw:0000000000000000 $t
     /tmp/cckDGTs9.s:2040   .text.handle_periodic_tasks_fbw:0000000000000000 handle_periodic_tasks_fbw
     /tmp/cckDGTs9.s:2099   .text.handle_periodic_tasks_fbw:000000000000003c $d
     /tmp/cckDGTs9.s:2162   .bss.electrical_tid:0000000000000000 electrical_tid
     /tmp/cckDGTs9.s:2132   .bss.fbw_periodic_tid:0000000000000000 fbw_periodic_tid
     /tmp/cckDGTs9.s:2150   .bss.fbw_new_actuators:0000000000000000 fbw_new_actuators
     /tmp/cckDGTs9.s:2126   .bss.fbw_mode:0000000000000000 fbw_mode
     /tmp/cckDGTs9.s:2110   .bss.i300.3604:0000000000000000 $d
     /tmp/cckDGTs9.s:2114   .bss.i300.3604:0000000000000000 i300.3604
     /tmp/cckDGTs9.s:2120   .bss.i30.3628:0000000000000000 i30.3628
     /tmp/cckDGTs9.s:2121   .bss.i30.3628:0000000000000000 $d
     /tmp/cckDGTs9.s:2127   .bss.fbw_mode:0000000000000000 $d
     /tmp/cckDGTs9.s:2133   .bss.fbw_periodic_tid:0000000000000000 $d
     /tmp/cckDGTs9.s:2138   .bss.i60.3629:0000000000000000 i60.3629
     /tmp/cckDGTs9.s:2139   .bss.i60.3629:0000000000000000 $d
     /tmp/cckDGTs9.s:2144   .bss._1Hz.3375:0000000000000000 _1Hz.3375
     /tmp/cckDGTs9.s:2145   .bss._1Hz.3375:0000000000000000 $d
     /tmp/cckDGTs9.s:2151   .bss.fbw_new_actuators:0000000000000000 $d
     /tmp/cckDGTs9.s:2156   .bss.i120.3603:0000000000000000 i120.3603
     /tmp/cckDGTs9.s:2157   .bss.i120.3603:0000000000000000 $d
     /tmp/cckDGTs9.s:2163   .bss.electrical_tid:0000000000000000 $d
     /tmp/cckDGTs9.s:2165   .bss.i300.3630:0000000000000000 $d
     /tmp/cckDGTs9.s:2169   .bss.i300.3630:0000000000000000 i300.3630
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
fbw_state
radio_control
electrical
inter_mcu_received_fbw
commands
mcu_init
electrical_init
actuators_init
radio_control_impl_init
sys_time_register_timer
commands_failsafe
ap_ok
__aeabi_i2f
__aeabi_f2d
__aeabi_fcmpgt
__aeabi_dmul
__aeabi_d2f
__aeabi_f2iz
__aeabi_i2d
__aeabi_dadd
RadioControlEventImp
i2c_event
actuators_pwm_commit
inter_mcu_received_ap
time_since_last_ap
command_roll_trim
ap_state
command_pitch_trim
actuators
actuators_pwm_values
uart_check_free_space
uart_transmit
telemetry_mode_Fbw
uart2
downlink_nb_bytes
downlink_nb_msgs
ck_a
ck_b
downlink_nb_ovrn
electrical_periodic
sys_time
