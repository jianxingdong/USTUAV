   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"main_fbw.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.inter_mcu_fill_fbw_state,"ax",%progbits
  18              		.align	1
  19              		.thumb
  20              		.thumb_func
  22              	inter_mcu_fill_fbw_state:
  23              	.LFB30:
  24              		.file 1 "./inter_mcu.h"
   1:./inter_mcu.h **** /*  $Id$
   2:./inter_mcu.h ****  *
   3:./inter_mcu.h ****  * Copyright (C) 2003-2005  Pascal Brisset, Antoine Drouin
   4:./inter_mcu.h ****  *
   5:./inter_mcu.h ****  * This file is part of paparazzi.
   6:./inter_mcu.h ****  *
   7:./inter_mcu.h ****  * paparazzi is free software; you can redistribute it and/or modify
   8:./inter_mcu.h ****  * it under the terms of the GNU General Public License as published by
   9:./inter_mcu.h ****  * the Free Software Foundation; either version 2, or (at your option)
  10:./inter_mcu.h ****  * any later version.
  11:./inter_mcu.h ****  *
  12:./inter_mcu.h ****  * paparazzi is distributed in the hope that it will be useful,
  13:./inter_mcu.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:./inter_mcu.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:./inter_mcu.h ****  * GNU General Public License for more details.
  16:./inter_mcu.h ****  *
  17:./inter_mcu.h ****  * You should have received a copy of the GNU General Public License
  18:./inter_mcu.h ****  * along with paparazzi; see the file COPYING.  If not, write to
  19:./inter_mcu.h ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  20:./inter_mcu.h ****  * Boston, MA 02111-1307, USA.
  21:./inter_mcu.h ****  *
  22:./inter_mcu.h ****  */
  23:./inter_mcu.h **** 
  24:./inter_mcu.h **** /** \brief Communication between fbw and ap processes
  25:./inter_mcu.h ****  * This unit contains the data structure used to communicate between the
  26:./inter_mcu.h ****  * "fly by wire" process and the "autopilot" process. It must be linked once in a
  27:./inter_mcu.h ****  * monoprocessor architecture, twice in a twin-processors (the historical
  28:./inter_mcu.h ****  * Atmel AVRs mega8-mega128 one) architecture. In the latter case, the
  29:./inter_mcu.h ****  * inter-mcu communication process (e.g. SPI) must fill and read these data structures.
  30:./inter_mcu.h **** */
  31:./inter_mcu.h **** 
  32:./inter_mcu.h **** #ifndef INTER_MCU_H
  33:./inter_mcu.h **** #define INTER_MCU_H
  34:./inter_mcu.h **** 
  35:./inter_mcu.h **** 
  36:./inter_mcu.h **** #ifdef INTER_MCU
  37:./inter_mcu.h **** 
  38:./inter_mcu.h **** #include <inttypes.h>
  39:./inter_mcu.h **** 
  40:./inter_mcu.h **** #include "std.h"
  41:./inter_mcu.h **** 
  42:./inter_mcu.h **** #include "paparazzi.h"
  43:./inter_mcu.h **** #include "generated/airframe.h"
  44:./inter_mcu.h **** #include "subsystems/radio_control.h"
  45:./inter_mcu.h **** #include "subsystems/electrical.h"
  46:./inter_mcu.h **** #include "firmwares/fixedwing/main_fbw.h"
  47:./inter_mcu.h **** 
  48:./inter_mcu.h **** #ifndef SINGLE_MCU
  49:./inter_mcu.h **** #include "generated/radio.h"
  50:./inter_mcu.h **** #define RADIO_CONTROL_NB_CHANNEL RADIO_CTL_NB
  51:./inter_mcu.h **** #endif
  52:./inter_mcu.h **** 
  53:./inter_mcu.h **** /** Data structure shared by fbw and ap processes */
  54:./inter_mcu.h **** struct fbw_state {
  55:./inter_mcu.h **** #if defined RADIO_CONTROL || RADIO_CONTROL_AUTO1
  56:./inter_mcu.h ****   pprz_t channels[RADIO_CONTROL_NB_CHANNEL];
  57:./inter_mcu.h ****   uint8_t ppm_cpt;
  58:./inter_mcu.h **** #endif
  59:./inter_mcu.h ****   uint8_t status;
  60:./inter_mcu.h ****   uint8_t nb_err;
  61:./inter_mcu.h ****   uint8_t vsupply; 	/* 1e-1 V */
  62:./inter_mcu.h ****   int32_t current;	/* milliAmps */
  63:./inter_mcu.h **** };
  64:./inter_mcu.h **** 
  65:./inter_mcu.h **** struct ap_state {
  66:./inter_mcu.h ****   pprz_t commands[COMMANDS_NB];
  67:./inter_mcu.h ****   pprz_t command_roll_trim;
  68:./inter_mcu.h ****   pprz_t command_pitch_trim;
  69:./inter_mcu.h **** };
  70:./inter_mcu.h **** 
  71:./inter_mcu.h **** // Status bits from FBW to AUTOPILOT
  72:./inter_mcu.h **** #define STATUS_RADIO_OK 0
  73:./inter_mcu.h **** #define STATUS_RADIO_REALLY_LOST 1
  74:./inter_mcu.h **** #define STATUS_MODE_AUTO 2
  75:./inter_mcu.h **** #define STATUS_MODE_FAILSAFE 3
  76:./inter_mcu.h **** #define AVERAGED_CHANNELS_SENT 4
  77:./inter_mcu.h **** #define MASK_FBW_CHANGED 0xf
  78:./inter_mcu.h **** 
  79:./inter_mcu.h **** 
  80:./inter_mcu.h **** extern struct fbw_state* fbw_state;
  81:./inter_mcu.h **** extern struct ap_state*  ap_state;
  82:./inter_mcu.h **** 
  83:./inter_mcu.h **** extern volatile bool_t inter_mcu_received_fbw;
  84:./inter_mcu.h **** extern volatile bool_t inter_mcu_received_ap;
  85:./inter_mcu.h **** 
  86:./inter_mcu.h **** 
  87:./inter_mcu.h **** #ifdef FBW
  88:./inter_mcu.h **** 
  89:./inter_mcu.h **** extern uint8_t time_since_last_ap;
  90:./inter_mcu.h **** extern bool_t ap_ok;
  91:./inter_mcu.h **** 
  92:./inter_mcu.h **** #define AP_STALLED_TIME        30  // 500ms with a 60Hz timer
  93:./inter_mcu.h **** 
  94:./inter_mcu.h **** 
  95:./inter_mcu.h **** static inline void inter_mcu_init(void) {
  96:./inter_mcu.h ****   fbw_state->status = 0;
  97:./inter_mcu.h ****   fbw_state->nb_err = 0;
  98:./inter_mcu.h **** 
  99:./inter_mcu.h ****   ap_ok = FALSE;
 100:./inter_mcu.h **** }
 101:./inter_mcu.h **** 
 102:./inter_mcu.h **** 
 103:./inter_mcu.h **** /* Prepare data to be sent to mcu0 */
 104:./inter_mcu.h **** static inline void inter_mcu_fill_fbw_state (void) {
  25              		.loc 1 104 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 14, -4
  34              		.cfi_offset 4, -8
 105:./inter_mcu.h ****   uint8_t status = 0;
 106:./inter_mcu.h **** 
 107:./inter_mcu.h **** #ifdef RADIO_CONTROL
 108:./inter_mcu.h ****   uint8_t i;
 109:./inter_mcu.h ****   for(i = 0; i < RADIO_CONTROL_NB_CHANNEL; i++)
 110:./inter_mcu.h ****     fbw_state->channels[i] = radio_control.values[i];
  35              		.loc 1 110 0
  36 0002 184B     		ldr	r3, .L12
 104:./inter_mcu.h **** static inline void inter_mcu_fill_fbw_state (void) {
  37              		.loc 1 104 0
  38 0004 1848     		ldr	r0, .L12+4
  39              		.loc 1 110 0
  40 0006 1B68     		ldr	r3, [r3, #0]
  41 0008 0022     		movs	r2, #0
  42              	.LVL1:
  43              	.L2:
 104:./inter_mcu.h **** static inline void inter_mcu_fill_fbw_state (void) {
  44              		.loc 1 104 0 discriminator 2
  45 000a 1418     		adds	r4, r2, r0
  46              		.loc 1 110 0 discriminator 2
  47 000c E488     		ldrh	r4, [r4, #6]
 104:./inter_mcu.h **** static inline void inter_mcu_fill_fbw_state (void) {
  48              		.loc 1 104 0 discriminator 2
  49 000e 1649     		ldr	r1, .L12+4
  50              		.loc 1 110 0 discriminator 2
  51 0010 9C52     		strh	r4, [r3, r2]	@ movhi
  52 0012 0232     		adds	r2, r2, #2
 109:./inter_mcu.h ****   for(i = 0; i < RADIO_CONTROL_NB_CHANNEL; i++)
  53              		.loc 1 109 0 discriminator 2
  54 0014 182A     		cmp	r2, #24
  55 0016 F8D1     		bne	.L2
 111:./inter_mcu.h **** 
 112:./inter_mcu.h ****   fbw_state->ppm_cpt = radio_control.frame_rate;
  56              		.loc 1 112 0
  57 0018 CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
  58 001a 1A76     		strb	r2, [r3, #24]
 113:./inter_mcu.h **** 
 114:./inter_mcu.h ****   status = (radio_control.status == RC_OK ? _BV(STATUS_RADIO_OK) : 0);
  59              		.loc 1 114 0
  60 001c 0A78     		ldrb	r2, [r1, #0]	@ zero_extendqisi2
  61              	.LVL2:
 115:./inter_mcu.h ****   status |= (radio_control.status == RC_REALLY_LOST ? _BV(STATUS_RADIO_REALLY_LOST) : 0);
  62              		.loc 1 115 0
  63 001e 022A     		cmp	r2, #2
  64 0020 0CBF     		ite	eq
  65 0022 0221     		moveq	r1, #2
  66 0024 0021     		movne	r1, #0
  67 0026 002A     		cmp	r2, #0
  68 0028 08BF     		it	eq
  69 002a 41F00101 		orreq	r1, r1, #1
  70              	.LVL3:
 116:./inter_mcu.h ****   status |= (radio_control.status == RC_OK ? _BV(AVERAGED_CHANNELS_SENT) : 0); // Any valid frame c
  71              		.loc 1 116 0
  72 002e 002A     		cmp	r2, #0
  73 0030 0CBF     		ite	eq
  74 0032 1022     		moveq	r2, #16
  75 0034 0022     		movne	r2, #0
  76 0036 0A43     		orrs	r2, r2, r1
  77              	.LVL4:
 117:./inter_mcu.h **** #endif // RADIO_CONTROL
 118:./inter_mcu.h **** 
 119:./inter_mcu.h ****   status |= (fbw_mode == FBW_MODE_AUTO ? _BV(STATUS_MODE_AUTO) : 0);
  78              		.loc 1 119 0
  79 0038 0C49     		ldr	r1, .L12+8
  80 003a 0978     		ldrb	r1, [r1, #0]	@ zero_extendqisi2
  81 003c 0129     		cmp	r1, #1
  82 003e 0CBF     		ite	eq
  83 0040 0420     		moveq	r0, #4
  84 0042 0020     		movne	r0, #0
  85 0044 0243     		orrs	r2, r2, r0
  86              	.LVL5:
 120:./inter_mcu.h ****   status |= (fbw_mode == FBW_MODE_FAILSAFE ? _BV(STATUS_MODE_FAILSAFE) : 0);
  87              		.loc 1 120 0
  88 0046 0229     		cmp	r1, #2
  89 0048 0CBF     		ite	eq
  90 004a 0821     		moveq	r1, #8
  91 004c 0021     		movne	r1, #0
  92              	.LVL6:
  93 004e 1143     		orrs	r1, r1, r2
  94              	.LVL7:
 121:./inter_mcu.h ****   fbw_state->status  = status;
 122:./inter_mcu.h **** 
 123:./inter_mcu.h ****   fbw_state->vsupply = electrical.vsupply;
  95              		.loc 1 123 0
  96 0050 074A     		ldr	r2, .L12+12
 121:./inter_mcu.h ****   fbw_state->status  = status;
  97              		.loc 1 121 0
  98 0052 5976     		strb	r1, [r3, #25]
  99              		.loc 1 123 0
 100 0054 1178     		ldrb	r1, [r2, #0]	@ zero_extendqisi2
 124:./inter_mcu.h ****   fbw_state->current = electrical.current;
 101              		.loc 1 124 0
 102 0056 5268     		ldr	r2, [r2, #4]
 123:./inter_mcu.h ****   fbw_state->vsupply = electrical.vsupply;
 103              		.loc 1 123 0
 104 0058 D976     		strb	r1, [r3, #27]
 105              		.loc 1 124 0
 106 005a DA61     		str	r2, [r3, #28]
 125:./inter_mcu.h **** #if defined SINGLE_MCU
 126:./inter_mcu.h ****   /**Directly set the flag indicating to AP that shared buffer is available*/
 127:./inter_mcu.h ****   inter_mcu_received_fbw = TRUE;
 107              		.loc 1 127 0
 108 005c 054B     		ldr	r3, .L12+16
 109 005e 0122     		movs	r2, #1
 110 0060 1A70     		strb	r2, [r3, #0]
 128:./inter_mcu.h **** #endif
 129:./inter_mcu.h **** }
 111              		.loc 1 129 0
 112 0062 10BD     		pop	{r4, pc}
 113              	.L13:
 114              		.align	2
 115              	.L12:
 116 0064 00000000 		.word	fbw_state
 117 0068 00000000 		.word	radio_control
 118 006c 00000000 		.word	.LANCHOR0
 119 0070 00000000 		.word	electrical
 120 0074 00000000 		.word	inter_mcu_received_fbw
 121              		.cfi_endproc
 122              	.LFE30:
 124              		.section	.text.handle_rc_frame,"ax",%progbits
 125              		.align	1
 126              		.thumb
 127              		.thumb_func
 129              	handle_rc_frame:
 130              	.LFB40:
 131              		.file 2 "firmwares/fixedwing/main_fbw.c"
   1:firmwares/fixedwing/main_fbw.c **** /*
   2:firmwares/fixedwing/main_fbw.c ****  * Paparazzi $Id$
   3:firmwares/fixedwing/main_fbw.c ****  *
   4:firmwares/fixedwing/main_fbw.c ****  * Copyright (C) 2003-2010 The Paparazzi Team
   5:firmwares/fixedwing/main_fbw.c ****  *
   6:firmwares/fixedwing/main_fbw.c ****  * This file is part of Paparazzi.
   7:firmwares/fixedwing/main_fbw.c ****  *
   8:firmwares/fixedwing/main_fbw.c ****  * Paparazzi is free software; you can redistribute it and/or modify
   9:firmwares/fixedwing/main_fbw.c ****  * it under the terms of the GNU General Public License as published by
  10:firmwares/fixedwing/main_fbw.c ****  * the Free Software Foundation; either version 2, or (at your option)
  11:firmwares/fixedwing/main_fbw.c ****  * any later version.
  12:firmwares/fixedwing/main_fbw.c ****  *
  13:firmwares/fixedwing/main_fbw.c ****  * Paparazzi is distributed in the hope that it will be useful,
  14:firmwares/fixedwing/main_fbw.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:firmwares/fixedwing/main_fbw.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:firmwares/fixedwing/main_fbw.c ****  * GNU General Public License for more details.
  17:firmwares/fixedwing/main_fbw.c ****  *
  18:firmwares/fixedwing/main_fbw.c ****  * You should have received a copy of the GNU General Public License
  19:firmwares/fixedwing/main_fbw.c ****  * along with Paparazzi; see the file COPYING.  If not, write to
  20:firmwares/fixedwing/main_fbw.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  21:firmwares/fixedwing/main_fbw.c ****  * Boston, MA 02111-1307, USA.
  22:firmwares/fixedwing/main_fbw.c ****  *
  23:firmwares/fixedwing/main_fbw.c ****  */
  24:firmwares/fixedwing/main_fbw.c **** 
  25:firmwares/fixedwing/main_fbw.c **** /** \file main_fbw.c
  26:firmwares/fixedwing/main_fbw.c ****  *  \brief FBW ( FlyByWire ) process
  27:firmwares/fixedwing/main_fbw.c ****  *
  28:firmwares/fixedwing/main_fbw.c ****  *   This process is responsible for decoding radio control, generating actuators
  29:firmwares/fixedwing/main_fbw.c ****  * signals either from the radio control or from the commands provided by the
  30:firmwares/fixedwing/main_fbw.c ****  * AP (autopilot) process. It also performs a telemetry task and a low level monitoring
  31:firmwares/fixedwing/main_fbw.c ****  * ( for parameters like the supply )
  32:firmwares/fixedwing/main_fbw.c ****  */
  33:firmwares/fixedwing/main_fbw.c **** 
  34:firmwares/fixedwing/main_fbw.c **** #include "generated/airframe.h"
  35:firmwares/fixedwing/main_fbw.c **** 
  36:firmwares/fixedwing/main_fbw.c **** #include "firmwares/fixedwing/main_fbw.h"
  37:firmwares/fixedwing/main_fbw.c **** #include "mcu.h"
  38:firmwares/fixedwing/main_fbw.c **** #include "mcu_periph/sys_time.h"
  39:firmwares/fixedwing/main_fbw.c **** #include "commands.h"
  40:firmwares/fixedwing/main_fbw.c **** #include "firmwares/fixedwing/actuators.h"
  41:firmwares/fixedwing/main_fbw.c **** #include "subsystems/electrical.h"
  42:firmwares/fixedwing/main_fbw.c **** #include "subsystems/radio_control.h"
  43:firmwares/fixedwing/main_fbw.c **** #include "firmwares/fixedwing/autopilot.h"
  44:firmwares/fixedwing/main_fbw.c **** #include "fbw_downlink.h"
  45:firmwares/fixedwing/main_fbw.c **** #include "paparazzi.h"
  46:firmwares/fixedwing/main_fbw.c **** #include "mcu_periph/i2c.h"
  47:firmwares/fixedwing/main_fbw.c **** 
  48:firmwares/fixedwing/main_fbw.c **** #ifdef MCU_SPI_LINK
  49:firmwares/fixedwing/main_fbw.c **** #include "link_mcu.h"
  50:firmwares/fixedwing/main_fbw.c **** #endif
  51:firmwares/fixedwing/main_fbw.c **** 
  52:firmwares/fixedwing/main_fbw.c **** uint8_t fbw_mode;
  53:firmwares/fixedwing/main_fbw.c **** 
  54:firmwares/fixedwing/main_fbw.c **** #include "inter_mcu.h"
  55:firmwares/fixedwing/main_fbw.c **** 
  56:firmwares/fixedwing/main_fbw.c **** 
  57:firmwares/fixedwing/main_fbw.c **** volatile uint8_t fbw_new_actuators = 0;
  58:firmwares/fixedwing/main_fbw.c **** 
  59:firmwares/fixedwing/main_fbw.c **** tid_t fbw_periodic_tid; ///< id for periodic_task_fbw() timer
  60:firmwares/fixedwing/main_fbw.c **** tid_t electrical_tid;   ///< id for electrical_periodic() timer
  61:firmwares/fixedwing/main_fbw.c **** 
  62:firmwares/fixedwing/main_fbw.c **** /********** INIT *************************************************************/
  63:firmwares/fixedwing/main_fbw.c **** void init_fbw( void ) {
  64:firmwares/fixedwing/main_fbw.c **** 
  65:firmwares/fixedwing/main_fbw.c ****   mcu_init();
  66:firmwares/fixedwing/main_fbw.c **** 
  67:firmwares/fixedwing/main_fbw.c ****   electrical_init();
  68:firmwares/fixedwing/main_fbw.c **** 
  69:firmwares/fixedwing/main_fbw.c **** #ifdef ACTUATORS
  70:firmwares/fixedwing/main_fbw.c ****   actuators_init();
  71:firmwares/fixedwing/main_fbw.c ****   /* Load the failsafe defaults */
  72:firmwares/fixedwing/main_fbw.c ****   SetCommands(commands_failsafe);
  73:firmwares/fixedwing/main_fbw.c ****   fbw_new_actuators = 1;
  74:firmwares/fixedwing/main_fbw.c **** #endif
  75:firmwares/fixedwing/main_fbw.c **** #ifdef RADIO_CONTROL
  76:firmwares/fixedwing/main_fbw.c ****   radio_control_init();
  77:firmwares/fixedwing/main_fbw.c **** #endif
  78:firmwares/fixedwing/main_fbw.c **** #ifdef INTER_MCU
  79:firmwares/fixedwing/main_fbw.c ****   inter_mcu_init();
  80:firmwares/fixedwing/main_fbw.c **** #endif
  81:firmwares/fixedwing/main_fbw.c **** #ifdef MCU_SPI_LINK
  82:firmwares/fixedwing/main_fbw.c ****   link_mcu_restart();
  83:firmwares/fixedwing/main_fbw.c **** #endif
  84:firmwares/fixedwing/main_fbw.c **** 
  85:firmwares/fixedwing/main_fbw.c ****   fbw_mode = FBW_MODE_FAILSAFE;
  86:firmwares/fixedwing/main_fbw.c **** 
  87:firmwares/fixedwing/main_fbw.c ****   /**** start timers for periodic functions *****/
  88:firmwares/fixedwing/main_fbw.c ****   fbw_periodic_tid = sys_time_register_timer((1./60.), NULL);
  89:firmwares/fixedwing/main_fbw.c ****   electrical_tid = sys_time_register_timer(0.1, NULL);
  90:firmwares/fixedwing/main_fbw.c **** 
  91:firmwares/fixedwing/main_fbw.c **** #ifndef SINGLE_MCU
  92:firmwares/fixedwing/main_fbw.c ****   mcu_int_enable();
  93:firmwares/fixedwing/main_fbw.c **** #endif
  94:firmwares/fixedwing/main_fbw.c **** }
  95:firmwares/fixedwing/main_fbw.c **** 
  96:firmwares/fixedwing/main_fbw.c **** 
  97:firmwares/fixedwing/main_fbw.c **** static inline void set_failsafe_mode( void ) {
  98:firmwares/fixedwing/main_fbw.c ****   fbw_mode = FBW_MODE_FAILSAFE;
  99:firmwares/fixedwing/main_fbw.c ****   SetCommands(commands_failsafe);
 100:firmwares/fixedwing/main_fbw.c ****   fbw_new_actuators = 1;
 101:firmwares/fixedwing/main_fbw.c **** }
 102:firmwares/fixedwing/main_fbw.c **** 
 103:firmwares/fixedwing/main_fbw.c **** 
 104:firmwares/fixedwing/main_fbw.c **** #ifdef RADIO_CONTROL
 105:firmwares/fixedwing/main_fbw.c **** static inline void handle_rc_frame( void ) {
 132              		.loc 2 105 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 106:firmwares/fixedwing/main_fbw.c ****   fbw_mode = FBW_MODE_OF_PPRZ(radio_control.values[RADIO_MODE]);
 137              		.loc 2 106 0
 138 0000 0B4B     		ldr	r3, .L16
 139 0002 0C49     		ldr	r1, .L16+4
 140 0004 B3F91020 		ldrsh	r2, [r3, #16]
 141 0008 12F5965F 		cmn	r2, #4800
 142 000c B4BF     		ite	lt
 143 000e 0022     		movlt	r2, #0
 144 0010 0122     		movge	r2, #1
 145 0012 0A70     		strb	r2, [r1, #0]
 107:firmwares/fixedwing/main_fbw.c ****   if (fbw_mode == FBW_MODE_MANUAL)
 146              		.loc 2 107 0
 147 0014 5AB9     		cbnz	r2, .L14
 148              	.LBB25:
 149              	.LBB26:
 108:firmwares/fixedwing/main_fbw.c ****   {
 109:firmwares/fixedwing/main_fbw.c ****     SetCommandsFromRC(commands, radio_control.values);
 150              		.loc 2 109 0
 151 0016 084A     		ldr	r2, .L16+8
 152 0018 1989     		ldrh	r1, [r3, #8]
 153 001a 5180     		strh	r1, [r2, #2]	@ movhi
 154 001c 5989     		ldrh	r1, [r3, #10]
 155 001e 9180     		strh	r1, [r2, #4]	@ movhi
 156 0020 D988     		ldrh	r1, [r3, #6]
 157 0022 9B89     		ldrh	r3, [r3, #12]
 158 0024 1180     		strh	r1, [r2, #0]	@ movhi
 159 0026 D380     		strh	r3, [r2, #6]	@ movhi
 110:firmwares/fixedwing/main_fbw.c ****     fbw_new_actuators = 1;
 160              		.loc 2 110 0
 161 0028 044B     		ldr	r3, .L16+12
 162 002a 0122     		movs	r2, #1
 163 002c 1A70     		strb	r2, [r3, #0]
 164              	.L14:
 165 002e 7047     		bx	lr
 166              	.L17:
 167              		.align	2
 168              	.L16:
 169 0030 00000000 		.word	radio_control
 170 0034 00000000 		.word	.LANCHOR0
 171 0038 00000000 		.word	commands
 172 003c 00000000 		.word	.LANCHOR1
 173              	.LBE26:
 174              	.LBE25:
 175              		.cfi_endproc
 176              	.LFE40:
 178              		.section	.text.init_fbw,"ax",%progbits
 179              		.align	1
 180              		.global	init_fbw
 181              		.thumb
 182              		.thumb_func
 184              	init_fbw:
 185              	.LFB38:
  63:firmwares/fixedwing/main_fbw.c **** void init_fbw( void ) {
 186              		.loc 2 63 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190 0000 70B5     		push	{r4, r5, r6, lr}
 191              	.LCFI1:
 192              		.cfi_def_cfa_offset 16
 193              		.cfi_offset 14, -4
 194              		.cfi_offset 6, -8
 195              		.cfi_offset 5, -12
 196              		.cfi_offset 4, -16
  65:firmwares/fixedwing/main_fbw.c ****   mcu_init();
 197              		.loc 2 65 0
 198 0002 FFF7FEFF 		bl	mcu_init
  67:firmwares/fixedwing/main_fbw.c ****   electrical_init();
 199              		.loc 2 67 0
 200 0006 FFF7FEFF 		bl	electrical_init
  70:firmwares/fixedwing/main_fbw.c ****   actuators_init();
 201              		.loc 2 70 0
 202 000a FFF7FEFF 		bl	actuators_init
 203              	.LVL8:
 204              	.LBB27:
  72:firmwares/fixedwing/main_fbw.c ****   SetCommands(commands_failsafe);
 205              		.loc 2 72 0
 206 000e 1B4A     		ldr	r2, .L21
 207 0010 1B4B     		ldr	r3, .L21+4
 208 0012 1188     		ldrh	r1, [r2, #0]
 209              	.LBE27:
 210              	.LBB28:
 211              	.LBB29:
  63:firmwares/fixedwing/main_fbw.c **** void init_fbw( void ) {
 212              		.loc 2 63 0
 213 0014 1B48     		ldr	r0, .L21+8
 214              	.LBE29:
 215              	.LBE28:
 216              	.LBB31:
  72:firmwares/fixedwing/main_fbw.c ****   SetCommands(commands_failsafe);
 217              		.loc 2 72 0
 218 0016 1980     		strh	r1, [r3, #0]	@ movhi
 219              	.LVL9:
 220 0018 5188     		ldrh	r1, [r2, #2]
 221 001a 5980     		strh	r1, [r3, #2]	@ movhi
 222              	.LVL10:
 223 001c 9188     		ldrh	r1, [r2, #4]
 224 001e D288     		ldrh	r2, [r2, #6]
 225 0020 9980     		strh	r1, [r3, #4]	@ movhi
 226              	.LVL11:
 227 0022 DA80     		strh	r2, [r3, #6]	@ movhi
 228              	.LVL12:
 229              	.LBE31:
  73:firmwares/fixedwing/main_fbw.c ****   fbw_new_actuators = 1;
 230              		.loc 2 73 0
 231 0024 184B     		ldr	r3, .L21+12
 232 0026 0122     		movs	r2, #1
 233 0028 1A70     		strb	r2, [r3, #0]
 234              	.LVL13:
 235 002a 0022     		movs	r2, #0
 236              	.LBB32:
 237              	.LBB30:
 238              		.file 3 "./subsystems/radio_control.h"
   1:./subsystems/radio_control.h **** /*
   2:./subsystems/radio_control.h ****  * Paparazzi $Id$
   3:./subsystems/radio_control.h ****  *
   4:./subsystems/radio_control.h ****  * Copyright (C) 2006 Pascal Brisset, Antoine Drouin
   5:./subsystems/radio_control.h ****  *
   6:./subsystems/radio_control.h ****  * This file is part of paparazzi.
   7:./subsystems/radio_control.h ****  *
   8:./subsystems/radio_control.h ****  * paparazzi is free software; you can redistribute it and/or modify
   9:./subsystems/radio_control.h ****  * it under the terms of the GNU General Public License as published by
  10:./subsystems/radio_control.h ****  * the Free Software Foundation; either version 2, or (at your option)
  11:./subsystems/radio_control.h ****  * any later version.
  12:./subsystems/radio_control.h ****  *
  13:./subsystems/radio_control.h ****  * paparazzi is distributed in the hope that it will be useful,
  14:./subsystems/radio_control.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:./subsystems/radio_control.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:./subsystems/radio_control.h ****  * GNU General Public License for more details.
  17:./subsystems/radio_control.h ****  *
  18:./subsystems/radio_control.h ****  * You should have received a copy of the GNU General Public License
  19:./subsystems/radio_control.h ****  * along with paparazzi; see the file COPYING.  If not, write to
  20:./subsystems/radio_control.h ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  21:./subsystems/radio_control.h ****  * Boston, MA 02111-1307, USA.
  22:./subsystems/radio_control.h ****  *
  23:./subsystems/radio_control.h ****  */
  24:./subsystems/radio_control.h **** 
  25:./subsystems/radio_control.h **** #ifndef RADIO_CONTROL_H
  26:./subsystems/radio_control.h **** #define RADIO_CONTROL_H
  27:./subsystems/radio_control.h **** 
  28:./subsystems/radio_control.h **** #if defined RADIO_CONTROL
  29:./subsystems/radio_control.h **** 
  30:./subsystems/radio_control.h **** #include "led.h"
  31:./subsystems/radio_control.h **** #include "generated/airframe.h"
  32:./subsystems/radio_control.h **** #include "paparazzi.h"
  33:./subsystems/radio_control.h **** 
  34:./subsystems/radio_control.h **** /* underlying hardware */
  35:./subsystems/radio_control.h **** #include RADIO_CONTROL_TYPE_H
  36:./subsystems/radio_control.h **** /* must be defined by underlying hardware */
  37:./subsystems/radio_control.h **** extern void radio_control_impl_init(void);
  38:./subsystems/radio_control.h **** /* RADIO_CONTROL_NB_CHANNEL has to be defined by the implementation */
  39:./subsystems/radio_control.h **** 
  40:./subsystems/radio_control.h **** /* timeouts - for now assumes 60Hz periodic */
  41:./subsystems/radio_control.h **** #define RC_AVG_PERIOD 8  /* TODO remove if IIR filter is used */
  42:./subsystems/radio_control.h **** #define RC_LOST_TIME 30  /* 500ms with a 60Hz timer */
  43:./subsystems/radio_control.h **** #define RC_REALLY_LOST_TIME 60 /* ~1s */
  44:./subsystems/radio_control.h **** /* Number of valid frames before going back to RC OK */
  45:./subsystems/radio_control.h **** #define RC_OK_CPT 15
  46:./subsystems/radio_control.h **** 
  47:./subsystems/radio_control.h **** #define RC_OK          0
  48:./subsystems/radio_control.h **** #define RC_LOST        1
  49:./subsystems/radio_control.h **** #define RC_REALLY_LOST 2
  50:./subsystems/radio_control.h **** 
  51:./subsystems/radio_control.h **** struct RadioControl {
  52:./subsystems/radio_control.h ****   uint8_t status;
  53:./subsystems/radio_control.h ****   uint8_t time_since_last_frame;
  54:./subsystems/radio_control.h ****   uint8_t radio_ok_cpt;
  55:./subsystems/radio_control.h ****   uint8_t frame_rate;
  56:./subsystems/radio_control.h ****   uint8_t frame_cpt;
  57:./subsystems/radio_control.h ****   pprz_t  values[RADIO_CONTROL_NB_CHANNEL];
  58:./subsystems/radio_control.h **** };
  59:./subsystems/radio_control.h **** 
  60:./subsystems/radio_control.h **** extern struct RadioControl radio_control;
  61:./subsystems/radio_control.h **** 
  62:./subsystems/radio_control.h **** 
  63:./subsystems/radio_control.h **** /************* INIT ******************************************************/
  64:./subsystems/radio_control.h **** static inline void radio_control_init ( void ) {
  65:./subsystems/radio_control.h ****   uint8_t i;
  66:./subsystems/radio_control.h ****   for (i=0; i<RADIO_CONTROL_NB_CHANNEL; i++)
  67:./subsystems/radio_control.h ****     radio_control.values[i] = 0;
 239              		.loc 3 67 0
 240 002c 1146     		mov	r1, r2
 241              	.LVL14:
 242              	.L19:
  63:firmwares/fixedwing/main_fbw.c **** void init_fbw( void ) {
 243              		.loc 2 63 0
 244 002e 1618     		adds	r6, r2, r0
 245              		.loc 3 67 0
 246 0030 0232     		adds	r2, r2, #2
 247 0032 0024     		movs	r4, #0
  66:./subsystems/radio_control.h ****   for (i=0; i<RADIO_CONTROL_NB_CHANNEL; i++)
 248              		.loc 3 66 0
 249 0034 182A     		cmp	r2, #24
  63:firmwares/fixedwing/main_fbw.c **** void init_fbw( void ) {
 250              		.loc 2 63 0
 251 0036 134B     		ldr	r3, .L21+8
 252              		.loc 3 67 0
 253 0038 2546     		mov	r5, r4	@ movhi
 254 003a F180     		strh	r1, [r6, #6]	@ movhi
  66:./subsystems/radio_control.h ****   for (i=0; i<RADIO_CONTROL_NB_CHANNEL; i++)
 255              		.loc 3 66 0
 256 003c F7D1     		bne	.L19
  68:./subsystems/radio_control.h ****   radio_control.status = RC_REALLY_LOST;
  69:./subsystems/radio_control.h ****   radio_control.time_since_last_frame = RC_REALLY_LOST_TIME;
 257              		.loc 3 69 0
 258 003e 3C22     		movs	r2, #60
  68:./subsystems/radio_control.h ****   radio_control.status = RC_REALLY_LOST;
 259              		.loc 3 68 0
 260 0040 0226     		movs	r6, #2
 261              		.loc 3 69 0
 262 0042 5A70     		strb	r2, [r3, #1]
  68:./subsystems/radio_control.h ****   radio_control.status = RC_REALLY_LOST;
 263              		.loc 3 68 0
 264 0044 1E70     		strb	r6, [r3, #0]
  70:./subsystems/radio_control.h ****   radio_control.radio_ok_cpt = 0;
 265              		.loc 3 70 0
 266 0046 9C70     		strb	r4, [r3, #2]
  71:./subsystems/radio_control.h ****   radio_control.frame_rate = 0;
 267              		.loc 3 71 0
 268 0048 DC70     		strb	r4, [r3, #3]
  72:./subsystems/radio_control.h ****   radio_control.frame_cpt = 0;
 269              		.loc 3 72 0
 270 004a 1C71     		strb	r4, [r3, #4]
  73:./subsystems/radio_control.h ****   radio_control_impl_init();
 271              		.loc 3 73 0
 272 004c FFF7FEFF 		bl	radio_control_impl_init
 273              	.LBE30:
 274              	.LBE32:
 275              	.LBB33:
 276              	.LBB34:
  96:./inter_mcu.h ****   fbw_state->status = 0;
 277              		.loc 1 96 0
 278 0050 0E4B     		ldr	r3, .L21+16
 279              	.LBE34:
 280              	.LBE33:
  88:firmwares/fixedwing/main_fbw.c ****   fbw_periodic_tid = sys_time_register_timer((1./60.), NULL);
 281              		.loc 2 88 0
 282 0052 2146     		mov	r1, r4
 283              	.LBB37:
 284              	.LBB35:
  96:./inter_mcu.h ****   fbw_state->status = 0;
 285              		.loc 1 96 0
 286 0054 1B68     		ldr	r3, [r3, #0]
 287              	.LBE35:
 288              	.LBE37:
  88:firmwares/fixedwing/main_fbw.c ****   fbw_periodic_tid = sys_time_register_timer((1./60.), NULL);
 289              		.loc 2 88 0
 290 0056 0E48     		ldr	r0, .L21+20
 291              	.LBB38:
 292              	.LBB36:
  96:./inter_mcu.h ****   fbw_state->status = 0;
 293              		.loc 1 96 0
 294 0058 5C76     		strb	r4, [r3, #25]
  97:./inter_mcu.h ****   fbw_state->nb_err = 0;
 295              		.loc 1 97 0
 296 005a 9C76     		strb	r4, [r3, #26]
  99:./inter_mcu.h ****   ap_ok = FALSE;
 297              		.loc 1 99 0
 298 005c 0D4B     		ldr	r3, .L21+24
 299 005e 1C70     		strb	r4, [r3, #0]
 300              	.LBE36:
 301              	.LBE38:
  85:firmwares/fixedwing/main_fbw.c ****   fbw_mode = FBW_MODE_FAILSAFE;
 302              		.loc 2 85 0
 303 0060 0D4B     		ldr	r3, .L21+28
 304 0062 1E70     		strb	r6, [r3, #0]
  88:firmwares/fixedwing/main_fbw.c ****   fbw_periodic_tid = sys_time_register_timer((1./60.), NULL);
 305              		.loc 2 88 0
 306 0064 FFF7FEFF 		bl	sys_time_register_timer
 307 0068 0C4B     		ldr	r3, .L21+32
  89:firmwares/fixedwing/main_fbw.c ****   electrical_tid = sys_time_register_timer(0.1, NULL);
 308              		.loc 2 89 0
 309 006a 2146     		mov	r1, r4
  88:firmwares/fixedwing/main_fbw.c ****   fbw_periodic_tid = sys_time_register_timer((1./60.), NULL);
 310              		.loc 2 88 0
 311 006c 1870     		strb	r0, [r3, #0]
  89:firmwares/fixedwing/main_fbw.c ****   electrical_tid = sys_time_register_timer(0.1, NULL);
 312              		.loc 2 89 0
 313 006e 0C48     		ldr	r0, .L21+36
 314 0070 FFF7FEFF 		bl	sys_time_register_timer
 315 0074 0B4B     		ldr	r3, .L21+40
 316 0076 1870     		strb	r0, [r3, #0]
  94:firmwares/fixedwing/main_fbw.c **** }
 317              		.loc 2 94 0
 318 0078 70BD     		pop	{r4, r5, r6, pc}
 319              	.L22:
 320 007a 00BF     		.align	2
 321              	.L21:
 322 007c 00000000 		.word	commands_failsafe
 323 0080 00000000 		.word	commands
 324 0084 00000000 		.word	radio_control
 325 0088 00000000 		.word	.LANCHOR1
 326 008c 00000000 		.word	fbw_state
 327 0090 8988883C 		.word	1015580809
 328 0094 00000000 		.word	ap_ok
 329 0098 00000000 		.word	.LANCHOR0
 330 009c 00000000 		.word	.LANCHOR2
 331 00a0 CDCCCC3D 		.word	1036831949
 332 00a4 00000000 		.word	.LANCHOR3
 333              		.cfi_endproc
 334              	.LFE38:
 336              		.global	__aeabi_i2f
 337              		.global	__aeabi_f2d
 338              		.global	__aeabi_fcmpgt
 339              		.global	__aeabi_dmul
 340              		.global	__aeabi_d2f
 341              		.global	__aeabi_f2iz
 342              		.global	__aeabi_i2d
 343              		.global	__aeabi_dadd
 344              		.section	.text.event_task_fbw,"ax",%progbits
 345              		.align	1
 346              		.global	event_task_fbw
 347              		.thumb
 348              		.thumb_func
 350              	event_task_fbw:
 351              	.LFB41:
 111:firmwares/fixedwing/main_fbw.c ****   }
 112:firmwares/fixedwing/main_fbw.c **** }
 113:firmwares/fixedwing/main_fbw.c **** #endif
 114:firmwares/fixedwing/main_fbw.c **** 
 115:firmwares/fixedwing/main_fbw.c **** 
 116:firmwares/fixedwing/main_fbw.c **** /********** EVENT ************************************************************/
 117:firmwares/fixedwing/main_fbw.c **** 
 118:firmwares/fixedwing/main_fbw.c **** void event_task_fbw( void) {
 352              		.loc 2 118 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 357              	.LCFI2:
 358              		.cfi_def_cfa_offset 32
 359              		.cfi_offset 14, -4
 360              		.cfi_offset 9, -8
 361              		.cfi_offset 8, -12
 362              		.cfi_offset 7, -16
 363              		.cfi_offset 6, -20
 364              		.cfi_offset 5, -24
 365              		.cfi_offset 4, -28
 366              		.cfi_offset 3, -32
 119:firmwares/fixedwing/main_fbw.c **** #ifdef RADIO_CONTROL
 120:firmwares/fixedwing/main_fbw.c ****   RadioControlEvent(handle_rc_frame);
 367              		.loc 2 120 0
 368 0004 A648     		ldr	r0, .L57+56
 369 0006 FFF7FEFF 		bl	RadioControlEventImp
 121:firmwares/fixedwing/main_fbw.c **** #endif
 122:firmwares/fixedwing/main_fbw.c **** 
 123:firmwares/fixedwing/main_fbw.c ****   i2c_event();
 370              		.loc 2 123 0
 371 000a FFF7FEFF 		bl	i2c_event
 124:firmwares/fixedwing/main_fbw.c **** 
 125:firmwares/fixedwing/main_fbw.c **** #ifdef INTER_MCU
 126:firmwares/fixedwing/main_fbw.c **** #ifdef MCU_SPI_LINK
 127:firmwares/fixedwing/main_fbw.c ****     link_mcu_event_task();
 128:firmwares/fixedwing/main_fbw.c **** #endif /* MCU_SPI_LINK */
 129:firmwares/fixedwing/main_fbw.c **** 
 130:firmwares/fixedwing/main_fbw.c **** 
 131:firmwares/fixedwing/main_fbw.c ****   if (inter_mcu_received_ap) {
 372              		.loc 2 131 0
 373 000e A54B     		ldr	r3, .L57+60
 374 0010 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 375 0012 002A     		cmp	r2, #0
 376 0014 24D0     		beq	.L24
 132:firmwares/fixedwing/main_fbw.c ****     inter_mcu_received_ap = FALSE;
 377              		.loc 2 132 0
 378 0016 0022     		movs	r2, #0
 379 0018 1A70     		strb	r2, [r3, #0]
 380              	.LBB39:
 381              	.LBB40:
 130:./inter_mcu.h **** 
 131:./inter_mcu.h **** /** Prepares date for next comm with AP. Set ::ap_ok to TRUE */
 132:./inter_mcu.h **** static inline void inter_mcu_event_task( void) {
 133:./inter_mcu.h ****   time_since_last_ap = 0;
 382              		.loc 1 133 0
 383 001a A34B     		ldr	r3, .L57+64
 134:./inter_mcu.h ****   ap_ok = TRUE;
 384              		.loc 1 134 0
 385 001c 0121     		movs	r1, #1
 133:./inter_mcu.h ****   time_since_last_ap = 0;
 386              		.loc 1 133 0
 387 001e 1A70     		strb	r2, [r3, #0]
 388              		.loc 1 134 0
 389 0020 A24B     		ldr	r3, .L57+68
 390              	.LBE40:
 391              	.LBE39:
 133:firmwares/fixedwing/main_fbw.c ****     inter_mcu_event_task();
 134:firmwares/fixedwing/main_fbw.c ****     command_roll_trim = ap_state->command_roll_trim;
 392              		.loc 2 134 0
 393 0022 A34A     		ldr	r2, .L57+72
 394              	.LBB42:
 395              	.LBB41:
 396              		.loc 1 134 0
 397 0024 1970     		strb	r1, [r3, #0]
 398              	.LBE41:
 399              	.LBE42:
 400              		.loc 2 134 0
 401 0026 A34B     		ldr	r3, .L57+76
 402 0028 1B68     		ldr	r3, [r3, #0]
 403 002a 1889     		ldrh	r0, [r3, #8]
 404 002c 1080     		strh	r0, [r2, #0]	@ movhi
 135:firmwares/fixedwing/main_fbw.c ****     command_pitch_trim = ap_state->command_pitch_trim;
 405              		.loc 2 135 0
 406 002e 5889     		ldrh	r0, [r3, #10]
 407 0030 A14A     		ldr	r2, .L57+80
 408 0032 1080     		strh	r0, [r2, #0]	@ movhi
 136:firmwares/fixedwing/main_fbw.c ****     if (ap_ok && fbw_mode == FBW_MODE_FAILSAFE) {
 409              		.loc 2 136 0
 410 0034 A14A     		ldr	r2, .L57+84
 411 0036 1078     		ldrb	r0, [r2, #0]	@ zero_extendqisi2
 412 0038 0228     		cmp	r0, #2
 137:firmwares/fixedwing/main_fbw.c ****       fbw_mode = FBW_MODE_AUTO;
 413              		.loc 2 137 0
 414 003a 08BF     		it	eq
 415 003c 1170     		strbeq	r1, [r2, #0]
 138:firmwares/fixedwing/main_fbw.c ****     }
 139:firmwares/fixedwing/main_fbw.c ****     if (fbw_mode == FBW_MODE_AUTO) {
 416              		.loc 2 139 0
 417 003e 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 418 0040 012A     		cmp	r2, #1
 419 0042 08D1     		bne	.L26
 420              	.LBB43:
 140:firmwares/fixedwing/main_fbw.c ****       SetCommands(ap_state->commands);
 421              		.loc 2 140 0
 422 0044 1988     		ldrh	r1, [r3, #0]
 423 0046 9E4A     		ldr	r2, .L57+88
 424 0048 1180     		strh	r1, [r2, #0]	@ movhi
 425              	.LVL15:
 426 004a 5988     		ldrh	r1, [r3, #2]
 427 004c 5180     		strh	r1, [r2, #2]	@ movhi
 428              	.LVL16:
 429 004e 9988     		ldrh	r1, [r3, #4]
 430 0050 DB88     		ldrh	r3, [r3, #6]
 431 0052 9180     		strh	r1, [r2, #4]	@ movhi
 432              	.LVL17:
 433 0054 D380     		strh	r3, [r2, #6]	@ movhi
 434              	.LVL18:
 435              	.L26:
 436              	.LBE43:
 141:firmwares/fixedwing/main_fbw.c ****     }
 142:firmwares/fixedwing/main_fbw.c **** #ifdef SetApOnlyCommands
 143:firmwares/fixedwing/main_fbw.c ****     else
 144:firmwares/fixedwing/main_fbw.c ****     {
 145:firmwares/fixedwing/main_fbw.c ****       SetApOnlyCommands(ap_state->commands);
 146:firmwares/fixedwing/main_fbw.c ****     }
 147:firmwares/fixedwing/main_fbw.c **** #endif
 148:firmwares/fixedwing/main_fbw.c ****     fbw_new_actuators = 1;
 437              		.loc 2 148 0
 438 0056 9B4B     		ldr	r3, .L57+92
 439 0058 0122     		movs	r2, #1
 440 005a 1A70     		strb	r2, [r3, #0]
 149:firmwares/fixedwing/main_fbw.c **** 
 150:firmwares/fixedwing/main_fbw.c **** #ifdef SINGLE_MCU
 151:firmwares/fixedwing/main_fbw.c ****     inter_mcu_fill_fbw_state();
 441              		.loc 2 151 0
 442 005c FFF7FEFF 		bl	inter_mcu_fill_fbw_state
 443              	.L24:
 152:firmwares/fixedwing/main_fbw.c **** #endif /**Else the buffer is filled even if the last receive was not correct */
 153:firmwares/fixedwing/main_fbw.c ****   }
 154:firmwares/fixedwing/main_fbw.c **** 
 155:firmwares/fixedwing/main_fbw.c **** #ifdef ACTUATORS
 156:firmwares/fixedwing/main_fbw.c ****   if (fbw_new_actuators > 0)
 444              		.loc 2 156 0
 445 0060 984B     		ldr	r3, .L57+92
 446 0062 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 447 0064 002B     		cmp	r3, #0
 448 0066 00F0FA80 		beq	.L23
 449              	.LVL19:
 450              	.LBB44:
 157:firmwares/fixedwing/main_fbw.c ****   {
 158:firmwares/fixedwing/main_fbw.c ****     pprz_t trimmed_commands[COMMANDS_NB];
 159:firmwares/fixedwing/main_fbw.c ****     int i;
 160:firmwares/fixedwing/main_fbw.c ****     for(i = 0; i < COMMANDS_NB; i++) trimmed_commands[i] = commands[i];
 161:firmwares/fixedwing/main_fbw.c **** 
 162:firmwares/fixedwing/main_fbw.c ****     #ifdef COMMAND_ROLL
 163:firmwares/fixedwing/main_fbw.c ****     trimmed_commands[COMMAND_ROLL] += ChopAbs(command_roll_trim, MAX_PPRZ/10);
 451              		.loc 2 163 0 discriminator 1
 452 006a 914A     		ldr	r2, .L57+72
 160:firmwares/fixedwing/main_fbw.c ****     for(i = 0; i < COMMANDS_NB; i++) trimmed_commands[i] = commands[i];
 453              		.loc 2 160 0 discriminator 1
 454 006c 944B     		ldr	r3, .L57+88
 455              		.loc 2 163 0 discriminator 1
 456 006e B2F90020 		ldrsh	r2, [r2, #0]
 160:firmwares/fixedwing/main_fbw.c ****     for(i = 0; i < COMMANDS_NB; i++) trimmed_commands[i] = commands[i];
 457              		.loc 2 160 0 discriminator 1
 458 0072 1888     		ldrh	r0, [r3, #0]
 459              	.LVL20:
 460              		.loc 2 163 0 discriminator 1
 461 0074 12F5707F 		cmn	r2, #960
 160:firmwares/fixedwing/main_fbw.c ****     for(i = 0; i < COMMANDS_NB; i++) trimmed_commands[i] = commands[i];
 462              		.loc 2 160 0 discriminator 1
 463 0078 9C88     		ldrh	r4, [r3, #4]
 464              	.LVL21:
 465 007a DD88     		ldrh	r5, [r3, #6]
 466              	.LVL22:
 467              		.loc 2 163 0 discriminator 1
 468 007c 5B88     		ldrh	r3, [r3, #2]
 469 007e 07DB     		blt	.L41
 470 0080 B2F5707F 		cmp	r2, #960
 471 0084 B4BF     		ite	lt
 472 0086 1646     		movlt	r6, r2
 473 0088 4FF47076 		movge	r6, #960
 474 008c B6B2     		uxth	r6, r6
 475 008e 01E0     		b	.L28
 476              	.L41:
 477              		.loc 2 163 0 is_stmt 0
 478 0090 4FF64046 		movw	r6, #64576
 479              	.L28:
 480              		.loc 2 163 0 discriminator 3
 481 0094 F618     		adds	r6, r6, r3
 164:firmwares/fixedwing/main_fbw.c ****     #endif
 165:firmwares/fixedwing/main_fbw.c ****     #ifdef COMMAND_PITCH
 166:firmwares/fixedwing/main_fbw.c ****     trimmed_commands[COMMAND_PITCH] += ChopAbs(command_pitch_trim, MAX_PPRZ/10);
 482              		.loc 2 166 0 is_stmt 1 discriminator 3
 483 0096 884B     		ldr	r3, .L57+80
 163:firmwares/fixedwing/main_fbw.c ****     trimmed_commands[COMMAND_ROLL] += ChopAbs(command_roll_trim, MAX_PPRZ/10);
 484              		.loc 2 163 0 discriminator 3
 485 0098 B6B2     		uxth	r6, r6
 486              		.loc 2 166 0 discriminator 3
 487 009a B3F90020 		ldrsh	r2, [r3, #0]
 488 009e A4B2     		uxth	r4, r4
 489 00a0 12F5707F 		cmn	r2, #960
 490 00a4 07DB     		blt	.L42
 491              		.loc 2 166 0 is_stmt 0 discriminator 1
 492 00a6 B2F5707F 		cmp	r2, #960
 493 00aa B4BF     		ite	lt
 494 00ac 1346     		movlt	r3, r2
 495 00ae 4FF47073 		movge	r3, #960
 496 00b2 9BB2     		uxth	r3, r3
 497 00b4 01E0     		b	.L29
 498              	.L42:
 499              		.loc 2 166 0
 500 00b6 4FF64043 		movw	r3, #64576
 501              	.L29:
 502              	.LBB45:
 167:firmwares/fixedwing/main_fbw.c ****     #endif
 168:firmwares/fixedwing/main_fbw.c **** 
 169:firmwares/fixedwing/main_fbw.c ****     SetActuatorsFromCommands(trimmed_commands);
 503              		.loc 2 169 0 is_stmt 1 discriminator 3
 504 00ba 00B2     		sxth	r0, r0
 505              	.LBE45:
 166:firmwares/fixedwing/main_fbw.c ****     trimmed_commands[COMMAND_PITCH] += ChopAbs(command_pitch_trim, MAX_PPRZ/10);
 506              		.loc 2 166 0 discriminator 3
 507 00bc 1C19     		adds	r4, r3, r4
 508              	.LBB46:
 509              		.loc 2 169 0 discriminator 3
 510 00be FFF7FEFF 		bl	__aeabi_i2f
 511 00c2 0746     		mov	r7, r0
 512              	.LVL23:
 513 00c4 FFF7FEFF 		bl	__aeabi_f2d
 514              	.LVL24:
 515 00c8 8046     		mov	r8, r0
 516 00ca 8946     		mov	r9, r1
 517 00cc 3846     		mov	r0, r7
 518 00ce 0021     		movs	r1, #0
 519              	.LBE46:
 166:firmwares/fixedwing/main_fbw.c ****     trimmed_commands[COMMAND_PITCH] += ChopAbs(command_pitch_trim, MAX_PPRZ/10);
 520              		.loc 2 166 0 discriminator 3
 521 00d0 A4B2     		uxth	r4, r4
 522              	.LBB47:
 523              		.loc 2 169 0 discriminator 3
 524 00d2 FFF7FEFF 		bl	__aeabi_fcmpgt
 525 00d6 18B1     		cbz	r0, .L54
 526              		.loc 2 169 0 is_stmt 0
 527 00d8 63A3     		adr	r3, .L57
 528 00da D3E90023 		ldrd	r2, [r3]
 529 00de 01E0     		b	.L30
 530              	.L54:
 531 00e0 0022     		movs	r2, #0
 532 00e2 0023     		movs	r3, #0
 533              	.L30:
 534              	.LVL25:
 535              		.loc 2 169 0 discriminator 3
 536 00e4 4046     		mov	r0, r8
 537 00e6 4946     		mov	r1, r9
 538 00e8 FFF7FEFF 		bl	__aeabi_dmul
 539              	.LVL26:
 540 00ec FFF7FEFF 		bl	__aeabi_d2f
 541 00f0 FFF7FEFF 		bl	__aeabi_f2iz
 542              	.LVL27:
 543 00f4 10F58C63 		adds	r3, r0, #1120
 544 00f8 06D2     		bcs	.L44
 545              		.loc 2 169 0 discriminator 4
 546 00fa B3F5F06F 		cmp	r3, #1920
 547 00fe 28BF     		it	cs
 548 0100 4FF4F063 		movcs	r3, #1920
 549 0104 9BB2     		uxth	r3, r3
 550 0106 01E0     		b	.L32
 551              	.L44:
 552              		.loc 2 169 0
 553 0108 4FF48C63 		mov	r3, #1120
 554              	.L32:
 555              		.loc 2 169 0 discriminator 6
 556 010c 6E4A     		ldr	r2, .L57+96
 557 010e 20B2     		sxth	r0, r4
 558              	.LVL28:
 559 0110 5380     		strh	r3, [r2, #2]	@ movhi
 560 0112 6E4A     		ldr	r2, .L57+100
 561 0114 5360     		str	r3, [r2, #4]
 562 0116 FFF7FEFF 		bl	__aeabi_i2f
 563 011a 0446     		mov	r4, r0
 564              	.LVL29:
 565 011c FFF7FEFF 		bl	__aeabi_f2d
 566              	.LVL30:
 567 0120 8046     		mov	r8, r0
 568 0122 8946     		mov	r9, r1
 569 0124 2046     		mov	r0, r4
 570 0126 0021     		movs	r1, #0
 571 0128 FFF7FEFF 		bl	__aeabi_fcmpgt
 572 012c 18B1     		cbz	r0, .L55
 573              		.loc 2 169 0
 574 012e 50A3     		adr	r3, .L57+8
 575 0130 D3E90023 		ldrd	r2, [r3]
 576 0134 02E0     		b	.L33
 577              	.L55:
 578 0136 50A3     		adr	r3, .L57+16
 579 0138 D3E90023 		ldrd	r2, [r3]
 580              	.L33:
 581              	.LVL31:
 582              		.loc 2 169 0 discriminator 9
 583 013c 4046     		mov	r0, r8
 584 013e 4946     		mov	r1, r9
 585 0140 FFF7FEFF 		bl	__aeabi_dmul
 586              	.LVL32:
 587 0144 FFF7FEFF 		bl	__aeabi_d2f
 588 0148 FFF7FEFF 		bl	__aeabi_f2iz
 589 014c 40F24B43 		movw	r3, #1099
 590 0150 00F2EB50 		addw	r0, r0, #1515
 591              	.LVL33:
 592 0154 9842     		cmp	r0, r3
 593 0156 06D9     		bls	.L46
 594              		.loc 2 169 0 discriminator 10
 595 0158 40F26C73 		movw	r3, #1900
 596 015c 9842     		cmp	r0, r3
 597 015e 38BF     		it	cc
 598 0160 0346     		movcc	r3, r0
 599 0162 9BB2     		uxth	r3, r3
 600 0164 01E0     		b	.L35
 601              	.L46:
 602              		.loc 2 169 0
 603 0166 40F24C43 		movw	r3, #1100
 604              	.L35:
 605              		.loc 2 169 0 discriminator 12
 606 016a 574A     		ldr	r2, .L57+96
 607 016c 28B2     		sxth	r0, r5
 608              	.LVL34:
 609 016e 9380     		strh	r3, [r2, #4]	@ movhi
 610 0170 564A     		ldr	r2, .L57+100
 611 0172 9360     		str	r3, [r2, #8]
 612 0174 FFF7FEFF 		bl	__aeabi_i2d
 613 0178 0446     		mov	r4, r0
 614 017a 30B2     		sxth	r0, r6
 615 017c 0D46     		mov	r5, r1
 616 017e FFF7FEFF 		bl	__aeabi_i2d
 617 0182 3FA3     		adr	r3, .L57+24
 618 0184 D3E90023 		ldrd	r2, [r3]
 619 0188 FFF7FEFF 		bl	__aeabi_dmul
 620 018c 0246     		mov	r2, r0
 621 018e 0B46     		mov	r3, r1
 622 0190 2046     		mov	r0, r4
 623 0192 2946     		mov	r1, r5
 624 0194 FFF7FEFF 		bl	__aeabi_dadd
 625 0198 FFF7FEFF 		bl	__aeabi_d2f
 626 019c 0746     		mov	r7, r0
 627              	.LVL35:
 628 019e FFF7FEFF 		bl	__aeabi_f2d
 629              	.LVL36:
 630 01a2 0446     		mov	r4, r0
 631 01a4 0D46     		mov	r5, r1
 632 01a6 3846     		mov	r0, r7
 633 01a8 0021     		movs	r1, #0
 634 01aa FFF7FEFF 		bl	__aeabi_fcmpgt
 635 01ae 18B1     		cbz	r0, .L56
 636              		.loc 2 169 0
 637 01b0 35A3     		adr	r3, .L57+32
 638 01b2 D3E90023 		ldrd	r2, [r3]
 639 01b6 02E0     		b	.L36
 640              	.L56:
 641 01b8 35A3     		adr	r3, .L57+40
 642 01ba D3E90023 		ldrd	r2, [r3]
 643              	.L36:
 644              	.LVL37:
 645              		.loc 2 169 0 discriminator 15
 646 01be 2046     		mov	r0, r4
 647 01c0 2946     		mov	r1, r5
 648 01c2 FFF7FEFF 		bl	__aeabi_dmul
 649              	.LVL38:
 650 01c6 FFF7FEFF 		bl	__aeabi_d2f
 651 01ca FFF7FEFF 		bl	__aeabi_f2iz
 652 01ce 40F2B533 		movw	r3, #949
 653 01d2 00F5B460 		add	r0, r0, #1440
 654              	.LVL39:
 655 01d6 9842     		cmp	r0, r3
 656 01d8 06D9     		bls	.L48
 657              		.loc 2 169 0 discriminator 16
 658 01da 40F60203 		movw	r3, #2050
 659 01de 9842     		cmp	r0, r3
 660 01e0 38BF     		it	cc
 661 01e2 0346     		movcc	r3, r0
 662 01e4 9BB2     		uxth	r3, r3
 663 01e6 01E0     		b	.L38
 664              	.L48:
 665              		.loc 2 169 0
 666 01e8 40F2B633 		movw	r3, #950
 667              	.L38:
 668              		.loc 2 169 0 discriminator 18
 669 01ec 364D     		ldr	r5, .L57+96
 670 01ee 374C     		ldr	r4, .L57+100
 671 01f0 EB80     		strh	r3, [r5, #6]	@ movhi
 672 01f2 E360     		str	r3, [r4, #12]
 673              	.LVL40:
 674 01f4 30B2     		sxth	r0, r6
 675              	.LVL41:
 676 01f6 FFF7FEFF 		bl	__aeabi_i2f
 677 01fa FFF7FEFF 		bl	__aeabi_f2d
 678 01fe 26A3     		adr	r3, .L57+48
 679 0200 D3E90023 		ldrd	r2, [r3]
 680 0204 FFF7FEFF 		bl	__aeabi_dmul
 681              	.LVL42:
 682 0208 FFF7FEFF 		bl	__aeabi_d2f
 683 020c FFF7FEFF 		bl	__aeabi_f2iz
 684 0210 40F2E733 		movw	r3, #999
 685 0214 00F2DC50 		addw	r0, r0, #1500
 686              	.LVL43:
 687 0218 9842     		cmp	r0, r3
 688 021a 1A46     		mov	r2, r3
 689 021c 07D9     		bls	.L49
 690              		.loc 2 169 0 discriminator 19
 691 021e B0F5FA6F 		cmp	r0, #2000
 692 0222 34BF     		ite	cc
 693 0224 0346     		movcc	r3, r0
 694 0226 4FF4FA63 		movcs	r3, #2000
 695 022a 9BB2     		uxth	r3, r3
 696 022c 01E0     		b	.L39
 697              	.L49:
 698              		.loc 2 169 0
 699 022e 4FF47A73 		mov	r3, #1000
 700              	.L39:
 701              		.loc 2 169 0 discriminator 21
 702 0232 9042     		cmp	r0, r2
 703 0234 6B81     		strh	r3, [r5, #10]	@ movhi
 704 0236 6361     		str	r3, [r4, #20]
 705 0238 06D9     		bls	.L50
 706              		.loc 2 169 0 discriminator 22
 707 023a B0F5FA6F 		cmp	r0, #2000
 708 023e 28BF     		it	cs
 709 0240 4FF4FA60 		movcs	r0, #2000
 710              	.LVL44:
 711 0244 80B2     		uxth	r0, r0
 712 0246 01E0     		b	.L40
 713              	.LVL45:
 714              	.L50:
 715              		.loc 2 169 0
 716 0248 4FF47A70 		mov	r0, #1000
 717              	.LVL46:
 718              	.L40:
 719              		.loc 2 169 0 discriminator 24
 720 024c 1E4B     		ldr	r3, .L57+96
 721 024e 1881     		strh	r0, [r3, #8]	@ movhi
 722 0250 1E4B     		ldr	r3, .L57+100
 723 0252 1861     		str	r0, [r3, #16]
 724 0254 FFF7FEFF 		bl	actuators_pwm_commit
 725              	.LBE47:
 170:firmwares/fixedwing/main_fbw.c ****     fbw_new_actuators = 0;
 726              		.loc 2 170 0 is_stmt 1 discriminator 24
 727 0258 1A4B     		ldr	r3, .L57+92
 728 025a 0022     		movs	r2, #0
 729 025c 1A70     		strb	r2, [r3, #0]
 730              	.LVL47:
 731              	.L23:
 732 025e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 733              	.L58:
 734 0262 00BFAFF3 		.align	3
 734      0080
 735              	.L57:
 736 0268 F34B5555 		.word	1431653363
 737 026c 5555B53F 		.word	1068848469
 738 0270 4C9B8888 		.word	2290654028
 739 0274 8888A43F 		.word	1067747464
 740 0278 E6342222 		.word	572667110
 741 027c 2222A63F 		.word	1067852322
 742 0280 33333333 		.word	858993459
 743 0284 3333D33F 		.word	1070805811
 744 0288 A64D4444 		.word	1145327014
 745 028c 4444B03F 		.word	1068516420
 746 0290 E6342222 		.word	572667110
 747 0294 2222AA3F 		.word	1068114466
 748 0298 E797AAAA 		.word	2863306727
 749 029c AAAAAA3F 		.word	1068149418
 750 02a0 00000000 		.word	handle_rc_frame
 751 02a4 00000000 		.word	inter_mcu_received_ap
 752 02a8 00000000 		.word	time_since_last_ap
 753 02ac 00000000 		.word	ap_ok
 754 02b0 00000000 		.word	command_roll_trim
 755 02b4 00000000 		.word	ap_state
 756 02b8 00000000 		.word	command_pitch_trim
 757 02bc 00000000 		.word	.LANCHOR0
 758 02c0 00000000 		.word	commands
 759 02c4 00000000 		.word	.LANCHOR1
 760 02c8 00000000 		.word	actuators
 761 02cc 00000000 		.word	actuators_pwm_values
 762              	.LBE44:
 763              		.cfi_endproc
 764              	.LFE41:
 766              		.section	.text.periodic_task_fbw,"ax",%progbits
 767              		.align	1
 768              		.global	periodic_task_fbw
 769              		.thumb
 770              		.thumb_func
 772              	periodic_task_fbw:
 773              	.LFB42:
 171:firmwares/fixedwing/main_fbw.c ****   }
 172:firmwares/fixedwing/main_fbw.c **** #endif
 173:firmwares/fixedwing/main_fbw.c **** 
 174:firmwares/fixedwing/main_fbw.c **** 
 175:firmwares/fixedwing/main_fbw.c **** #ifdef MCU_SPI_LINK
 176:firmwares/fixedwing/main_fbw.c ****   if (link_mcu_received) {
 177:firmwares/fixedwing/main_fbw.c ****     link_mcu_received = FALSE;
 178:firmwares/fixedwing/main_fbw.c ****     inter_mcu_fill_fbw_state(); /** Prepares the next message for AP */
 179:firmwares/fixedwing/main_fbw.c ****     link_mcu_restart(); /** Prepares the next SPI communication */
 180:firmwares/fixedwing/main_fbw.c ****   }
 181:firmwares/fixedwing/main_fbw.c **** #endif /* MCU_SPI_LINK */
 182:firmwares/fixedwing/main_fbw.c **** #endif /* INTER_MCU */
 183:firmwares/fixedwing/main_fbw.c **** 
 184:firmwares/fixedwing/main_fbw.c **** }
 185:firmwares/fixedwing/main_fbw.c **** 
 186:firmwares/fixedwing/main_fbw.c **** 
 187:firmwares/fixedwing/main_fbw.c **** /************* PERIODIC ******************************************************/
 188:firmwares/fixedwing/main_fbw.c **** void periodic_task_fbw( void ) {
 774              		.loc 2 188 0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 0
 777              		@ frame_needed = 0, uses_anonymous_args = 0
 778 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 779              	.LCFI3:
 780              		.cfi_def_cfa_offset 24
 781              		.cfi_offset 14, -4
 782              		.cfi_offset 8, -8
 783              		.cfi_offset 7, -12
 784              		.cfi_offset 6, -16
 785              		.cfi_offset 5, -20
 786              		.cfi_offset 4, -24
 787              	.LBB97:
 788              	.LBB98:
  74:./subsystems/radio_control.h **** }
  75:./subsystems/radio_control.h **** 
  76:./subsystems/radio_control.h **** /************* PERIODIC ******************************************************/
  77:./subsystems/radio_control.h **** static inline void radio_control_periodic_task ( void ) {
  78:./subsystems/radio_control.h ****   static uint8_t _1Hz;
  79:./subsystems/radio_control.h ****   _1Hz++;
 789              		.loc 3 79 0
 790 0004 664A     		ldr	r2, .L101
 791 0006 1378     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 792 0008 0133     		adds	r3, r3, #1
 793 000a DBB2     		uxtb	r3, r3
  80:./subsystems/radio_control.h **** 
  81:./subsystems/radio_control.h ****   if (_1Hz >= 60) {
 794              		.loc 3 81 0
 795 000c 3B2B     		cmp	r3, #59
  79:./subsystems/radio_control.h ****   _1Hz++;
 796              		.loc 3 79 0
 797 000e 1370     		strb	r3, [r2, #0]
 798 0010 644B     		ldr	r3, .L101+4
 799              		.loc 3 81 0
 800 0012 04D9     		bls	.L60
  82:./subsystems/radio_control.h ****     _1Hz = 0;
 801              		.loc 3 82 0
 802 0014 0021     		movs	r1, #0
 803 0016 1170     		strb	r1, [r2, #0]
  83:./subsystems/radio_control.h ****     radio_control.frame_rate = radio_control.frame_cpt;
 804              		.loc 3 83 0
 805 0018 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
  84:./subsystems/radio_control.h ****     radio_control.frame_cpt = 0;
 806              		.loc 3 84 0
 807 001a 1971     		strb	r1, [r3, #4]
  83:./subsystems/radio_control.h ****     radio_control.frame_rate = radio_control.frame_cpt;
 808              		.loc 3 83 0
 809 001c DA70     		strb	r2, [r3, #3]
 810              	.L60:
  85:./subsystems/radio_control.h ****   }
  86:./subsystems/radio_control.h **** 
  87:./subsystems/radio_control.h ****   if (radio_control.time_since_last_frame >= RC_REALLY_LOST_TIME) {
 811              		.loc 3 87 0
 812 001e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 813 0020 604B     		ldr	r3, .L101+4
 814 0022 3B2A     		cmp	r2, #59
 815 0024 02D9     		bls	.L61
  88:./subsystems/radio_control.h ****     radio_control.status = RC_REALLY_LOST;
 816              		.loc 3 88 0
 817 0026 0222     		movs	r2, #2
 818 0028 1A70     		strb	r2, [r3, #0]
 819 002a 07E0     		b	.L62
 820              	.L61:
  89:./subsystems/radio_control.h ****   } else {
  90:./subsystems/radio_control.h ****     if (radio_control.time_since_last_frame >= RC_LOST_TIME) {
 821              		.loc 3 90 0
 822 002c 1D2A     		cmp	r2, #29
 823 002e 03D9     		bls	.L63
  91:./subsystems/radio_control.h ****       radio_control.status = RC_LOST;
 824              		.loc 3 91 0
 825 0030 0121     		movs	r1, #1
 826 0032 1970     		strb	r1, [r3, #0]
  92:./subsystems/radio_control.h ****       radio_control.radio_ok_cpt = RC_OK_CPT;
 827              		.loc 3 92 0
 828 0034 0F21     		movs	r1, #15
 829 0036 9970     		strb	r1, [r3, #2]
 830              	.L63:
  93:./subsystems/radio_control.h ****     }
  94:./subsystems/radio_control.h ****     radio_control.time_since_last_frame++;
 831              		.loc 3 94 0
 832 0038 0132     		adds	r2, r2, #1
 833 003a 5A70     		strb	r2, [r3, #1]
 834              	.L62:
  95:./subsystems/radio_control.h ****   }
  96:./subsystems/radio_control.h **** 
  97:./subsystems/radio_control.h **** #if defined RADIO_CONTROL_LED
  98:./subsystems/radio_control.h ****   if (radio_control.status == RC_OK) {
 835              		.loc 3 98 0
 836 003c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 837 003e 2021     		movs	r1, #32
 838 0040 594B     		ldr	r3, .L101+8
 839 0042 0AB9     		cbnz	r2, .L64
  99:./subsystems/radio_control.h ****     LED_ON(RADIO_CONTROL_LED);
 840              		.loc 3 99 0
 841 0044 5961     		str	r1, [r3, #20]
 842 0046 00E0     		b	.L65
 843              	.L64:
 100:./subsystems/radio_control.h ****   }
 101:./subsystems/radio_control.h ****   else {
 102:./subsystems/radio_control.h ****     LED_OFF(RADIO_CONTROL_LED);
 844              		.loc 3 102 0
 845 0048 1961     		str	r1, [r3, #16]
 846              	.L65:
 847              	.LBE98:
 848              	.LBE97:
 189:firmwares/fixedwing/main_fbw.c **** 
 190:firmwares/fixedwing/main_fbw.c **** #ifdef RADIO_CONTROL
 191:firmwares/fixedwing/main_fbw.c ****   radio_control_periodic_task();
 192:firmwares/fixedwing/main_fbw.c ****   if (fbw_mode == FBW_MODE_MANUAL && radio_control.status == RC_REALLY_LOST) {
 849              		.loc 2 192 0
 850 004a 584B     		ldr	r3, .L101+12
 851 004c 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 852 004e 19B9     		cbnz	r1, .L66
 853              		.loc 2 192 0 is_stmt 0 discriminator 1
 854 0050 022A     		cmp	r2, #2
 855 0052 01D1     		bne	.L66
 193:firmwares/fixedwing/main_fbw.c ****     fbw_mode = FBW_MODE_AUTO;
 856              		.loc 2 193 0 is_stmt 1
 857 0054 0122     		movs	r2, #1
 858 0056 1A70     		strb	r2, [r3, #0]
 859              	.L66:
 860              	.LBB99:
 861              	.LBB100:
 135:./inter_mcu.h **** }
 136:./inter_mcu.h **** 
 137:./inter_mcu.h **** /** Monitors AP. Set ::ap_ok to false if AP is down for a long time. */
 138:./inter_mcu.h **** static inline void inter_mcu_periodic_task(void) {
 139:./inter_mcu.h ****   if (time_since_last_ap >= AP_STALLED_TIME) {
 862              		.loc 1 139 0
 863 0058 554B     		ldr	r3, .L101+16
 864 005a 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 865 005c 1D2A     		cmp	r2, #29
 866 005e 05D9     		bls	.L67
 140:./inter_mcu.h ****     ap_ok = FALSE;
 867              		.loc 1 140 0
 868 0060 544B     		ldr	r3, .L101+20
 869 0062 0022     		movs	r2, #0
 870 0064 1A70     		strb	r2, [r3, #0]
 141:./inter_mcu.h **** #ifdef SINGLE_MCU
 142:./inter_mcu.h ****     // Keep filling the buffer even if no AP commands are received
 143:./inter_mcu.h ****     inter_mcu_fill_fbw_state();
 871              		.loc 1 143 0
 872 0066 FFF7FEFF 		bl	inter_mcu_fill_fbw_state
 873 006a 01E0     		b	.L68
 874              	.L67:
 144:./inter_mcu.h **** #endif
 145:./inter_mcu.h **** 
 146:./inter_mcu.h ****   } else
 147:./inter_mcu.h ****     time_since_last_ap++;
 875              		.loc 1 147 0
 876 006c 0132     		adds	r2, r2, #1
 877 006e 1A70     		strb	r2, [r3, #0]
 878              	.L68:
 879              	.LBE100:
 880              	.LBE99:
 194:firmwares/fixedwing/main_fbw.c ****   }
 195:firmwares/fixedwing/main_fbw.c **** #endif
 196:firmwares/fixedwing/main_fbw.c **** 
 197:firmwares/fixedwing/main_fbw.c **** #ifdef INTER_MCU
 198:firmwares/fixedwing/main_fbw.c ****   inter_mcu_periodic_task();
 199:firmwares/fixedwing/main_fbw.c ****   if (fbw_mode == FBW_MODE_AUTO && !ap_ok)
 881              		.loc 2 199 0
 882 0070 4E4B     		ldr	r3, .L101+12
 883 0072 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 884 0074 0129     		cmp	r1, #1
 885 0076 10D1     		bne	.L69
 886              		.loc 2 199 0 is_stmt 0 discriminator 1
 887 0078 4E4A     		ldr	r2, .L101+20
 888 007a 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 889 007c 6AB9     		cbnz	r2, .L69
 890              	.LBB101:
 891              	.LBB102:
  98:firmwares/fixedwing/main_fbw.c ****   fbw_mode = FBW_MODE_FAILSAFE;
 892              		.loc 2 98 0 is_stmt 1
 893 007e 0222     		movs	r2, #2
 894 0080 1A70     		strb	r2, [r3, #0]
 895              	.LVL48:
 896              	.LBB103:
  99:firmwares/fixedwing/main_fbw.c ****   SetCommands(commands_failsafe);
 897              		.loc 2 99 0
 898 0082 4D4A     		ldr	r2, .L101+24
 899 0084 4D4B     		ldr	r3, .L101+28
 900 0086 1088     		ldrh	r0, [r2, #0]
 901 0088 1880     		strh	r0, [r3, #0]	@ movhi
 902              	.LVL49:
 903 008a 5088     		ldrh	r0, [r2, #2]
 904 008c 5880     		strh	r0, [r3, #2]	@ movhi
 905              	.LVL50:
 906 008e 9088     		ldrh	r0, [r2, #4]
 907 0090 D288     		ldrh	r2, [r2, #6]
 908 0092 9880     		strh	r0, [r3, #4]	@ movhi
 909              	.LVL51:
 910 0094 DA80     		strh	r2, [r3, #6]	@ movhi
 911              	.LVL52:
 912              	.LBE103:
 100:firmwares/fixedwing/main_fbw.c ****   fbw_new_actuators = 1;
 913              		.loc 2 100 0
 914 0096 4A4B     		ldr	r3, .L101+32
 915 0098 1970     		strb	r1, [r3, #0]
 916              	.LVL53:
 917              	.L69:
 918              	.LBE102:
 919              	.LBE101:
 920              	.LBB104:
 921              	.LBB105:
 922              		.file 4 "firmwares/fixedwing/fbw_downlink.h"
   1:firmwares/fixedwing/fbw_downlink.h **** /*
   2:firmwares/fixedwing/fbw_downlink.h ****  * Paparazzi $Id$
   3:firmwares/fixedwing/fbw_downlink.h ****  *
   4:firmwares/fixedwing/fbw_downlink.h ****  * Copyright (C) 2006- Pascal Brisset, Antoine Drouin
   5:firmwares/fixedwing/fbw_downlink.h ****  *
   6:firmwares/fixedwing/fbw_downlink.h ****  * This file is part of paparazzi.
   7:firmwares/fixedwing/fbw_downlink.h ****  *
   8:firmwares/fixedwing/fbw_downlink.h ****  * paparazzi is free software; you can redistribute it and/or modify
   9:firmwares/fixedwing/fbw_downlink.h ****  * it under the terms of the GNU General Public License as published by
  10:firmwares/fixedwing/fbw_downlink.h ****  * the Free Software Foundation; either version 2, or (at your option)
  11:firmwares/fixedwing/fbw_downlink.h ****  * any later version.
  12:firmwares/fixedwing/fbw_downlink.h ****  *
  13:firmwares/fixedwing/fbw_downlink.h ****  * paparazzi is distributed in the hope that it will be useful,
  14:firmwares/fixedwing/fbw_downlink.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:firmwares/fixedwing/fbw_downlink.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:firmwares/fixedwing/fbw_downlink.h ****  * GNU General Public License for more details.
  17:firmwares/fixedwing/fbw_downlink.h ****  *
  18:firmwares/fixedwing/fbw_downlink.h ****  * You should have received a copy of the GNU General Public License
  19:firmwares/fixedwing/fbw_downlink.h ****  * along with paparazzi; see the file COPYING.  If not, write to
  20:firmwares/fixedwing/fbw_downlink.h ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  21:firmwares/fixedwing/fbw_downlink.h ****  * Boston, MA 02111-1307, USA.
  22:firmwares/fixedwing/fbw_downlink.h ****  *
  23:firmwares/fixedwing/fbw_downlink.h ****  */
  24:firmwares/fixedwing/fbw_downlink.h **** 
  25:firmwares/fixedwing/fbw_downlink.h **** /** \file fbw_downlink.h
  26:firmwares/fixedwing/fbw_downlink.h ****  *  \brief Set of macros defining the periodic telemetry messages of FBW process
  27:firmwares/fixedwing/fbw_downlink.h ****  *
  28:firmwares/fixedwing/fbw_downlink.h ****  * The PeriodicSendAp() macro is generated from the telemetry description
  29:firmwares/fixedwing/fbw_downlink.h ****  * (named in conf.xml, usually in conf/telemetry directory). This macro
  30:firmwares/fixedwing/fbw_downlink.h ****  * is a sequence of calls to PERIODIC_SEND_message() which have to be defined
  31:firmwares/fixedwing/fbw_downlink.h ****  * in the present file.
  32:firmwares/fixedwing/fbw_downlink.h ****  *
  33:firmwares/fixedwing/fbw_downlink.h ****  */
  34:firmwares/fixedwing/fbw_downlink.h **** 
  35:firmwares/fixedwing/fbw_downlink.h **** #ifndef FBW_DOWNLINK_H
  36:firmwares/fixedwing/fbw_downlink.h **** #define FBW_DOWNLINK_H
  37:firmwares/fixedwing/fbw_downlink.h **** 
  38:firmwares/fixedwing/fbw_downlink.h **** #include <inttypes.h>
  39:firmwares/fixedwing/fbw_downlink.h **** #include "messages.h"
  40:firmwares/fixedwing/fbw_downlink.h **** #include "generated/periodic_telemetry.h"
  41:firmwares/fixedwing/fbw_downlink.h **** #include "generated/airframe.h"
  42:firmwares/fixedwing/fbw_downlink.h **** #include "commands.h"
  43:firmwares/fixedwing/fbw_downlink.h **** #include "actuators.h"
  44:firmwares/fixedwing/fbw_downlink.h **** 
  45:firmwares/fixedwing/fbw_downlink.h **** #include "mcu_periph/uart.h"
  46:firmwares/fixedwing/fbw_downlink.h **** #include "firmwares/fixedwing/main_fbw.h"
  47:firmwares/fixedwing/fbw_downlink.h **** #include "subsystems/radio_control.h"
  48:firmwares/fixedwing/fbw_downlink.h **** #include "subsystems/electrical.h"
  49:firmwares/fixedwing/fbw_downlink.h **** #include "inter_mcu.h"
  50:firmwares/fixedwing/fbw_downlink.h **** 
  51:firmwares/fixedwing/fbw_downlink.h **** #ifndef DOWNLINK_DEVICE
  52:firmwares/fixedwing/fbw_downlink.h **** #define DOWNLINK_DEVICE DOWNLINK_FBW_DEVICE
  53:firmwares/fixedwing/fbw_downlink.h **** #endif
  54:firmwares/fixedwing/fbw_downlink.h **** #include "subsystems/datalink/downlink.h"
  55:firmwares/fixedwing/fbw_downlink.h **** 
  56:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_COMMANDS(_trans, _dev) DOWNLINK_SEND_COMMANDS(_trans, _dev, COMMANDS_NB, comm
  57:firmwares/fixedwing/fbw_downlink.h **** 
  58:firmwares/fixedwing/fbw_downlink.h **** #ifdef RADIO_CONTROL
  59:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_FBW_STATUS(_trans, _dev) DOWNLINK_SEND_FBW_STATUS(_trans, _dev, &(radio_contr
  60:firmwares/fixedwing/fbw_downlink.h **** #ifdef RADIO_CONTROL_TYPE_PPM
  61:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_PPM(_trans, _dev) {                           \
  62:firmwares/fixedwing/fbw_downlink.h ****   uint16_t ppm_pulses_usec[RADIO_CONTROL_NB_CHANNEL];        \
  63:firmwares/fixedwing/fbw_downlink.h ****   for (int i=0;i<RADIO_CONTROL_NB_CHANNEL;i++)               \
  64:firmwares/fixedwing/fbw_downlink.h ****     ppm_pulses_usec[i] = USEC_OF_RC_PPM_TICKS(ppm_pulses[i]); \
  65:firmwares/fixedwing/fbw_downlink.h ****   DOWNLINK_SEND_PPM(_trans, _dev,                            \
  66:firmwares/fixedwing/fbw_downlink.h ****                     &radio_control.frame_rate,               \
  67:firmwares/fixedwing/fbw_downlink.h ****                     PPM_NB_CHANNEL,                          \
  68:firmwares/fixedwing/fbw_downlink.h ****                     ppm_pulses_usec);                        \
  69:firmwares/fixedwing/fbw_downlink.h **** }
  70:firmwares/fixedwing/fbw_downlink.h **** #else
  71:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_PPM(_trans, _dev) {}
  72:firmwares/fixedwing/fbw_downlink.h **** #endif
  73:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_RC(_trans, _dev) DOWNLINK_SEND_RC(_trans, _dev, RADIO_CONTROL_NB_CHANNEL, rad
  74:firmwares/fixedwing/fbw_downlink.h **** #else // RADIO_CONTROL
  75:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_FBW_STATUS(_trans, _dev) { uint8_t dummy = 0; DOWNLINK_SEND_FBW_STATUS(_trans
  76:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_PPM(_trans, _dev) {}
  77:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_RC(_trans, _dev) {}
  78:firmwares/fixedwing/fbw_downlink.h **** #endif // RADIO_CONTROL
  79:firmwares/fixedwing/fbw_downlink.h **** 
  80:firmwares/fixedwing/fbw_downlink.h **** #ifdef ACTUATORS
  81:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_ACTUATORS(_trans, _dev) DOWNLINK_SEND_ACTUATORS(_trans, _dev, SERVOS_NB, actu
  82:firmwares/fixedwing/fbw_downlink.h **** #else
  83:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_ACTUATORS(_trans, _dev) {}
  84:firmwares/fixedwing/fbw_downlink.h **** #endif
  85:firmwares/fixedwing/fbw_downlink.h **** 
  86:firmwares/fixedwing/fbw_downlink.h **** #ifdef BRICOLAGE_ADC
  87:firmwares/fixedwing/fbw_downlink.h **** extern uint16_t adc0_val[];
  88:firmwares/fixedwing/fbw_downlink.h **** 
  89:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_ADC(_trans, _dev) {			\
  90:firmwares/fixedwing/fbw_downlink.h ****     static const uint8_t mcu = 0;			\
  91:firmwares/fixedwing/fbw_downlink.h ****     DOWNLINK_SEND_ADC(_trans, _dev, &mcu, 8, adc0_val);	\
  92:firmwares/fixedwing/fbw_downlink.h ****   }
  93:firmwares/fixedwing/fbw_downlink.h **** #else
  94:firmwares/fixedwing/fbw_downlink.h **** #define PERIODIC_SEND_ADC(_trans, _dev) {}
  95:firmwares/fixedwing/fbw_downlink.h **** #endif
  96:firmwares/fixedwing/fbw_downlink.h **** 
  97:firmwares/fixedwing/fbw_downlink.h **** static inline void fbw_downlink_periodic_task(void) {
  98:firmwares/fixedwing/fbw_downlink.h ****   PeriodicSendFbw(DefaultChannel,DefaultDevice)
 923              		.loc 4 98 0
 924 009a 4A4B     		ldr	r3, .L101+36
 925 009c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 926 009e 002A     		cmp	r2, #0
 927 00a0 40F0C081 		bne	.L70
 928              	.LBB106:
 929 00a4 484B     		ldr	r3, .L101+40
 930 00a6 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 931 00a8 0131     		adds	r1, r1, #1
 932 00aa C9B2     		uxtb	r1, r1
 933 00ac 0229     		cmp	r1, #2
 934 00ae 1970     		strb	r1, [r3, #0]
 935 00b0 88BF     		it	hi
 936 00b2 1A70     		strbhi	r2, [r3, #0]
 937 00b4 454B     		ldr	r3, .L101+44
 938 00b6 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 939 00b8 0132     		adds	r2, r2, #1
 940 00ba D2B2     		uxtb	r2, r2
 941 00bc 772A     		cmp	r2, #119
 942 00be 1A70     		strb	r2, [r3, #0]
 943 00c0 01D9     		bls	.L72
 944 00c2 0022     		movs	r2, #0
 945 00c4 1A70     		strb	r2, [r3, #0]
 946              	.L72:
 947 00c6 424B     		ldr	r3, .L101+48
 948 00c8 1A88     		ldrh	r2, [r3, #0]
 949 00ca 0132     		adds	r2, r2, #1
 950 00cc 92B2     		uxth	r2, r2
 951 00ce B2F5967F 		cmp	r2, #300
 952 00d2 1A80     		strh	r2, [r3, #0]	@ movhi
 953 00d4 01D3     		bcc	.L73
 954 00d6 0022     		movs	r2, #0
 955 00d8 1A80     		strh	r2, [r3, #0]	@ movhi
 956              	.L73:
 957 00da 3B4B     		ldr	r3, .L101+40
 958 00dc 1F78     		ldrb	r7, [r3, #0]	@ zero_extendqisi2
 959 00de 002F     		cmp	r7, #0
 960 00e0 40F08880 		bne	.L74
 961 00e4 3B48     		ldr	r0, .L101+52
 962 00e6 1321     		movs	r1, #19
 963 00e8 FFF7FEFF 		bl	uart_check_free_space
 964 00ec 0028     		cmp	r0, #0
 965 00ee 7DD0     		beq	.L75
 966 00f0 394B     		ldr	r3, .L101+56
 967              	.LBB107:
 968 00f2 3848     		ldr	r0, .L101+52
 969              	.LBE107:
 970 00f4 1A88     		ldrh	r2, [r3, #0]
 971              	.LBB108:
 972 00f6 9921     		movs	r1, #153
 973              	.LBE108:
 974 00f8 1332     		adds	r2, r2, #19
 975 00fa 1A80     		strh	r2, [r3, #0]	@ movhi
 976 00fc 374B     		ldr	r3, .L101+60
 977 00fe 384D     		ldr	r5, .L101+64
 978 0100 1A88     		ldrh	r2, [r3, #0]
 979 0102 384C     		ldr	r4, .L101+68
 980 0104 0132     		adds	r2, r2, #1
 981 0106 1A80     		strh	r2, [r3, #0]	@ movhi
 982              	.LBB109:
 983 0108 FFF7FEFF 		bl	uart_transmit
 984              	.LVL54:
 985 010c 3148     		ldr	r0, .L101+52
 986 010e 1321     		movs	r1, #19
 987 0110 FFF7FEFF 		bl	uart_transmit
 988              	.LBE109:
 989 0114 1423     		movs	r3, #20
 990 0116 2B70     		strb	r3, [r5, #0]
 991 0118 2E48     		ldr	r0, .L101+52
 992 011a 2723     		movs	r3, #39
 993 011c 0121     		movs	r1, #1
 994 011e 2370     		strb	r3, [r4, #0]
 995 0120 FFF7FEFF 		bl	uart_transmit
 996 0124 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 997 0126 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 998 0128 6933     		adds	r3, r3, #105
 999 012a DBB2     		uxtb	r3, r3
 1000 012c 2B70     		strb	r3, [r5, #0]
 1001 012e 2948     		ldr	r0, .L101+52
 1002 0130 9B18     		adds	r3, r3, r2
 1003 0132 6921     		movs	r1, #105
 1004 0134 2370     		strb	r3, [r4, #0]
 1005 0136 FFF7FEFF 		bl	uart_transmit
 1006              	.LBB110:
 1007 013a 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1008 013c 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1009 013e 0633     		adds	r3, r3, #6
 1010 0140 DBB2     		uxtb	r3, r3
 1011 0142 2B70     		strb	r3, [r5, #0]
 1012 0144 2348     		ldr	r0, .L101+52
 1013 0146 9B18     		adds	r3, r3, r2
 1014 0148 0621     		movs	r1, #6
 1015 014a 2370     		strb	r3, [r4, #0]
 1016 014c FFF7FEFF 		bl	uart_transmit
 1017              	.LVL55:
 1018 0150 254E     		ldr	r6, .L101+72
 1019              	.LBB111:
 1020 0152 B046     		mov	r8, r6
 1021              	.LVL56:
 1022              	.L76:
 1023 0154 18F81710 		ldrb	r1, [r8, r7, lsl #1]	@ zero_extendqisi2
 1024              	.LVL57:
 1025 0158 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1026 015a 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1027 015c CB18     		adds	r3, r1, r3
 1028 015e DBB2     		uxtb	r3, r3
 1029              	.LVL58:
 1030 0160 2B70     		strb	r3, [r5, #0]
 1031 0162 1C48     		ldr	r0, .L101+52
 1032 0164 9B18     		adds	r3, r3, r2
 1033              	.LVL59:
 1034 0166 2370     		strb	r3, [r4, #0]
 1035 0168 FFF7FEFF 		bl	uart_transmit
 1036              	.LVL60:
 1037              	.LBE111:
 1038              	.LBB112:
 1039 016c 7178     		ldrb	r1, [r6, #1]	@ zero_extendqisi2
 1040              	.LVL61:
 1041 016e 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1042 0170 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1043 0172 CB18     		adds	r3, r1, r3
 1044 0174 DBB2     		uxtb	r3, r3
 1045              	.LVL62:
 1046 0176 2B70     		strb	r3, [r5, #0]
 1047 0178 1648     		ldr	r0, .L101+52
 1048 017a 9B18     		adds	r3, r3, r2
 1049              	.LVL63:
 1050 017c 0137     		adds	r7, r7, #1
 1051 017e 2370     		strb	r3, [r4, #0]
 1052 0180 0236     		adds	r6, r6, #2
 1053 0182 FFF7FEFF 		bl	uart_transmit
 1054              	.LVL64:
 1055              	.LBE112:
 1056 0186 062F     		cmp	r7, #6
 1057 0188 E4D1     		bne	.L76
 1058              	.LBE110:
 1059 018a 154B     		ldr	r3, .L101+64
 1060 018c 1148     		ldr	r0, .L101+52
 1061 018e 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1062 0190 FFF7FEFF 		bl	uart_transmit
 1063 0194 134B     		ldr	r3, .L101+68
 1064 0196 0F48     		ldr	r0, .L101+52
 1065 0198 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1066 019a FFF7FEFF 		bl	uart_transmit
 1067 019e 29E0     		b	.L74
 1068              	.L102:
 1069              		.align	2
 1070              	.L101:
 1071 01a0 00000000 		.word	.LANCHOR4
 1072 01a4 00000000 		.word	radio_control
 1073 01a8 00100140 		.word	1073811456
 1074 01ac 00000000 		.word	.LANCHOR0
 1075 01b0 00000000 		.word	time_since_last_ap
 1076 01b4 00000000 		.word	ap_ok
 1077 01b8 00000000 		.word	commands_failsafe
 1078 01bc 00000000 		.word	commands
 1079 01c0 00000000 		.word	.LANCHOR1
 1080 01c4 00000000 		.word	telemetry_mode_Fbw
 1081 01c8 00000000 		.word	.LANCHOR5
 1082 01cc 00000000 		.word	.LANCHOR6
 1083 01d0 00000000 		.word	.LANCHOR7
 1084 01d4 00000000 		.word	uart2
 1085 01d8 00000000 		.word	downlink_nb_bytes
 1086 01dc 00000000 		.word	downlink_nb_msgs
 1087 01e0 00000000 		.word	ck_a
 1088 01e4 00000000 		.word	ck_b
 1089 01e8 00000000 		.word	actuators
 1090              	.LVL65:
 1091              	.L75:
 1092 01ec 7F4B     		ldr	r3, .L103
 1093 01ee 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1094 01f0 0132     		adds	r2, r2, #1
 1095 01f2 1A70     		strb	r2, [r3, #0]
 1096              	.L74:
 1097 01f4 7E4B     		ldr	r3, .L103+4
 1098 01f6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1099 01f8 062B     		cmp	r3, #6
 1100 01fa 40F09480 		bne	.L77
 1101 01fe 7D48     		ldr	r0, .L103+8
 1102 0200 0E21     		movs	r1, #14
 1103 0202 FFF7FEFF 		bl	uart_check_free_space
 1104 0206 0028     		cmp	r0, #0
 1105 0208 00F08980 		beq	.L78
 1106 020c 7A4B     		ldr	r3, .L103+12
 1107              	.LBB113:
 1108 020e 9921     		movs	r1, #153
 1109              	.LBE113:
 1110 0210 1A88     		ldrh	r2, [r3, #0]
 1111              	.LBB114:
 1112 0212 7848     		ldr	r0, .L103+8
 1113              	.LBE114:
 1114 0214 0E32     		adds	r2, r2, #14
 1115 0216 1A80     		strh	r2, [r3, #0]	@ movhi
 1116 0218 784B     		ldr	r3, .L103+16
 1117 021a 794D     		ldr	r5, .L103+20
 1118 021c 1A88     		ldrh	r2, [r3, #0]
 1119 021e 794C     		ldr	r4, .L103+24
 1120 0220 0132     		adds	r2, r2, #1
 1121 0222 1A80     		strh	r2, [r3, #0]	@ movhi
 1122              	.LBB115:
 1123 0224 FFF7FEFF 		bl	uart_transmit
 1124              	.LVL66:
 1125 0228 0E21     		movs	r1, #14
 1126 022a 7248     		ldr	r0, .L103+8
 1127 022c FFF7FEFF 		bl	uart_transmit
 1128              	.LBE115:
 1129 0230 0F23     		movs	r3, #15
 1130 0232 2B70     		strb	r3, [r5, #0]
 1131 0234 0121     		movs	r1, #1
 1132 0236 1D23     		movs	r3, #29
 1133 0238 6E48     		ldr	r0, .L103+8
 1134 023a 2370     		strb	r3, [r4, #0]
 1135 023c FFF7FEFF 		bl	uart_transmit
 1136 0240 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1137 0242 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1138 0244 6733     		adds	r3, r3, #103
 1139              	.LBB116:
 1140 0246 704E     		ldr	r6, .L103+28
 1141              	.LBE116:
 1142 0248 DBB2     		uxtb	r3, r3
 1143 024a 2B70     		strb	r3, [r5, #0]
 1144 024c 6721     		movs	r1, #103
 1145 024e 9B18     		adds	r3, r3, r2
 1146 0250 6848     		ldr	r0, .L103+8
 1147 0252 2370     		strb	r3, [r4, #0]
 1148 0254 FFF7FEFF 		bl	uart_transmit
 1149              	.LBB117:
 1150 0258 3178     		ldrb	r1, [r6, #0]	@ zero_extendqisi2
 1151              	.LVL67:
 1152 025a 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1153 025c 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1154 025e CB18     		adds	r3, r1, r3
 1155 0260 DBB2     		uxtb	r3, r3
 1156              	.LVL68:
 1157 0262 2B70     		strb	r3, [r5, #0]
 1158 0264 6348     		ldr	r0, .L103+8
 1159 0266 9B18     		adds	r3, r3, r2
 1160              	.LVL69:
 1161 0268 2370     		strb	r3, [r4, #0]
 1162 026a FFF7FEFF 		bl	uart_transmit
 1163              	.LVL70:
 1164              	.LBE117:
 1165              	.LBB118:
 1166 026e F178     		ldrb	r1, [r6, #3]	@ zero_extendqisi2
 1167              	.LVL71:
 1168 0270 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1169 0272 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1170 0274 CB18     		adds	r3, r1, r3
 1171 0276 DBB2     		uxtb	r3, r3
 1172              	.LVL72:
 1173 0278 2B70     		strb	r3, [r5, #0]
 1174 027a 5E48     		ldr	r0, .L103+8
 1175 027c 9B18     		adds	r3, r3, r2
 1176              	.LVL73:
 1177 027e 2370     		strb	r3, [r4, #0]
 1178 0280 FFF7FEFF 		bl	uart_transmit
 1179              	.LVL74:
 1180              	.LBE118:
 1181              	.LBB119:
 1182 0284 614B     		ldr	r3, .L103+32
 1183 0286 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1184 0288 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1185              	.LVL75:
 1186 028a 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1187              	.LBE119:
 1188              	.LBB120:
 1189 028c 604E     		ldr	r6, .L103+36
 1190              	.LBE120:
 1191              	.LBB121:
 1192 028e CB18     		adds	r3, r1, r3
 1193 0290 DBB2     		uxtb	r3, r3
 1194              	.LVL76:
 1195 0292 2B70     		strb	r3, [r5, #0]
 1196 0294 5748     		ldr	r0, .L103+8
 1197 0296 9B18     		adds	r3, r3, r2
 1198              	.LVL77:
 1199 0298 2370     		strb	r3, [r4, #0]
 1200 029a FFF7FEFF 		bl	uart_transmit
 1201              	.LVL78:
 1202              	.LBE121:
 1203              	.LBB122:
 1204 029e 3178     		ldrb	r1, [r6, #0]	@ zero_extendqisi2
 1205              	.LVL79:
 1206 02a0 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1207 02a2 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1208 02a4 CB18     		adds	r3, r1, r3
 1209 02a6 DBB2     		uxtb	r3, r3
 1210              	.LVL80:
 1211 02a8 2B70     		strb	r3, [r5, #0]
 1212 02aa 5248     		ldr	r0, .L103+8
 1213 02ac 9B18     		adds	r3, r3, r2
 1214              	.LVL81:
 1215 02ae 2370     		strb	r3, [r4, #0]
 1216 02b0 FFF7FEFF 		bl	uart_transmit
 1217              	.LVL82:
 1218              	.LBE122:
 1219              	.LBB123:
 1220 02b4 3179     		ldrb	r1, [r6, #4]	@ zero_extendqisi2
 1221              	.LVL83:
 1222 02b6 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1223 02b8 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1224 02ba CB18     		adds	r3, r1, r3
 1225 02bc DBB2     		uxtb	r3, r3
 1226              	.LVL84:
 1227 02be 2B70     		strb	r3, [r5, #0]
 1228 02c0 4C48     		ldr	r0, .L103+8
 1229 02c2 9B18     		adds	r3, r3, r2
 1230              	.LVL85:
 1231 02c4 2370     		strb	r3, [r4, #0]
 1232 02c6 FFF7FEFF 		bl	uart_transmit
 1233              	.LVL86:
 1234              	.LBE123:
 1235              	.LBB124:
 1236 02ca 7179     		ldrb	r1, [r6, #5]	@ zero_extendqisi2
 1237              	.LVL87:
 1238 02cc 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1239 02ce 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1240 02d0 CB18     		adds	r3, r1, r3
 1241 02d2 DBB2     		uxtb	r3, r3
 1242              	.LVL88:
 1243 02d4 2B70     		strb	r3, [r5, #0]
 1244 02d6 4748     		ldr	r0, .L103+8
 1245 02d8 9B18     		adds	r3, r3, r2
 1246              	.LVL89:
 1247 02da 2370     		strb	r3, [r4, #0]
 1248 02dc FFF7FEFF 		bl	uart_transmit
 1249              	.LVL90:
 1250              	.LBE124:
 1251              	.LBB125:
 1252 02e0 B179     		ldrb	r1, [r6, #6]	@ zero_extendqisi2
 1253              	.LVL91:
 1254 02e2 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1255 02e4 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1256 02e6 CB18     		adds	r3, r1, r3
 1257 02e8 DBB2     		uxtb	r3, r3
 1258              	.LVL92:
 1259 02ea 2B70     		strb	r3, [r5, #0]
 1260 02ec 4148     		ldr	r0, .L103+8
 1261 02ee 9B18     		adds	r3, r3, r2
 1262              	.LVL93:
 1263 02f0 2370     		strb	r3, [r4, #0]
 1264 02f2 FFF7FEFF 		bl	uart_transmit
 1265              	.LVL94:
 1266              	.LBE125:
 1267              	.LBB126:
 1268 02f6 F179     		ldrb	r1, [r6, #7]	@ zero_extendqisi2
 1269              	.LVL95:
 1270 02f8 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1271 02fa 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1272 02fc CB18     		adds	r3, r1, r3
 1273 02fe DBB2     		uxtb	r3, r3
 1274              	.LVL96:
 1275 0300 2B70     		strb	r3, [r5, #0]
 1276 0302 3C48     		ldr	r0, .L103+8
 1277 0304 9B18     		adds	r3, r3, r2
 1278              	.LVL97:
 1279 0306 2370     		strb	r3, [r4, #0]
 1280 0308 FFF7FEFF 		bl	uart_transmit
 1281              	.LVL98:
 1282              	.LBE126:
 1283 030c 2978     		ldrb	r1, [r5, #0]	@ zero_extendqisi2
 1284 030e 3948     		ldr	r0, .L103+8
 1285 0310 FFF7FEFF 		bl	uart_transmit
 1286 0314 3748     		ldr	r0, .L103+8
 1287 0316 2178     		ldrb	r1, [r4, #0]	@ zero_extendqisi2
 1288 0318 FFF7FEFF 		bl	uart_transmit
 1289 031c 03E0     		b	.L77
 1290              	.LVL99:
 1291              	.L78:
 1292 031e 334B     		ldr	r3, .L103
 1293 0320 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1294 0322 0132     		adds	r2, r2, #1
 1295 0324 1A70     		strb	r2, [r3, #0]
 1296              	.L77:
 1297 0326 3B4B     		ldr	r3, .L103+40
 1298 0328 1B88     		ldrh	r3, [r3, #0]
 1299 032a 0C2B     		cmp	r3, #12
 1300 032c 7AD1     		bne	.L70
 1301 032e 3148     		ldr	r0, .L103+8
 1302 0330 0F21     		movs	r1, #15
 1303 0332 FFF7FEFF 		bl	uart_check_free_space
 1304 0336 0028     		cmp	r0, #0
 1305 0338 70D0     		beq	.L79
 1306 033a 2F4B     		ldr	r3, .L103+12
 1307              	.LBB127:
 1308 033c 2D48     		ldr	r0, .L103+8
 1309              	.LBE127:
 1310 033e 1A88     		ldrh	r2, [r3, #0]
 1311              	.LBB128:
 1312 0340 9921     		movs	r1, #153
 1313              	.LBE128:
 1314 0342 0F32     		adds	r2, r2, #15
 1315 0344 1A80     		strh	r2, [r3, #0]	@ movhi
 1316 0346 2D4B     		ldr	r3, .L103+16
 1317 0348 2D4D     		ldr	r5, .L103+20
 1318 034a 1A88     		ldrh	r2, [r3, #0]
 1319 034c 2D4C     		ldr	r4, .L103+24
 1320 034e 0132     		adds	r2, r2, #1
 1321 0350 1A80     		strh	r2, [r3, #0]	@ movhi
 1322              	.LBB129:
 1323 0352 FFF7FEFF 		bl	uart_transmit
 1324              	.LVL100:
 1325 0356 2748     		ldr	r0, .L103+8
 1326 0358 0F21     		movs	r1, #15
 1327 035a FFF7FEFF 		bl	uart_transmit
 1328              	.LBE129:
 1329 035e 1023     		movs	r3, #16
 1330 0360 2B70     		strb	r3, [r5, #0]
 1331 0362 2448     		ldr	r0, .L103+8
 1332 0364 1F23     		movs	r3, #31
 1333 0366 0121     		movs	r1, #1
 1334 0368 2370     		strb	r3, [r4, #0]
 1335 036a FFF7FEFF 		bl	uart_transmit
 1336 036e 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1337 0370 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1338 0372 6633     		adds	r3, r3, #102
 1339 0374 DBB2     		uxtb	r3, r3
 1340 0376 2B70     		strb	r3, [r5, #0]
 1341 0378 1E48     		ldr	r0, .L103+8
 1342 037a 9B18     		adds	r3, r3, r2
 1343 037c 6621     		movs	r1, #102
 1344 037e 2370     		strb	r3, [r4, #0]
 1345 0380 FFF7FEFF 		bl	uart_transmit
 1346              	.LBB130:
 1347 0384 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1348 0386 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1349 0388 0433     		adds	r3, r3, #4
 1350 038a DBB2     		uxtb	r3, r3
 1351 038c 2B70     		strb	r3, [r5, #0]
 1352 038e 1948     		ldr	r0, .L103+8
 1353 0390 9B18     		adds	r3, r3, r2
 1354 0392 0421     		movs	r1, #4
 1355 0394 2370     		strb	r3, [r4, #0]
 1356 0396 FFF7FEFF 		bl	uart_transmit
 1357              	.LVL101:
 1358 039a 1F4E     		ldr	r6, .L103+44
 1359 039c 0027     		movs	r7, #0
 1360              	.LBB131:
 1361 039e B046     		mov	r8, r6
 1362              	.LVL102:
 1363              	.L80:
 1364 03a0 18F81710 		ldrb	r1, [r8, r7, lsl #1]	@ zero_extendqisi2
 1365              	.LVL103:
 1366 03a4 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1367 03a6 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1368 03a8 CB18     		adds	r3, r1, r3
 1369 03aa DBB2     		uxtb	r3, r3
 1370              	.LVL104:
 1371 03ac 2B70     		strb	r3, [r5, #0]
 1372 03ae 1148     		ldr	r0, .L103+8
 1373 03b0 9B18     		adds	r3, r3, r2
 1374              	.LVL105:
 1375 03b2 2370     		strb	r3, [r4, #0]
 1376 03b4 FFF7FEFF 		bl	uart_transmit
 1377              	.LVL106:
 1378              	.LBE131:
 1379              	.LBB132:
 1380 03b8 7178     		ldrb	r1, [r6, #1]	@ zero_extendqisi2
 1381              	.LVL107:
 1382 03ba 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1383 03bc 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1384 03be CB18     		adds	r3, r1, r3
 1385 03c0 DBB2     		uxtb	r3, r3
 1386              	.LVL108:
 1387 03c2 2B70     		strb	r3, [r5, #0]
 1388 03c4 0B48     		ldr	r0, .L103+8
 1389 03c6 9B18     		adds	r3, r3, r2
 1390              	.LVL109:
 1391 03c8 0137     		adds	r7, r7, #1
 1392 03ca 2370     		strb	r3, [r4, #0]
 1393 03cc 0236     		adds	r6, r6, #2
 1394 03ce FFF7FEFF 		bl	uart_transmit
 1395              	.LVL110:
 1396              	.LBE132:
 1397 03d2 042F     		cmp	r7, #4
 1398 03d4 E4D1     		bne	.L80
 1399              	.LBE130:
 1400 03d6 0A4B     		ldr	r3, .L103+20
 1401 03d8 0648     		ldr	r0, .L103+8
 1402 03da 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1403 03dc FFF7FEFF 		bl	uart_transmit
 1404 03e0 084B     		ldr	r3, .L103+24
 1405 03e2 0448     		ldr	r0, .L103+8
 1406 03e4 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1407 03e6 FFF7FEFF 		bl	uart_transmit
 1408 03ea 1BE0     		b	.L70
 1409              	.L104:
 1410              		.align	2
 1411              	.L103:
 1412 03ec 00000000 		.word	downlink_nb_ovrn
 1413 03f0 00000000 		.word	.LANCHOR6
 1414 03f4 00000000 		.word	uart2
 1415 03f8 00000000 		.word	downlink_nb_bytes
 1416 03fc 00000000 		.word	downlink_nb_msgs
 1417 0400 00000000 		.word	ck_a
 1418 0404 00000000 		.word	ck_b
 1419 0408 00000000 		.word	radio_control
 1420 040c 00000000 		.word	.LANCHOR0
 1421 0410 00000000 		.word	electrical
 1422 0414 00000000 		.word	.LANCHOR7
 1423 0418 00000000 		.word	commands
 1424              	.LVL111:
 1425              	.L79:
 1426 041c A44B     		ldr	r3, .L105
 1427 041e 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1428 0420 0132     		adds	r2, r2, #1
 1429 0422 1A70     		strb	r2, [r3, #0]
 1430              	.L70:
 1431              	.LBE106:
 1432 0424 A34B     		ldr	r3, .L105+4
 1433 0426 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1434 0428 012B     		cmp	r3, #1
 1435 042a 40F0F981 		bne	.L59
 1436              	.LBB133:
 1437 042e A24B     		ldr	r3, .L105+8
 1438 0430 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1439 0432 0132     		adds	r2, r2, #1
 1440 0434 D2B2     		uxtb	r2, r2
 1441 0436 022A     		cmp	r2, #2
 1442 0438 1A70     		strb	r2, [r3, #0]
 1443 043a 01D9     		bls	.L82
 1444 043c 0022     		movs	r2, #0
 1445 043e 1A70     		strb	r2, [r3, #0]
 1446              	.L82:
 1447 0440 9E4B     		ldr	r3, .L105+12
 1448 0442 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1449 0444 0132     		adds	r2, r2, #1
 1450 0446 D2B2     		uxtb	r2, r2
 1451 0448 1D2A     		cmp	r2, #29
 1452 044a 1A70     		strb	r2, [r3, #0]
 1453 044c 01D9     		bls	.L83
 1454 044e 0022     		movs	r2, #0
 1455 0450 1A70     		strb	r2, [r3, #0]
 1456              	.L83:
 1457 0452 9B4B     		ldr	r3, .L105+16
 1458 0454 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1459 0456 0132     		adds	r2, r2, #1
 1460 0458 D2B2     		uxtb	r2, r2
 1461 045a 3B2A     		cmp	r2, #59
 1462 045c 1A70     		strb	r2, [r3, #0]
 1463 045e 01D9     		bls	.L84
 1464 0460 0022     		movs	r2, #0
 1465 0462 1A70     		strb	r2, [r3, #0]
 1466              	.L84:
 1467 0464 944B     		ldr	r3, .L105+8
 1468 0466 1F78     		ldrb	r7, [r3, #0]	@ zero_extendqisi2
 1469 0468 002F     		cmp	r7, #0
 1470 046a 61D1     		bne	.L85
 1471 046c 9548     		ldr	r0, .L105+20
 1472 046e 1321     		movs	r1, #19
 1473 0470 FFF7FEFF 		bl	uart_check_free_space
 1474 0474 0028     		cmp	r0, #0
 1475 0476 57D0     		beq	.L86
 1476 0478 934B     		ldr	r3, .L105+24
 1477              	.LBB134:
 1478 047a 9248     		ldr	r0, .L105+20
 1479              	.LBE134:
 1480 047c 1A88     		ldrh	r2, [r3, #0]
 1481              	.LBB135:
 1482 047e 9921     		movs	r1, #153
 1483              	.LBE135:
 1484 0480 1332     		adds	r2, r2, #19
 1485 0482 1A80     		strh	r2, [r3, #0]	@ movhi
 1486 0484 914B     		ldr	r3, .L105+28
 1487 0486 924D     		ldr	r5, .L105+32
 1488 0488 1A88     		ldrh	r2, [r3, #0]
 1489 048a 924C     		ldr	r4, .L105+36
 1490 048c 0132     		adds	r2, r2, #1
 1491 048e 1A80     		strh	r2, [r3, #0]	@ movhi
 1492              	.LBB136:
 1493 0490 FFF7FEFF 		bl	uart_transmit
 1494              	.LVL112:
 1495 0494 8B48     		ldr	r0, .L105+20
 1496 0496 1321     		movs	r1, #19
 1497 0498 FFF7FEFF 		bl	uart_transmit
 1498              	.LBE136:
 1499 049c 1423     		movs	r3, #20
 1500 049e 2B70     		strb	r3, [r5, #0]
 1501 04a0 8848     		ldr	r0, .L105+20
 1502 04a2 2723     		movs	r3, #39
 1503 04a4 0121     		movs	r1, #1
 1504 04a6 2370     		strb	r3, [r4, #0]
 1505 04a8 FFF7FEFF 		bl	uart_transmit
 1506 04ac 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1507 04ae 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1508 04b0 6933     		adds	r3, r3, #105
 1509 04b2 DBB2     		uxtb	r3, r3
 1510 04b4 2B70     		strb	r3, [r5, #0]
 1511 04b6 8348     		ldr	r0, .L105+20
 1512 04b8 9B18     		adds	r3, r3, r2
 1513 04ba 6921     		movs	r1, #105
 1514 04bc 2370     		strb	r3, [r4, #0]
 1515 04be FFF7FEFF 		bl	uart_transmit
 1516              	.LBB137:
 1517 04c2 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1518 04c4 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1519 04c6 0633     		adds	r3, r3, #6
 1520 04c8 DBB2     		uxtb	r3, r3
 1521 04ca 2B70     		strb	r3, [r5, #0]
 1522 04cc 7D48     		ldr	r0, .L105+20
 1523 04ce 9B18     		adds	r3, r3, r2
 1524 04d0 0621     		movs	r1, #6
 1525 04d2 2370     		strb	r3, [r4, #0]
 1526 04d4 FFF7FEFF 		bl	uart_transmit
 1527              	.LVL113:
 1528 04d8 7F4E     		ldr	r6, .L105+40
 1529              	.LBB138:
 1530 04da B046     		mov	r8, r6
 1531              	.LVL114:
 1532              	.L87:
 1533 04dc 18F81710 		ldrb	r1, [r8, r7, lsl #1]	@ zero_extendqisi2
 1534              	.LVL115:
 1535 04e0 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1536 04e2 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1537 04e4 CB18     		adds	r3, r1, r3
 1538 04e6 DBB2     		uxtb	r3, r3
 1539              	.LVL116:
 1540 04e8 2B70     		strb	r3, [r5, #0]
 1541 04ea 7648     		ldr	r0, .L105+20
 1542 04ec 9B18     		adds	r3, r3, r2
 1543              	.LVL117:
 1544 04ee 2370     		strb	r3, [r4, #0]
 1545 04f0 FFF7FEFF 		bl	uart_transmit
 1546              	.LVL118:
 1547              	.LBE138:
 1548              	.LBB139:
 1549 04f4 7178     		ldrb	r1, [r6, #1]	@ zero_extendqisi2
 1550              	.LVL119:
 1551 04f6 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1552 04f8 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1553 04fa CB18     		adds	r3, r1, r3
 1554 04fc DBB2     		uxtb	r3, r3
 1555              	.LVL120:
 1556 04fe 2B70     		strb	r3, [r5, #0]
 1557 0500 7048     		ldr	r0, .L105+20
 1558 0502 9B18     		adds	r3, r3, r2
 1559              	.LVL121:
 1560 0504 0137     		adds	r7, r7, #1
 1561 0506 2370     		strb	r3, [r4, #0]
 1562 0508 0236     		adds	r6, r6, #2
 1563 050a FFF7FEFF 		bl	uart_transmit
 1564              	.LVL122:
 1565              	.LBE139:
 1566 050e 062F     		cmp	r7, #6
 1567 0510 E4D1     		bne	.L87
 1568              	.LBE137:
 1569 0512 6F4B     		ldr	r3, .L105+32
 1570 0514 6B48     		ldr	r0, .L105+20
 1571 0516 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1572 0518 FFF7FEFF 		bl	uart_transmit
 1573 051c 6D4B     		ldr	r3, .L105+36
 1574 051e 6948     		ldr	r0, .L105+20
 1575 0520 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1576 0522 FFF7FEFF 		bl	uart_transmit
 1577 0526 03E0     		b	.L85
 1578              	.LVL123:
 1579              	.L86:
 1580 0528 614B     		ldr	r3, .L105
 1581 052a 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1582 052c 0132     		adds	r2, r2, #1
 1583 052e 1A70     		strb	r2, [r3, #0]
 1584              	.L85:
 1585 0530 624B     		ldr	r3, .L105+12
 1586 0532 1E78     		ldrb	r6, [r3, #0]	@ zero_extendqisi2
 1587 0534 062E     		cmp	r6, #6
 1588 0536 00F0D980 		beq	.L88
 1589 053a 0C2E     		cmp	r6, #12
 1590 053c 56D1     		bne	.L89
 1591 053e 6148     		ldr	r0, .L105+20
 1592 0540 1F21     		movs	r1, #31
 1593 0542 FFF7FEFF 		bl	uart_check_free_space
 1594 0546 0028     		cmp	r0, #0
 1595 0548 00F0CC80 		beq	.L92
 1596 054c 5E4B     		ldr	r3, .L105+24
 1597              	.LBB140:
 1598 054e 5D48     		ldr	r0, .L105+20
 1599              	.LBE140:
 1600 0550 1A88     		ldrh	r2, [r3, #0]
 1601              	.LBB141:
 1602 0552 9921     		movs	r1, #153
 1603              	.LBE141:
 1604 0554 1F32     		adds	r2, r2, #31
 1605 0556 1A80     		strh	r2, [r3, #0]	@ movhi
 1606 0558 5C4B     		ldr	r3, .L105+28
 1607 055a 5D4D     		ldr	r5, .L105+32
 1608 055c 1A88     		ldrh	r2, [r3, #0]
 1609 055e 5D4C     		ldr	r4, .L105+36
 1610 0560 0132     		adds	r2, r2, #1
 1611 0562 1A80     		strh	r2, [r3, #0]	@ movhi
 1612              	.LBB142:
 1613 0564 FFF7FEFF 		bl	uart_transmit
 1614              	.LVL124:
 1615 0568 5648     		ldr	r0, .L105+20
 1616 056a 1F21     		movs	r1, #31
 1617 056c FFF7FEFF 		bl	uart_transmit
 1618              	.LBE142:
 1619 0570 2023     		movs	r3, #32
 1620 0572 2B70     		strb	r3, [r5, #0]
 1621 0574 5348     		ldr	r0, .L105+20
 1622 0576 3F23     		movs	r3, #63
 1623 0578 0121     		movs	r1, #1
 1624 057a 2370     		strb	r3, [r4, #0]
 1625 057c FFF7FEFF 		bl	uart_transmit
 1626 0580 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1627 0582 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1628 0584 6533     		adds	r3, r3, #101
 1629 0586 DBB2     		uxtb	r3, r3
 1630              	.LVL125:
 1631 0588 2B70     		strb	r3, [r5, #0]
 1632 058a 4E48     		ldr	r0, .L105+20
 1633 058c 9B18     		adds	r3, r3, r2
 1634              	.LVL126:
 1635 058e 6521     		movs	r1, #101
 1636 0590 2370     		strb	r3, [r4, #0]
 1637 0592 FFF7FEFF 		bl	uart_transmit
 1638              	.LBB143:
 1639 0596 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1640 0598 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1641 059a 0C33     		adds	r3, r3, #12
 1642 059c DBB2     		uxtb	r3, r3
 1643              	.LVL127:
 1644 059e 2B70     		strb	r3, [r5, #0]
 1645 05a0 3146     		mov	r1, r6
 1646 05a2 9B18     		adds	r3, r3, r2
 1647              	.LVL128:
 1648 05a4 4748     		ldr	r0, .L105+20
 1649 05a6 2370     		strb	r3, [r4, #0]
 1650 05a8 FFF7FEFF 		bl	uart_transmit
 1651              	.LVL129:
 1652 05ac 4B4E     		ldr	r6, .L105+44
 1653 05ae 0027     		movs	r7, #0
 1654              	.LBB144:
 1655 05b0 06F10608 		add	r8, r6, #6
 1656              	.LVL130:
 1657              	.L91:
 1658 05b4 18F81710 		ldrb	r1, [r8, r7, lsl #1]	@ zero_extendqisi2
 1659              	.LVL131:
 1660 05b8 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1661 05ba 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1662 05bc CB18     		adds	r3, r1, r3
 1663 05be DBB2     		uxtb	r3, r3
 1664              	.LVL132:
 1665 05c0 2B70     		strb	r3, [r5, #0]
 1666 05c2 4048     		ldr	r0, .L105+20
 1667 05c4 9B18     		adds	r3, r3, r2
 1668              	.LVL133:
 1669 05c6 2370     		strb	r3, [r4, #0]
 1670 05c8 FFF7FEFF 		bl	uart_transmit
 1671              	.LVL134:
 1672              	.LBE144:
 1673              	.LBB145:
 1674 05cc F179     		ldrb	r1, [r6, #7]	@ zero_extendqisi2
 1675              	.LVL135:
 1676 05ce 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1677 05d0 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1678 05d2 CB18     		adds	r3, r1, r3
 1679 05d4 DBB2     		uxtb	r3, r3
 1680              	.LVL136:
 1681 05d6 2B70     		strb	r3, [r5, #0]
 1682 05d8 3A48     		ldr	r0, .L105+20
 1683 05da 9B18     		adds	r3, r3, r2
 1684              	.LVL137:
 1685 05dc 0137     		adds	r7, r7, #1
 1686 05de 2370     		strb	r3, [r4, #0]
 1687 05e0 0236     		adds	r6, r6, #2
 1688 05e2 FFF7FEFF 		bl	uart_transmit
 1689              	.LVL138:
 1690              	.LBE145:
 1691 05e6 0C2F     		cmp	r7, #12
 1692 05e8 E4D1     		bne	.L91
 1693 05ea 55E0     		b	.L100
 1694              	.LVL139:
 1695              	.L89:
 1696              	.LBE143:
 1697 05ec 122E     		cmp	r6, #18
 1698 05ee 7DD1     		bne	.L88
 1699 05f0 3448     		ldr	r0, .L105+20
 1700 05f2 0F21     		movs	r1, #15
 1701 05f4 FFF7FEFF 		bl	uart_check_free_space
 1702 05f8 0028     		cmp	r0, #0
 1703 05fa 73D0     		beq	.L92
 1704 05fc 324B     		ldr	r3, .L105+24
 1705              	.LBB146:
 1706 05fe 3148     		ldr	r0, .L105+20
 1707              	.LBE146:
 1708 0600 1A88     		ldrh	r2, [r3, #0]
 1709              	.LBB147:
 1710 0602 9921     		movs	r1, #153
 1711              	.LBE147:
 1712 0604 0F32     		adds	r2, r2, #15
 1713 0606 1A80     		strh	r2, [r3, #0]	@ movhi
 1714 0608 304B     		ldr	r3, .L105+28
 1715 060a 314D     		ldr	r5, .L105+32
 1716 060c 1A88     		ldrh	r2, [r3, #0]
 1717 060e 314C     		ldr	r4, .L105+36
 1718 0610 0132     		adds	r2, r2, #1
 1719 0612 1A80     		strh	r2, [r3, #0]	@ movhi
 1720              	.LBB148:
 1721 0614 FFF7FEFF 		bl	uart_transmit
 1722              	.LVL140:
 1723 0618 2A48     		ldr	r0, .L105+20
 1724 061a 0F21     		movs	r1, #15
 1725 061c FFF7FEFF 		bl	uart_transmit
 1726              	.LBE148:
 1727 0620 1023     		movs	r3, #16
 1728 0622 2B70     		strb	r3, [r5, #0]
 1729 0624 2748     		ldr	r0, .L105+20
 1730 0626 1F23     		movs	r3, #31
 1731 0628 0121     		movs	r1, #1
 1732 062a 2370     		strb	r3, [r4, #0]
 1733 062c FFF7FEFF 		bl	uart_transmit
 1734 0630 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1735 0632 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1736 0634 6633     		adds	r3, r3, #102
 1737 0636 DBB2     		uxtb	r3, r3
 1738 0638 2B70     		strb	r3, [r5, #0]
 1739 063a 2248     		ldr	r0, .L105+20
 1740 063c 9B18     		adds	r3, r3, r2
 1741 063e 6621     		movs	r1, #102
 1742 0640 2370     		strb	r3, [r4, #0]
 1743 0642 FFF7FEFF 		bl	uart_transmit
 1744              	.LBB149:
 1745 0646 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1746 0648 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1747 064a 0433     		adds	r3, r3, #4
 1748 064c DBB2     		uxtb	r3, r3
 1749 064e 2B70     		strb	r3, [r5, #0]
 1750 0650 1C48     		ldr	r0, .L105+20
 1751 0652 9B18     		adds	r3, r3, r2
 1752 0654 0421     		movs	r1, #4
 1753 0656 2370     		strb	r3, [r4, #0]
 1754 0658 FFF7FEFF 		bl	uart_transmit
 1755              	.LVL141:
 1756 065c 204E     		ldr	r6, .L105+48
 1757 065e 0027     		movs	r7, #0
 1758              	.LBB150:
 1759 0660 B046     		mov	r8, r6
 1760              	.LVL142:
 1761              	.L93:
 1762 0662 18F81710 		ldrb	r1, [r8, r7, lsl #1]	@ zero_extendqisi2
 1763              	.LVL143:
 1764 0666 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1765 0668 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1766 066a CB18     		adds	r3, r1, r3
 1767 066c DBB2     		uxtb	r3, r3
 1768              	.LVL144:
 1769 066e 2B70     		strb	r3, [r5, #0]
 1770 0670 1448     		ldr	r0, .L105+20
 1771 0672 9B18     		adds	r3, r3, r2
 1772              	.LVL145:
 1773 0674 2370     		strb	r3, [r4, #0]
 1774 0676 FFF7FEFF 		bl	uart_transmit
 1775              	.LVL146:
 1776              	.LBE150:
 1777              	.LBB151:
 1778 067a 7178     		ldrb	r1, [r6, #1]	@ zero_extendqisi2
 1779              	.LVL147:
 1780 067c 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1781 067e 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1782 0680 CB18     		adds	r3, r1, r3
 1783 0682 DBB2     		uxtb	r3, r3
 1784              	.LVL148:
 1785 0684 2B70     		strb	r3, [r5, #0]
 1786 0686 0F48     		ldr	r0, .L105+20
 1787 0688 9B18     		adds	r3, r3, r2
 1788              	.LVL149:
 1789 068a 0137     		adds	r7, r7, #1
 1790 068c 2370     		strb	r3, [r4, #0]
 1791 068e 0236     		adds	r6, r6, #2
 1792 0690 FFF7FEFF 		bl	uart_transmit
 1793              	.LVL150:
 1794              	.LBE151:
 1795 0694 042F     		cmp	r7, #4
 1796 0696 E4D1     		bne	.L93
 1797              	.LVL151:
 1798              	.L100:
 1799              	.LBE149:
 1800 0698 0D4B     		ldr	r3, .L105+32
 1801 069a 0A48     		ldr	r0, .L105+20
 1802 069c 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1803 069e FFF7FEFF 		bl	uart_transmit
 1804 06a2 0C4B     		ldr	r3, .L105+36
 1805 06a4 0748     		ldr	r0, .L105+20
 1806 06a6 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1807 06a8 FFF7FEFF 		bl	uart_transmit
 1808 06ac 1EE0     		b	.L88
 1809              	.L106:
 1810 06ae 00BF     		.align	2
 1811              	.L105:
 1812 06b0 00000000 		.word	downlink_nb_ovrn
 1813 06b4 00000000 		.word	telemetry_mode_Fbw
 1814 06b8 00000000 		.word	.LANCHOR8
 1815 06bc 00000000 		.word	.LANCHOR9
 1816 06c0 00000000 		.word	.LANCHOR10
 1817 06c4 00000000 		.word	uart2
 1818 06c8 00000000 		.word	downlink_nb_bytes
 1819 06cc 00000000 		.word	downlink_nb_msgs
 1820 06d0 00000000 		.word	ck_a
 1821 06d4 00000000 		.word	ck_b
 1822 06d8 00000000 		.word	actuators
 1823 06dc 00000000 		.word	radio_control
 1824 06e0 00000000 		.word	commands
 1825              	.L92:
 1826 06e4 4F4B     		ldr	r3, .L107
 1827 06e6 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1828 06e8 0132     		adds	r2, r2, #1
 1829 06ea 1A70     		strb	r2, [r3, #0]
 1830              	.L88:
 1831 06ec 4E4B     		ldr	r3, .L107+4
 1832 06ee 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1833 06f0 182B     		cmp	r3, #24
 1834 06f2 40F09580 		bne	.L59
 1835 06f6 4D48     		ldr	r0, .L107+8
 1836 06f8 0E21     		movs	r1, #14
 1837 06fa FFF7FEFF 		bl	uart_check_free_space
 1838 06fe 0028     		cmp	r0, #0
 1839 0700 00F08A80 		beq	.L94
 1840 0704 4A4B     		ldr	r3, .L107+12
 1841              	.LBB152:
 1842 0706 9921     		movs	r1, #153
 1843              	.LBE152:
 1844 0708 1A88     		ldrh	r2, [r3, #0]
 1845              	.LBB153:
 1846 070a 4848     		ldr	r0, .L107+8
 1847              	.LBE153:
 1848 070c 0E32     		adds	r2, r2, #14
 1849 070e 1A80     		strh	r2, [r3, #0]	@ movhi
 1850 0710 484B     		ldr	r3, .L107+16
 1851 0712 494D     		ldr	r5, .L107+20
 1852 0714 1A88     		ldrh	r2, [r3, #0]
 1853 0716 494C     		ldr	r4, .L107+24
 1854 0718 0132     		adds	r2, r2, #1
 1855 071a 1A80     		strh	r2, [r3, #0]	@ movhi
 1856              	.LBB154:
 1857 071c FFF7FEFF 		bl	uart_transmit
 1858              	.LVL152:
 1859 0720 0E21     		movs	r1, #14
 1860 0722 4248     		ldr	r0, .L107+8
 1861 0724 FFF7FEFF 		bl	uart_transmit
 1862              	.LBE154:
 1863 0728 0F23     		movs	r3, #15
 1864 072a 2B70     		strb	r3, [r5, #0]
 1865 072c 0121     		movs	r1, #1
 1866 072e 1D23     		movs	r3, #29
 1867 0730 3E48     		ldr	r0, .L107+8
 1868 0732 2370     		strb	r3, [r4, #0]
 1869 0734 FFF7FEFF 		bl	uart_transmit
 1870 0738 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1871 073a 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1872 073c 6733     		adds	r3, r3, #103
 1873              	.LBB155:
 1874 073e 404E     		ldr	r6, .L107+28
 1875              	.LBE155:
 1876 0740 DBB2     		uxtb	r3, r3
 1877 0742 2B70     		strb	r3, [r5, #0]
 1878 0744 6721     		movs	r1, #103
 1879 0746 9B18     		adds	r3, r3, r2
 1880 0748 3848     		ldr	r0, .L107+8
 1881 074a 2370     		strb	r3, [r4, #0]
 1882 074c FFF7FEFF 		bl	uart_transmit
 1883              	.LBB156:
 1884 0750 3178     		ldrb	r1, [r6, #0]	@ zero_extendqisi2
 1885              	.LVL153:
 1886 0752 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1887 0754 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1888 0756 CB18     		adds	r3, r1, r3
 1889 0758 DBB2     		uxtb	r3, r3
 1890              	.LVL154:
 1891 075a 2B70     		strb	r3, [r5, #0]
 1892 075c 3348     		ldr	r0, .L107+8
 1893 075e 9B18     		adds	r3, r3, r2
 1894              	.LVL155:
 1895 0760 2370     		strb	r3, [r4, #0]
 1896 0762 FFF7FEFF 		bl	uart_transmit
 1897              	.LVL156:
 1898              	.LBE156:
 1899              	.LBB157:
 1900 0766 F178     		ldrb	r1, [r6, #3]	@ zero_extendqisi2
 1901              	.LVL157:
 1902 0768 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1903 076a 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1904 076c CB18     		adds	r3, r1, r3
 1905 076e DBB2     		uxtb	r3, r3
 1906              	.LVL158:
 1907 0770 2B70     		strb	r3, [r5, #0]
 1908 0772 2E48     		ldr	r0, .L107+8
 1909 0774 9B18     		adds	r3, r3, r2
 1910              	.LVL159:
 1911 0776 2370     		strb	r3, [r4, #0]
 1912 0778 FFF7FEFF 		bl	uart_transmit
 1913              	.LVL160:
 1914              	.LBE157:
 1915              	.LBB158:
 1916 077c 314B     		ldr	r3, .L107+32
 1917 077e 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1918 0780 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1919              	.LVL161:
 1920 0782 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1921              	.LBE158:
 1922              	.LBB159:
 1923 0784 304E     		ldr	r6, .L107+36
 1924              	.LBE159:
 1925              	.LBB160:
 1926 0786 CB18     		adds	r3, r1, r3
 1927 0788 DBB2     		uxtb	r3, r3
 1928              	.LVL162:
 1929 078a 2B70     		strb	r3, [r5, #0]
 1930 078c 2748     		ldr	r0, .L107+8
 1931 078e 9B18     		adds	r3, r3, r2
 1932              	.LVL163:
 1933 0790 2370     		strb	r3, [r4, #0]
 1934 0792 FFF7FEFF 		bl	uart_transmit
 1935              	.LVL164:
 1936              	.LBE160:
 1937              	.LBB161:
 1938 0796 3178     		ldrb	r1, [r6, #0]	@ zero_extendqisi2
 1939              	.LVL165:
 1940 0798 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1941 079a 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1942 079c CB18     		adds	r3, r1, r3
 1943 079e DBB2     		uxtb	r3, r3
 1944              	.LVL166:
 1945 07a0 2B70     		strb	r3, [r5, #0]
 1946 07a2 2248     		ldr	r0, .L107+8
 1947 07a4 9B18     		adds	r3, r3, r2
 1948              	.LVL167:
 1949 07a6 2370     		strb	r3, [r4, #0]
 1950 07a8 FFF7FEFF 		bl	uart_transmit
 1951              	.LVL168:
 1952              	.LBE161:
 1953              	.LBB162:
 1954 07ac 3179     		ldrb	r1, [r6, #4]	@ zero_extendqisi2
 1955              	.LVL169:
 1956 07ae 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1957 07b0 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1958 07b2 CB18     		adds	r3, r1, r3
 1959 07b4 DBB2     		uxtb	r3, r3
 1960              	.LVL170:
 1961 07b6 2B70     		strb	r3, [r5, #0]
 1962 07b8 1C48     		ldr	r0, .L107+8
 1963 07ba 9B18     		adds	r3, r3, r2
 1964              	.LVL171:
 1965 07bc 2370     		strb	r3, [r4, #0]
 1966 07be FFF7FEFF 		bl	uart_transmit
 1967              	.LVL172:
 1968              	.LBE162:
 1969              	.LBB163:
 1970 07c2 7179     		ldrb	r1, [r6, #5]	@ zero_extendqisi2
 1971              	.LVL173:
 1972 07c4 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1973 07c6 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1974 07c8 CB18     		adds	r3, r1, r3
 1975 07ca DBB2     		uxtb	r3, r3
 1976              	.LVL174:
 1977 07cc 2B70     		strb	r3, [r5, #0]
 1978 07ce 1748     		ldr	r0, .L107+8
 1979 07d0 9B18     		adds	r3, r3, r2
 1980              	.LVL175:
 1981 07d2 2370     		strb	r3, [r4, #0]
 1982 07d4 FFF7FEFF 		bl	uart_transmit
 1983              	.LVL176:
 1984              	.LBE163:
 1985              	.LBB164:
 1986 07d8 B179     		ldrb	r1, [r6, #6]	@ zero_extendqisi2
 1987              	.LVL177:
 1988 07da 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1989 07dc 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1990 07de CB18     		adds	r3, r1, r3
 1991 07e0 DBB2     		uxtb	r3, r3
 1992              	.LVL178:
 1993 07e2 2B70     		strb	r3, [r5, #0]
 1994 07e4 1148     		ldr	r0, .L107+8
 1995 07e6 9B18     		adds	r3, r3, r2
 1996              	.LVL179:
 1997 07e8 2370     		strb	r3, [r4, #0]
 1998 07ea FFF7FEFF 		bl	uart_transmit
 1999              	.LVL180:
 2000              	.LBE164:
 2001              	.LBB165:
 2002 07ee F179     		ldrb	r1, [r6, #7]	@ zero_extendqisi2
 2003              	.LVL181:
 2004 07f0 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 2005 07f2 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 2006 07f4 CB18     		adds	r3, r1, r3
 2007 07f6 DBB2     		uxtb	r3, r3
 2008              	.LVL182:
 2009 07f8 2B70     		strb	r3, [r5, #0]
 2010 07fa 0C48     		ldr	r0, .L107+8
 2011 07fc 9B18     		adds	r3, r3, r2
 2012              	.LVL183:
 2013 07fe 2370     		strb	r3, [r4, #0]
 2014 0800 FFF7FEFF 		bl	uart_transmit
 2015              	.LVL184:
 2016              	.LBE165:
 2017 0804 2978     		ldrb	r1, [r5, #0]	@ zero_extendqisi2
 2018 0806 0948     		ldr	r0, .L107+8
 2019 0808 FFF7FEFF 		bl	uart_transmit
 2020 080c 0748     		ldr	r0, .L107+8
 2021 080e 2178     		ldrb	r1, [r4, #0]	@ zero_extendqisi2
 2022              	.LBE133:
 2023              	.LBE105:
 2024              	.LBE104:
 200:firmwares/fixedwing/main_fbw.c ****   {
 201:firmwares/fixedwing/main_fbw.c ****     set_failsafe_mode();
 202:firmwares/fixedwing/main_fbw.c ****   }
 203:firmwares/fixedwing/main_fbw.c **** #endif
 204:firmwares/fixedwing/main_fbw.c **** 
 205:firmwares/fixedwing/main_fbw.c **** #ifdef DOWNLINK
 206:firmwares/fixedwing/main_fbw.c ****   fbw_downlink_periodic_task();
 207:firmwares/fixedwing/main_fbw.c **** #endif
 208:firmwares/fixedwing/main_fbw.c **** 
 209:firmwares/fixedwing/main_fbw.c **** }
 2025              		.loc 2 209 0
 2026 0810 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2027              	.LBB168:
 2028              	.LBB167:
 2029              	.LBB166:
 2030              		.loc 4 98 0
 2031 0814 FFF7FEBF 		b	uart_transmit
 2032              	.LVL185:
 2033              	.L94:
 2034 0818 024B     		ldr	r3, .L107
 2035 081a 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2036 081c 0132     		adds	r2, r2, #1
 2037 081e 1A70     		strb	r2, [r3, #0]
 2038              	.L59:
 2039 0820 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2040              	.L108:
 2041              		.align	2
 2042              	.L107:
 2043 0824 00000000 		.word	downlink_nb_ovrn
 2044 0828 00000000 		.word	.LANCHOR10
 2045 082c 00000000 		.word	uart2
 2046 0830 00000000 		.word	downlink_nb_bytes
 2047 0834 00000000 		.word	downlink_nb_msgs
 2048 0838 00000000 		.word	ck_a
 2049 083c 00000000 		.word	ck_b
 2050 0840 00000000 		.word	radio_control
 2051 0844 00000000 		.word	.LANCHOR0
 2052 0848 00000000 		.word	electrical
 2053              	.LBE166:
 2054              	.LBE167:
 2055              	.LBE168:
 2056              		.cfi_endproc
 2057              	.LFE42:
 2059              		.section	.text.handle_periodic_tasks_fbw,"ax",%progbits
 2060              		.align	1
 2061              		.global	handle_periodic_tasks_fbw
 2062              		.thumb
 2063              		.thumb_func
 2065              	handle_periodic_tasks_fbw:
 2066              	.LFB43:
 210:firmwares/fixedwing/main_fbw.c **** 
 211:firmwares/fixedwing/main_fbw.c **** void handle_periodic_tasks_fbw(void) {
 2067              		.loc 2 211 0
 2068              		.cfi_startproc
 2069              		@ args = 0, pretend = 0, frame = 0
 2070              		@ frame_needed = 0, uses_anonymous_args = 0
 2071              	.LVL186:
 2072 0000 10B5     		push	{r4, lr}
 2073              	.LCFI4:
 2074              		.cfi_def_cfa_offset 8
 2075              		.cfi_offset 14, -4
 2076              		.cfi_offset 4, -8
 2077              	.LBB169:
 2078              	.LBB170:
 2079              		.file 5 "./mcu_periph/sys_time.h"
   1:./mcu_periph/sys_time.h **** /*
   2:./mcu_periph/sys_time.h ****  *
   3:./mcu_periph/sys_time.h ****  * Copyright (C) 2009-2011 The Paparazzi Team
   4:./mcu_periph/sys_time.h ****  *
   5:./mcu_periph/sys_time.h ****  * This file is part of paparazzi.
   6:./mcu_periph/sys_time.h ****  *
   7:./mcu_periph/sys_time.h ****  * paparazzi is free software; you can redistribute it and/or modify
   8:./mcu_periph/sys_time.h ****  * it under the terms of the GNU General Public License as published by
   9:./mcu_periph/sys_time.h ****  * the Free Software Foundation; either version 2, or (at your option)
  10:./mcu_periph/sys_time.h ****  * any later version.
  11:./mcu_periph/sys_time.h ****  *
  12:./mcu_periph/sys_time.h ****  * paparazzi is distributed in the hope that it will be useful,
  13:./mcu_periph/sys_time.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:./mcu_periph/sys_time.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:./mcu_periph/sys_time.h ****  * GNU General Public License for more details.
  16:./mcu_periph/sys_time.h ****  *
  17:./mcu_periph/sys_time.h ****  * You should have received a copy of the GNU General Public License
  18:./mcu_periph/sys_time.h ****  * along with paparazzi; see the file COPYING.  If not, write to
  19:./mcu_periph/sys_time.h ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  20:./mcu_periph/sys_time.h ****  * Boston, MA 02111-1307, USA.
  21:./mcu_periph/sys_time.h ****  *
  22:./mcu_periph/sys_time.h ****  */
  23:./mcu_periph/sys_time.h **** 
  24:./mcu_periph/sys_time.h **** /**
  25:./mcu_periph/sys_time.h ****  * @file mcu_periph/sys_time.h
  26:./mcu_periph/sys_time.h ****  * @brief Architecture independent timing functions.
  27:./mcu_periph/sys_time.h ****  *
  28:./mcu_periph/sys_time.h ****  */
  29:./mcu_periph/sys_time.h **** 
  30:./mcu_periph/sys_time.h **** #ifndef SYS_TIME_H
  31:./mcu_periph/sys_time.h **** #define SYS_TIME_H
  32:./mcu_periph/sys_time.h **** 
  33:./mcu_periph/sys_time.h **** #include <inttypes.h>
  34:./mcu_periph/sys_time.h **** #include <stdlib.h>
  35:./mcu_periph/sys_time.h **** #include "std.h"
  36:./mcu_periph/sys_time.h **** 
  37:./mcu_periph/sys_time.h **** #include BOARD_CONFIG
  38:./mcu_periph/sys_time.h **** 
  39:./mcu_periph/sys_time.h **** #ifndef SYS_TIME_NB_TIMER
  40:./mcu_periph/sys_time.h **** #define SYS_TIME_NB_TIMER 8
  41:./mcu_periph/sys_time.h **** #endif
  42:./mcu_periph/sys_time.h **** 
  43:./mcu_periph/sys_time.h **** typedef uint8_t tid_t; ///< sys_time timer id type
  44:./mcu_periph/sys_time.h **** typedef void (*sys_time_cb) (uint8_t id);
  45:./mcu_periph/sys_time.h **** 
  46:./mcu_periph/sys_time.h **** struct sys_time_timer {
  47:./mcu_periph/sys_time.h ****   bool_t          in_use;
  48:./mcu_periph/sys_time.h ****   sys_time_cb     cb;
  49:./mcu_periph/sys_time.h ****   volatile bool_t elapsed;
  50:./mcu_periph/sys_time.h ****   uint32_t        end_time; ///< in SYS_TICKS
  51:./mcu_periph/sys_time.h ****   uint32_t        duration; ///< in SYS_TICKS
  52:./mcu_periph/sys_time.h **** };
  53:./mcu_periph/sys_time.h **** 
  54:./mcu_periph/sys_time.h **** struct sys_time {
  55:./mcu_periph/sys_time.h ****   volatile uint32_t nb_sec;       ///< full seconds since startup
  56:./mcu_periph/sys_time.h ****   volatile uint32_t nb_sec_rem;   ///< remainder of second in CPU_TICKS
  57:./mcu_periph/sys_time.h ****   volatile uint32_t nb_tick;      ///< in SYS_TICKS with SYS_TIME_RESOLUTION
  58:./mcu_periph/sys_time.h ****   struct sys_time_timer timer[SYS_TIME_NB_TIMER];
  59:./mcu_periph/sys_time.h **** };
  60:./mcu_periph/sys_time.h **** 
  61:./mcu_periph/sys_time.h **** extern struct sys_time sys_time;
  62:./mcu_periph/sys_time.h **** 
  63:./mcu_periph/sys_time.h **** //FIXME temporary hack
  64:./mcu_periph/sys_time.h **** #define cpu_time_sec sys_time.nb_sec
  65:./mcu_periph/sys_time.h **** #define cpu_time_ticks sys_time.nb_sec_rem
  66:./mcu_periph/sys_time.h **** 
  67:./mcu_periph/sys_time.h **** extern void sys_time_init(void);
  68:./mcu_periph/sys_time.h **** 
  69:./mcu_periph/sys_time.h **** /**
  70:./mcu_periph/sys_time.h ****  * Register a new system timer.
  71:./mcu_periph/sys_time.h ****  * @param duration Duration in seconds until the timer elapses.
  72:./mcu_periph/sys_time.h ****  * @param cb Callback function that is called from the ISR when timer elapses, or NULL
  73:./mcu_periph/sys_time.h ****  * @return -1 if it failed, the timer id otherwise
  74:./mcu_periph/sys_time.h ****  */
  75:./mcu_periph/sys_time.h **** extern int sys_time_register_timer(float duration, sys_time_cb cb);
  76:./mcu_periph/sys_time.h **** 
  77:./mcu_periph/sys_time.h **** /**
  78:./mcu_periph/sys_time.h ****  * Cancel a system timer by id.
  79:./mcu_periph/sys_time.h ****  * @param id Timer id.
  80:./mcu_periph/sys_time.h ****  */
  81:./mcu_periph/sys_time.h **** extern void sys_time_cancel_timer(tid_t id);
  82:./mcu_periph/sys_time.h **** 
  83:./mcu_periph/sys_time.h **** /**
  84:./mcu_periph/sys_time.h ****  * Update the duration until a timer elapses.
  85:./mcu_periph/sys_time.h ****  * @param id Timer id
  86:./mcu_periph/sys_time.h ****  * @param duration Duration in seconds until the timer elapses.
  87:./mcu_periph/sys_time.h ****  */
  88:./mcu_periph/sys_time.h **** extern void sys_time_update_timer(tid_t id, float duration);
  89:./mcu_periph/sys_time.h **** 
  90:./mcu_periph/sys_time.h **** static inline bool_t sys_time_check_and_ack_timer(tid_t id) {
  91:./mcu_periph/sys_time.h ****   if (sys_time.timer[id].elapsed) {
 2080              		.loc 5 91 0
 2081 0002 0E4B     		ldr	r3, .L112
 2082 0004 1421     		movs	r1, #20
 2083 0006 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2084 0008 0D4B     		ldr	r3, .L112+4
 2085 000a 01FB0232 		mla	r2, r1, r2, r3
 2086 000e 117D     		ldrb	r1, [r2, #20]	@ zero_extendqisi2
 2087 0010 1C46     		mov	r4, r3
 2088 0012 1032     		adds	r2, r2, #16
 2089 0014 19B1     		cbz	r1, .L110
  92:./mcu_periph/sys_time.h ****     sys_time.timer[id].elapsed = FALSE;
 2090              		.loc 5 92 0
 2091 0016 0023     		movs	r3, #0
 2092 0018 1371     		strb	r3, [r2, #4]
 2093              	.LBE170:
 2094              	.LBE169:
 212:firmwares/fixedwing/main_fbw.c **** 
 213:firmwares/fixedwing/main_fbw.c ****   if (sys_time_check_and_ack_timer(fbw_periodic_tid))
 214:firmwares/fixedwing/main_fbw.c ****     periodic_task_fbw();
 2095              		.loc 2 214 0
 2096 001a FFF7FEFF 		bl	periodic_task_fbw
 2097              	.LVL187:
 2098              	.L110:
 2099              	.LBB171:
 2100              	.LBB172:
  91:./mcu_periph/sys_time.h ****   if (sys_time.timer[id].elapsed) {
 2101              		.loc 5 91 0
 2102 001e 094B     		ldr	r3, .L112+8
 2103 0020 1422     		movs	r2, #20
 2104 0022 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2105 0024 02FB0343 		mla	r3, r2, r3, r4
 2106 0028 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 2107 002a 1033     		adds	r3, r3, #16
 2108 002c 2AB1     		cbz	r2, .L109
 2109              		.loc 5 92 0
 2110 002e 0022     		movs	r2, #0
 2111 0030 1A71     		strb	r2, [r3, #4]
 2112              	.LBE172:
 2113              	.LBE171:
 215:firmwares/fixedwing/main_fbw.c **** 
 216:firmwares/fixedwing/main_fbw.c ****   if (sys_time_check_and_ack_timer(electrical_tid))
 217:firmwares/fixedwing/main_fbw.c ****     electrical_periodic();
 218:firmwares/fixedwing/main_fbw.c **** 
 219:firmwares/fixedwing/main_fbw.c **** }
 2114              		.loc 2 219 0
 2115 0032 BDE81040 		pop	{r4, lr}
 217:firmwares/fixedwing/main_fbw.c ****     electrical_periodic();
 2116              		.loc 2 217 0
 2117 0036 FFF7FEBF 		b	electrical_periodic
 2118              	.LVL188:
 2119              	.L109:
 2120 003a 10BD     		pop	{r4, pc}
 2121              	.L113:
 2122              		.align	2
 2123              	.L112:
 2124 003c 00000000 		.word	.LANCHOR2
 2125 0040 00000000 		.word	sys_time
 2126 0044 00000000 		.word	.LANCHOR3
 2127              		.cfi_endproc
 2128              	.LFE43:
 2130              		.global	electrical_tid
 2131              		.global	fbw_periodic_tid
 2132              		.global	fbw_new_actuators
 2133              		.global	fbw_mode
 2134              		.section	.bss.i3.3603,"aw",%nobits
 2135              		.set	.LANCHOR5,. + 0
 2138              	i3.3603:
 2139 0000 00       		.space	1
 2140              		.section	.bss.i30.3630,"aw",%nobits
 2141              		.set	.LANCHOR9,. + 0
 2144              	i30.3630:
 2145 0000 00       		.space	1
 2146              		.section	.bss.i3.3629,"aw",%nobits
 2147              		.set	.LANCHOR8,. + 0
 2150              	i3.3629:
 2151 0000 00       		.space	1
 2152              		.section	.bss.i300.3605,"aw",%nobits
 2153              		.align	1
 2154              		.set	.LANCHOR7,. + 0
 2157              	i300.3605:
 2158 0000 0000     		.space	2
 2159              		.section	.bss.fbw_mode,"aw",%nobits
 2160              		.set	.LANCHOR0,. + 0
 2163              	fbw_mode:
 2164 0000 00       		.space	1
 2165              		.section	.bss.fbw_periodic_tid,"aw",%nobits
 2166              		.set	.LANCHOR2,. + 0
 2169              	fbw_periodic_tid:
 2170 0000 00       		.space	1
 2171              		.section	.bss._1Hz.3375,"aw",%nobits
 2172              		.set	.LANCHOR4,. + 0
 2175              	_1Hz.3375:
 2176 0000 00       		.space	1
 2177              		.section	.bss.fbw_new_actuators,"aw",%nobits
 2178              		.set	.LANCHOR1,. + 0
 2181              	fbw_new_actuators:
 2182 0000 00       		.space	1
 2183              		.section	.bss.i60.3631,"aw",%nobits
 2184              		.set	.LANCHOR10,. + 0
 2187              	i60.3631:
 2188 0000 00       		.space	1
 2189              		.section	.bss.i120.3604,"aw",%nobits
 2190              		.set	.LANCHOR6,. + 0
 2193              	i120.3604:
 2194 0000 00       		.space	1
 2195              		.section	.bss.electrical_tid,"aw",%nobits
 2196              		.set	.LANCHOR3,. + 0
 2199              	electrical_tid:
 2200 0000 00       		.space	1
 2201              		.text
 2202              	.Letext0:
 2203              		.file 6 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 2204              		.file 7 "/home/uav/USTUAV/paparazzi/sw/include/std.h"
 2205              		.file 8 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 2206              		.file 9 "./paparazzi.h"
 2207              		.file 10 "./subsystems/electrical.h"
 2208              		.file 11 "./mcu_periph/uart.h"
 2209              		.file 12 "./firmwares/fixedwing/main_fbw.h"
 2210              		.file 13 "./commands.h"
 2211              		.file 14 "./firmwares/fixedwing/actuators.h"
 2212              		.file 15 "/home/uav/USTUAV/paparazzi/sw/airborne/arch/stm32/servos_direct_hw.h"
 2213              		.file 16 "/home/uav/USTUAV/paparazzi/var/MYAC/generated/periodic_telemetry.h"
 2214              		.file 17 "./subsystems/datalink/datalink.h"
 2215              		.file 18 "./subsystems/datalink/pprz_transport.h"
 2216              		.file 19 "./subsystems/datalink/xbee.h"
 2217              		.file 20 "./subsystems/datalink/downlink.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main_fbw.c
     /tmp/ccrsneQx.s:18     .text.inter_mcu_fill_fbw_state:0000000000000000 $t
     /tmp/ccrsneQx.s:22     .text.inter_mcu_fill_fbw_state:0000000000000000 inter_mcu_fill_fbw_state
     /tmp/ccrsneQx.s:116    .text.inter_mcu_fill_fbw_state:0000000000000064 $d
     /tmp/ccrsneQx.s:125    .text.handle_rc_frame:0000000000000000 $t
     /tmp/ccrsneQx.s:129    .text.handle_rc_frame:0000000000000000 handle_rc_frame
     /tmp/ccrsneQx.s:169    .text.handle_rc_frame:0000000000000030 $d
     /tmp/ccrsneQx.s:179    .text.init_fbw:0000000000000000 $t
     /tmp/ccrsneQx.s:184    .text.init_fbw:0000000000000000 init_fbw
     /tmp/ccrsneQx.s:322    .text.init_fbw:000000000000007c $d
     /tmp/ccrsneQx.s:345    .text.event_task_fbw:0000000000000000 $t
     /tmp/ccrsneQx.s:350    .text.event_task_fbw:0000000000000000 event_task_fbw
     /tmp/ccrsneQx.s:736    .text.event_task_fbw:0000000000000268 $d
     /tmp/ccrsneQx.s:767    .text.periodic_task_fbw:0000000000000000 $t
     /tmp/ccrsneQx.s:772    .text.periodic_task_fbw:0000000000000000 periodic_task_fbw
     /tmp/ccrsneQx.s:1071   .text.periodic_task_fbw:00000000000001a0 $d
     /tmp/ccrsneQx.s:1092   .text.periodic_task_fbw:00000000000001ec $t
     /tmp/ccrsneQx.s:1412   .text.periodic_task_fbw:00000000000003ec $d
     /tmp/ccrsneQx.s:1426   .text.periodic_task_fbw:000000000000041c $t
     /tmp/ccrsneQx.s:1812   .text.periodic_task_fbw:00000000000006b0 $d
     /tmp/ccrsneQx.s:1826   .text.periodic_task_fbw:00000000000006e4 $t
     /tmp/ccrsneQx.s:2043   .text.periodic_task_fbw:0000000000000824 $d
     /tmp/ccrsneQx.s:2060   .text.handle_periodic_tasks_fbw:0000000000000000 $t
     /tmp/ccrsneQx.s:2065   .text.handle_periodic_tasks_fbw:0000000000000000 handle_periodic_tasks_fbw
     /tmp/ccrsneQx.s:2124   .text.handle_periodic_tasks_fbw:000000000000003c $d
     /tmp/ccrsneQx.s:2199   .bss.electrical_tid:0000000000000000 electrical_tid
     /tmp/ccrsneQx.s:2169   .bss.fbw_periodic_tid:0000000000000000 fbw_periodic_tid
     /tmp/ccrsneQx.s:2181   .bss.fbw_new_actuators:0000000000000000 fbw_new_actuators
     /tmp/ccrsneQx.s:2163   .bss.fbw_mode:0000000000000000 fbw_mode
     /tmp/ccrsneQx.s:2138   .bss.i3.3603:0000000000000000 i3.3603
     /tmp/ccrsneQx.s:2139   .bss.i3.3603:0000000000000000 $d
     /tmp/ccrsneQx.s:2144   .bss.i30.3630:0000000000000000 i30.3630
     /tmp/ccrsneQx.s:2145   .bss.i30.3630:0000000000000000 $d
     /tmp/ccrsneQx.s:2150   .bss.i3.3629:0000000000000000 i3.3629
     /tmp/ccrsneQx.s:2151   .bss.i3.3629:0000000000000000 $d
     /tmp/ccrsneQx.s:2153   .bss.i300.3605:0000000000000000 $d
     /tmp/ccrsneQx.s:2157   .bss.i300.3605:0000000000000000 i300.3605
     /tmp/ccrsneQx.s:2164   .bss.fbw_mode:0000000000000000 $d
     /tmp/ccrsneQx.s:2170   .bss.fbw_periodic_tid:0000000000000000 $d
     /tmp/ccrsneQx.s:2175   .bss._1Hz.3375:0000000000000000 _1Hz.3375
     /tmp/ccrsneQx.s:2176   .bss._1Hz.3375:0000000000000000 $d
     /tmp/ccrsneQx.s:2182   .bss.fbw_new_actuators:0000000000000000 $d
     /tmp/ccrsneQx.s:2187   .bss.i60.3631:0000000000000000 i60.3631
     /tmp/ccrsneQx.s:2188   .bss.i60.3631:0000000000000000 $d
     /tmp/ccrsneQx.s:2193   .bss.i120.3604:0000000000000000 i120.3604
     /tmp/ccrsneQx.s:2194   .bss.i120.3604:0000000000000000 $d
     /tmp/ccrsneQx.s:2200   .bss.electrical_tid:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
fbw_state
radio_control
electrical
inter_mcu_received_fbw
commands
mcu_init
electrical_init
actuators_init
radio_control_impl_init
sys_time_register_timer
commands_failsafe
ap_ok
__aeabi_i2f
__aeabi_f2d
__aeabi_fcmpgt
__aeabi_dmul
__aeabi_d2f
__aeabi_f2iz
__aeabi_i2d
__aeabi_dadd
RadioControlEventImp
i2c_event
actuators_pwm_commit
inter_mcu_received_ap
time_since_last_ap
command_roll_trim
ap_state
command_pitch_trim
actuators
actuators_pwm_values
uart_check_free_space
uart_transmit
telemetry_mode_Fbw
uart2
downlink_nb_bytes
downlink_nb_msgs
ck_a
ck_b
downlink_nb_ovrn
electrical_periodic
sys_time
