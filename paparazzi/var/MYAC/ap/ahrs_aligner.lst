   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"ahrs_aligner.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ahrs_aligner_init,"ax",%progbits
  18              		.align	1
  19              		.global	ahrs_aligner_init
  20              		.thumb
  21              		.thumb_func
  23              	ahrs_aligner_init:
  24              	.LFB29:
  25              		.file 1 "subsystems/ahrs/ahrs_aligner.c"
   1:subsystems/ahrs/ahrs_aligner.c **** /*
   2:subsystems/ahrs/ahrs_aligner.c ****  * $Id$
   3:subsystems/ahrs/ahrs_aligner.c ****  *
   4:subsystems/ahrs/ahrs_aligner.c ****  * Copyright (C) 2008-2009 Antoine Drouin <poinix@gmail.com>
   5:subsystems/ahrs/ahrs_aligner.c ****  *
   6:subsystems/ahrs/ahrs_aligner.c ****  * This file is part of paparazzi.
   7:subsystems/ahrs/ahrs_aligner.c ****  *
   8:subsystems/ahrs/ahrs_aligner.c ****  * paparazzi is free software; you can redistribute it and/or modify
   9:subsystems/ahrs/ahrs_aligner.c ****  * it under the terms of the GNU General Public License as published by
  10:subsystems/ahrs/ahrs_aligner.c ****  * the Free Software Foundation; either version 2, or (at your option)
  11:subsystems/ahrs/ahrs_aligner.c ****  * any later version.
  12:subsystems/ahrs/ahrs_aligner.c ****  *
  13:subsystems/ahrs/ahrs_aligner.c ****  * paparazzi is distributed in the hope that it will be useful,
  14:subsystems/ahrs/ahrs_aligner.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:subsystems/ahrs/ahrs_aligner.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:subsystems/ahrs/ahrs_aligner.c ****  * GNU General Public License for more details.
  17:subsystems/ahrs/ahrs_aligner.c ****  *
  18:subsystems/ahrs/ahrs_aligner.c ****  * You should have received a copy of the GNU General Public License
  19:subsystems/ahrs/ahrs_aligner.c ****  * along with paparazzi; see the file COPYING.  If not, write to
  20:subsystems/ahrs/ahrs_aligner.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  21:subsystems/ahrs/ahrs_aligner.c ****  * Boston, MA 02111-1307, USA.
  22:subsystems/ahrs/ahrs_aligner.c ****  */
  23:subsystems/ahrs/ahrs_aligner.c **** 
  24:subsystems/ahrs/ahrs_aligner.c **** #include "ahrs_aligner.h"
  25:subsystems/ahrs/ahrs_aligner.c **** 
  26:subsystems/ahrs/ahrs_aligner.c **** #include <stdlib.h> /* for abs() */
  27:subsystems/ahrs/ahrs_aligner.c **** #include "subsystems/imu.h"
  28:subsystems/ahrs/ahrs_aligner.c **** #include "led.h"
  29:subsystems/ahrs/ahrs_aligner.c **** 
  30:subsystems/ahrs/ahrs_aligner.c **** struct AhrsAligner ahrs_aligner;
  31:subsystems/ahrs/ahrs_aligner.c **** 
  32:subsystems/ahrs/ahrs_aligner.c **** #define SAMPLES_NB PERIODIC_FREQUENCY
  33:subsystems/ahrs/ahrs_aligner.c **** 
  34:subsystems/ahrs/ahrs_aligner.c **** static struct Int32Rates gyro_sum;
  35:subsystems/ahrs/ahrs_aligner.c **** static struct Int32Vect3 accel_sum;
  36:subsystems/ahrs/ahrs_aligner.c **** static struct Int32Vect3 mag_sum;
  37:subsystems/ahrs/ahrs_aligner.c **** static int32_t ref_sensor_samples[SAMPLES_NB];
  38:subsystems/ahrs/ahrs_aligner.c **** static uint32_t samples_idx;
  39:subsystems/ahrs/ahrs_aligner.c **** 
  40:subsystems/ahrs/ahrs_aligner.c **** void ahrs_aligner_init(void) {
  26              		.loc 1 40 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  41:subsystems/ahrs/ahrs_aligner.c **** 
  42:subsystems/ahrs/ahrs_aligner.c ****   ahrs_aligner.status = AHRS_ALIGNER_RUNNING;
  31              		.loc 1 42 0
  32 0000 0A4A     		ldr	r2, .L2
  43:subsystems/ahrs/ahrs_aligner.c ****   INT_RATES_ZERO(gyro_sum);
  33              		.loc 1 43 0
  34 0002 0B49     		ldr	r1, .L2+4
  42:subsystems/ahrs/ahrs_aligner.c ****   ahrs_aligner.status = AHRS_ALIGNER_RUNNING;
  35              		.loc 1 42 0
  36 0004 0123     		movs	r3, #1
  37 0006 82F82C30 		strb	r3, [r2, #44]
  38              		.loc 1 43 0
  39 000a 0023     		movs	r3, #0
  40 000c 0B60     		str	r3, [r1, #0]
  41 000e 4B60     		str	r3, [r1, #4]
  42 0010 8B60     		str	r3, [r1, #8]
  44:subsystems/ahrs/ahrs_aligner.c ****   INT_VECT3_ZERO(accel_sum);
  43              		.loc 1 44 0
  44 0012 0849     		ldr	r1, .L2+8
  45:subsystems/ahrs/ahrs_aligner.c ****   INT_VECT3_ZERO(mag_sum);
  46:subsystems/ahrs/ahrs_aligner.c ****   samples_idx = 0;
  47:subsystems/ahrs/ahrs_aligner.c ****   ahrs_aligner.noise = 0;
  45              		.loc 1 47 0
  46 0014 5362     		str	r3, [r2, #36]
  44:subsystems/ahrs/ahrs_aligner.c ****   INT_VECT3_ZERO(accel_sum);
  47              		.loc 1 44 0
  48 0016 0B60     		str	r3, [r1, #0]
  49 0018 4B60     		str	r3, [r1, #4]
  50 001a 8B60     		str	r3, [r1, #8]
  45:subsystems/ahrs/ahrs_aligner.c ****   INT_VECT3_ZERO(mag_sum);
  51              		.loc 1 45 0
  52 001c 0649     		ldr	r1, .L2+12
  48:subsystems/ahrs/ahrs_aligner.c ****   ahrs_aligner.low_noise_cnt = 0;
  53              		.loc 1 48 0
  54 001e 9362     		str	r3, [r2, #40]
  45:subsystems/ahrs/ahrs_aligner.c ****   INT_VECT3_ZERO(mag_sum);
  55              		.loc 1 45 0
  56 0020 0B60     		str	r3, [r1, #0]
  57 0022 4B60     		str	r3, [r1, #4]
  58 0024 8B60     		str	r3, [r1, #8]
  46:subsystems/ahrs/ahrs_aligner.c ****   samples_idx = 0;
  59              		.loc 1 46 0
  60 0026 0549     		ldr	r1, .L2+16
  61 0028 0B60     		str	r3, [r1, #0]
  49:subsystems/ahrs/ahrs_aligner.c **** }
  62              		.loc 1 49 0
  63 002a 7047     		bx	lr
  64              	.L3:
  65              		.align	2
  66              	.L2:
  67 002c 00000000 		.word	.LANCHOR0
  68 0030 00000000 		.word	.LANCHOR1
  69 0034 00000000 		.word	.LANCHOR2
  70 0038 00000000 		.word	.LANCHOR3
  71 003c 00000000 		.word	.LANCHOR4
  72              		.cfi_endproc
  73              	.LFE29:
  75              		.section	.text.ahrs_aligner_run,"ax",%progbits
  76              		.align	1
  77              		.global	ahrs_aligner_run
  78              		.thumb
  79              		.thumb_func
  81              	ahrs_aligner_run:
  82              	.LFB30:
  50:subsystems/ahrs/ahrs_aligner.c **** 
  51:subsystems/ahrs/ahrs_aligner.c **** #ifndef LOW_NOISE_THRESHOLD
  52:subsystems/ahrs/ahrs_aligner.c **** #define LOW_NOISE_THRESHOLD 90000
  53:subsystems/ahrs/ahrs_aligner.c **** #endif
  54:subsystems/ahrs/ahrs_aligner.c **** #ifndef LOW_NOISE_TIME
  55:subsystems/ahrs/ahrs_aligner.c **** #define LOW_NOISE_TIME          5
  56:subsystems/ahrs/ahrs_aligner.c **** #endif
  57:subsystems/ahrs/ahrs_aligner.c **** 
  58:subsystems/ahrs/ahrs_aligner.c **** void ahrs_aligner_run(void) {
  83              		.loc 1 58 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 16
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  59:subsystems/ahrs/ahrs_aligner.c **** 
  60:subsystems/ahrs/ahrs_aligner.c ****   RATES_ADD(gyro_sum,  imu.gyro);
  87              		.loc 1 60 0
  88 0000 5F4A     		ldr	r2, .L14
  89 0002 604B     		ldr	r3, .L14+4
  90 0004 1168     		ldr	r1, [r2, #0]
  91 0006 1868     		ldr	r0, [r3, #0]
  58:subsystems/ahrs/ahrs_aligner.c **** void ahrs_aligner_run(void) {
  92              		.loc 1 58 0
  93 0008 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  94              	.LCFI0:
  95              		.cfi_def_cfa_offset 36
  96              		.cfi_offset 14, -4
  97              		.cfi_offset 11, -8
  98              		.cfi_offset 10, -12
  99              		.cfi_offset 9, -16
 100              		.cfi_offset 8, -20
 101              		.cfi_offset 7, -24
 102              		.cfi_offset 6, -28
 103              		.cfi_offset 5, -32
 104              		.cfi_offset 4, -36
 105              		.loc 1 60 0
 106 000c 00EB0108 		add	r8, r0, r1
 107 0010 5868     		ldr	r0, [r3, #4]
 108 0012 5168     		ldr	r1, [r2, #4]
 109 0014 9F68     		ldr	r7, [r3, #8]
 110 0016 00EB010C 		add	ip, r0, r1
 111 001a 9168     		ldr	r1, [r2, #8]
 112 001c C3F80080 		str	r8, [r3, #0]
 113 0020 7F18     		adds	r7, r7, r1
  61:subsystems/ahrs/ahrs_aligner.c ****   VECT3_ADD(accel_sum, imu.accel);
 114              		.loc 1 61 0
 115 0022 5949     		ldr	r1, .L14+8
  60:subsystems/ahrs/ahrs_aligner.c ****   RATES_ADD(gyro_sum,  imu.gyro);
 116              		.loc 1 60 0
 117 0024 C3F804C0 		str	ip, [r3, #4]
 118              		.loc 1 61 0
 119 0028 0E68     		ldr	r6, [r1, #0]
  60:subsystems/ahrs/ahrs_aligner.c ****   RATES_ADD(gyro_sum,  imu.gyro);
 120              		.loc 1 60 0
 121 002a 9F60     		str	r7, [r3, #8]
 122              		.loc 1 61 0
 123 002c D368     		ldr	r3, [r2, #12]
 124 002e 4D68     		ldr	r5, [r1, #4]
 125 0030 F618     		adds	r6, r6, r3
 126 0032 1369     		ldr	r3, [r2, #16]
 127 0034 D2F81490 		ldr	r9, [r2, #20]
 128 0038 ED18     		adds	r5, r5, r3
 129 003a 8B68     		ldr	r3, [r1, #8]
 130 003c 0E60     		str	r6, [r1, #0]
 131 003e 4B44     		add	r3, r9, r3
 132 0040 4D60     		str	r5, [r1, #4]
 133 0042 8B60     		str	r3, [r1, #8]
  62:subsystems/ahrs/ahrs_aligner.c ****   VECT3_ADD(mag_sum,   imu.mag);
 134              		.loc 1 62 0
 135 0044 5149     		ldr	r1, .L14+12
 136 0046 9069     		ldr	r0, [r2, #24]
 137 0048 0C68     		ldr	r4, [r1, #0]
 138 004a D1F804A0 		ldr	sl, [r1, #4]
 139 004e 2418     		adds	r4, r4, r0
 140 0050 D069     		ldr	r0, [r2, #28]
 141 0052 126A     		ldr	r2, [r2, #32]
 142 0054 5044     		add	r0, sl, r0
 143 0056 D1F808A0 		ldr	sl, [r1, #8]
 144 005a 0C60     		str	r4, [r1, #0]
 145 005c 0AEB020B 		add	fp, sl, r2
  63:subsystems/ahrs/ahrs_aligner.c **** 
  64:subsystems/ahrs/ahrs_aligner.c ****   ref_sensor_samples[samples_idx] = imu.accel.z;
 146              		.loc 1 64 0
 147 0060 4B4A     		ldr	r2, .L14+16
  62:subsystems/ahrs/ahrs_aligner.c ****   VECT3_ADD(mag_sum,   imu.mag);
 148              		.loc 1 62 0
 149 0062 4860     		str	r0, [r1, #4]
 150 0064 C1F808B0 		str	fp, [r1, #8]
 151              		.loc 1 64 0
 152 0068 DFF838A1 		ldr	sl, .L14+36
 153 006c 1168     		ldr	r1, [r2, #0]
  58:subsystems/ahrs/ahrs_aligner.c **** void ahrs_aligner_run(void) {
 154              		.loc 1 58 0
 155 006e 85B0     		sub	sp, sp, #20
 156              	.LCFI1:
 157              		.cfi_def_cfa_offset 56
 158              		.loc 1 64 0
 159 0070 4AF82190 		str	r9, [sl, r1, lsl #2]
  65:subsystems/ahrs/ahrs_aligner.c ****   samples_idx++;
 160              		.loc 1 65 0
 161 0074 0131     		adds	r1, r1, #1
 162 0076 1160     		str	r1, [r2, #0]
 163              	.LBB2:
  66:subsystems/ahrs/ahrs_aligner.c **** 
  67:subsystems/ahrs/ahrs_aligner.c **** #ifdef AHRS_ALIGNER_LED
  68:subsystems/ahrs/ahrs_aligner.c ****   RunOnceEvery(50, {LED_TOGGLE(AHRS_ALIGNER_LED);});
 164              		.loc 1 68 0
 165 0078 464A     		ldr	r2, .L14+20
 166 007a B2F80090 		ldrh	r9, [r2, #0]
 167 007e 09F10109 		add	r9, r9, #1
 168 0082 1FFA89F9 		uxth	r9, r9
 169 0086 B9F1310F 		cmp	r9, #49
 170 008a A2F80090 		strh	r9, [r2, #0]	@ movhi
 171 008e 0AD9     		bls	.L5
 172              		.loc 1 68 0 is_stmt 0 discriminator 1
 173 0090 4FF00009 		mov	r9, #0
 174 0094 A2F80090 		strh	r9, [r2, #0]	@ movhi
 175 0098 3F4A     		ldr	r2, .L14+24
 176 009a D2F80C90 		ldr	r9, [r2, #12]
 177 009e 89F01009 		eor	r9, r9, #16
 178 00a2 C2F80C90 		str	r9, [r2, #12]
 179              	.L5:
 180              	.LBE2:
  69:subsystems/ahrs/ahrs_aligner.c **** #endif
  70:subsystems/ahrs/ahrs_aligner.c **** 
  71:subsystems/ahrs/ahrs_aligner.c ****   if (samples_idx >= SAMPLES_NB) {
 181              		.loc 1 71 0 is_stmt 1
 182 00a6 7729     		cmp	r1, #119
 183 00a8 66D9     		bls	.L4
 184              	.LVL0:
 185              	.LBB3:
  72:subsystems/ahrs/ahrs_aligner.c ****     int32_t avg_ref_sensor = accel_sum.z;
  73:subsystems/ahrs/ahrs_aligner.c ****     if ( avg_ref_sensor >= 0)
 186              		.loc 1 73 0
 187 00aa 002B     		cmp	r3, #0
  74:subsystems/ahrs/ahrs_aligner.c ****       avg_ref_sensor += SAMPLES_NB / 2;
 188              		.loc 1 74 0
 189 00ac ACBF     		ite	ge
 190 00ae 03F13C02 		addge	r2, r3, #60
 191              	.LVL1:
  75:subsystems/ahrs/ahrs_aligner.c ****     else
  76:subsystems/ahrs/ahrs_aligner.c ****       avg_ref_sensor -= SAMPLES_NB / 2;
 192              		.loc 1 76 0
 193 00b2 A3F13C02 		sublt	r2, r3, #60
 194              	.LVL2:
  77:subsystems/ahrs/ahrs_aligner.c ****     avg_ref_sensor /= SAMPLES_NB;
 195              		.loc 1 77 0
 196 00b6 7821     		movs	r1, #120
 197 00b8 92FBF1F1 		sdiv	r1, r2, r1
 198              	.LBB4:
  78:subsystems/ahrs/ahrs_aligner.c **** 
  79:subsystems/ahrs/ahrs_aligner.c ****     ahrs_aligner.noise = 0;
  80:subsystems/ahrs/ahrs_aligner.c ****     int i;
  81:subsystems/ahrs/ahrs_aligner.c ****     for (i=0; i<SAMPLES_NB; i++) {
  82:subsystems/ahrs/ahrs_aligner.c ****       int32_t diff = ref_sensor_samples[i] - avg_ref_sensor;
 199              		.loc 1 82 0
 200 00bc DFF8E490 		ldr	r9, .L14+36
 201              	.LBE4:
  77:subsystems/ahrs/ahrs_aligner.c ****     avg_ref_sensor /= SAMPLES_NB;
 202              		.loc 1 77 0
 203 00c0 0022     		movs	r2, #0
 204              	.LVL3:
 205 00c2 0391     		str	r1, [sp, #12]
 206              	.LVL4:
 207              	.LBB5:
 208              		.loc 1 82 0
 209 00c4 C246     		mov	sl, r8
 210              	.LBE5:
  77:subsystems/ahrs/ahrs_aligner.c ****     avg_ref_sensor /= SAMPLES_NB;
 211              		.loc 1 77 0
 212 00c6 1146     		mov	r1, r2
 213              	.LVL5:
 214              	.LBB6:
 215              		.loc 1 82 0
 216 00c8 0193     		str	r3, [sp, #4]
 217              	.LVL6:
 218              	.L9:
 219              		.loc 1 82 0 is_stmt 0 discriminator 2
 220 00ca 52F80930 		ldr	r3, [r2, r9]
 221 00ce DDF80C80 		ldr	r8, [sp, #12]
  83:subsystems/ahrs/ahrs_aligner.c ****       ahrs_aligner.noise += abs(diff);
 222              		.loc 1 83 0 is_stmt 1 discriminator 2
 223 00d2 0432     		adds	r2, r2, #4
 224              	.LVL7:
  82:subsystems/ahrs/ahrs_aligner.c ****       int32_t diff = ref_sensor_samples[i] - avg_ref_sensor;
 225              		.loc 1 82 0 discriminator 2
 226 00d4 C8EB0303 		rsb	r3, r8, r3
 227              		.loc 1 83 0 discriminator 2
 228 00d8 9846     		mov	r8, r3
 229 00da B8F1000F 		cmp	r8, #0
 230 00de B8BF     		it	lt
 231 00e0 C8F10008 		rsblt	r8, r8, #0
 232              	.LBE6:
  81:subsystems/ahrs/ahrs_aligner.c ****     for (i=0; i<SAMPLES_NB; i++) {
 233              		.loc 1 81 0 discriminator 2
 234 00e4 B2F5F07F 		cmp	r2, #480
 235              	.LBB7:
  82:subsystems/ahrs/ahrs_aligner.c ****       int32_t diff = ref_sensor_samples[i] - avg_ref_sensor;
 236              		.loc 1 82 0 discriminator 2
 237 00e8 0293     		str	r3, [sp, #8]
 238              		.loc 1 83 0 discriminator 2
 239 00ea 4144     		add	r1, r1, r8
 240              	.LBE7:
  81:subsystems/ahrs/ahrs_aligner.c ****     for (i=0; i<SAMPLES_NB; i++) {
 241              		.loc 1 81 0 discriminator 2
 242 00ec EDD1     		bne	.L9
 243 00ee 019B     		ldr	r3, [sp, #4]
  81:subsystems/ahrs/ahrs_aligner.c ****     for (i=0; i<SAMPLES_NB; i++) {
 244              		.loc 1 81 0 is_stmt 0
 245 00f0 2A4A     		ldr	r2, .L14+28
 246              	.LVL8:
  84:subsystems/ahrs/ahrs_aligner.c ****     }
  85:subsystems/ahrs/ahrs_aligner.c **** 
  86:subsystems/ahrs/ahrs_aligner.c ****     RATES_SDIV(ahrs_aligner.lp_gyro,  gyro_sum,  SAMPLES_NB);
 247              		.loc 1 86 0 is_stmt 1
 248 00f2 4FF07809 		mov	r9, #120
  87:subsystems/ahrs/ahrs_aligner.c ****     VECT3_SDIV(ahrs_aligner.lp_accel, accel_sum, SAMPLES_NB);
 249              		.loc 1 87 0
 250 00f6 93FBF9F3 		sdiv	r3, r3, r9
  88:subsystems/ahrs/ahrs_aligner.c ****     VECT3_SDIV(ahrs_aligner.lp_mag,   mag_sum,   SAMPLES_NB);
 251              		.loc 1 88 0
 252 00fa 90FBF9F0 		sdiv	r0, r0, r9
  87:subsystems/ahrs/ahrs_aligner.c ****     VECT3_SDIV(ahrs_aligner.lp_accel, accel_sum, SAMPLES_NB);
 253              		.loc 1 87 0
 254 00fe 5361     		str	r3, [r2, #20]
 255              		.loc 1 88 0
 256 0100 D061     		str	r0, [r2, #28]
 257 0102 9BFBF9F3 		sdiv	r3, fp, r9
  89:subsystems/ahrs/ahrs_aligner.c **** 
  90:subsystems/ahrs/ahrs_aligner.c ****     INT_RATES_ZERO(gyro_sum);
 258              		.loc 1 90 0
 259 0106 1F48     		ldr	r0, .L14+4
  88:subsystems/ahrs/ahrs_aligner.c ****     VECT3_SDIV(ahrs_aligner.lp_mag,   mag_sum,   SAMPLES_NB);
 260              		.loc 1 88 0
 261 0108 1362     		str	r3, [r2, #32]
 262              		.loc 1 90 0
 263 010a 0023     		movs	r3, #0
 264 010c 0360     		str	r3, [r0, #0]
 265 010e 4360     		str	r3, [r0, #4]
 266 0110 8360     		str	r3, [r0, #8]
  91:subsystems/ahrs/ahrs_aligner.c ****     INT_VECT3_ZERO(accel_sum);
 267              		.loc 1 91 0
 268 0112 1D48     		ldr	r0, .L14+8
  86:subsystems/ahrs/ahrs_aligner.c ****     RATES_SDIV(ahrs_aligner.lp_gyro,  gyro_sum,  SAMPLES_NB);
 269              		.loc 1 86 0
 270 0114 9AFBF9F8 		sdiv	r8, sl, r9
 271              		.loc 1 91 0
 272 0118 0360     		str	r3, [r0, #0]
 273 011a 4360     		str	r3, [r0, #4]
 274 011c 8360     		str	r3, [r0, #8]
  92:subsystems/ahrs/ahrs_aligner.c ****     INT_VECT3_ZERO(mag_sum);
 275              		.loc 1 92 0
 276 011e 1B48     		ldr	r0, .L14+12
  86:subsystems/ahrs/ahrs_aligner.c ****     RATES_SDIV(ahrs_aligner.lp_gyro,  gyro_sum,  SAMPLES_NB);
 277              		.loc 1 86 0
 278 0120 9CFBF9FC 		sdiv	ip, ip, r9
 279              		.loc 1 92 0
 280 0124 0360     		str	r3, [r0, #0]
 281 0126 4360     		str	r3, [r0, #4]
 282 0128 8360     		str	r3, [r0, #8]
  93:subsystems/ahrs/ahrs_aligner.c ****     samples_idx = 0;
 283              		.loc 1 93 0
 284 012a 1948     		ldr	r0, .L14+16
  86:subsystems/ahrs/ahrs_aligner.c ****     RATES_SDIV(ahrs_aligner.lp_gyro,  gyro_sum,  SAMPLES_NB);
 285              		.loc 1 86 0
 286 012c 97FBF9F7 		sdiv	r7, r7, r9
 287              		.loc 1 93 0
 288 0130 0360     		str	r3, [r0, #0]
  94:subsystems/ahrs/ahrs_aligner.c **** 
  95:subsystems/ahrs/ahrs_aligner.c ****     if (ahrs_aligner.noise < LOW_NOISE_THRESHOLD)
 289              		.loc 1 95 0
 290 0132 1B4B     		ldr	r3, .L14+32
  87:subsystems/ahrs/ahrs_aligner.c ****     VECT3_SDIV(ahrs_aligner.lp_accel, accel_sum, SAMPLES_NB);
 291              		.loc 1 87 0
 292 0134 96FBF9F6 		sdiv	r6, r6, r9
 293 0138 95FBF9F5 		sdiv	r5, r5, r9
  88:subsystems/ahrs/ahrs_aligner.c ****     VECT3_SDIV(ahrs_aligner.lp_mag,   mag_sum,   SAMPLES_NB);
 294              		.loc 1 88 0
 295 013c 94FBF9F4 		sdiv	r4, r4, r9
 296              		.loc 1 95 0
 297 0140 9942     		cmp	r1, r3
  81:subsystems/ahrs/ahrs_aligner.c ****     for (i=0; i<SAMPLES_NB; i++) {
 298              		.loc 1 81 0
 299 0142 5162     		str	r1, [r2, #36]
  86:subsystems/ahrs/ahrs_aligner.c ****     RATES_SDIV(ahrs_aligner.lp_gyro,  gyro_sum,  SAMPLES_NB);
 300              		.loc 1 86 0
 301 0144 C2F80080 		str	r8, [r2, #0]
 302 0148 C2F804C0 		str	ip, [r2, #4]
 303 014c 9760     		str	r7, [r2, #8]
  87:subsystems/ahrs/ahrs_aligner.c ****     VECT3_SDIV(ahrs_aligner.lp_accel, accel_sum, SAMPLES_NB);
 304              		.loc 1 87 0
 305 014e D660     		str	r6, [r2, #12]
 306 0150 1561     		str	r5, [r2, #16]
  88:subsystems/ahrs/ahrs_aligner.c ****     VECT3_SDIV(ahrs_aligner.lp_mag,   mag_sum,   SAMPLES_NB);
 307              		.loc 1 88 0
 308 0152 9461     		str	r4, [r2, #24]
  96:subsystems/ahrs/ahrs_aligner.c ****       ahrs_aligner.low_noise_cnt++;
 309              		.loc 1 96 0
 310 0154 936A     		ldr	r3, [r2, #40]
  95:subsystems/ahrs/ahrs_aligner.c ****     if (ahrs_aligner.noise < LOW_NOISE_THRESHOLD)
 311              		.loc 1 95 0
 312 0156 01DC     		bgt	.L10
 313              		.loc 1 96 0
 314 0158 0133     		adds	r3, r3, #1
 315 015a 02E0     		b	.L13
 316              	.L10:
  97:subsystems/ahrs/ahrs_aligner.c ****     else
  98:subsystems/ahrs/ahrs_aligner.c ****       if ( ahrs_aligner.low_noise_cnt > 0)
 317              		.loc 1 98 0
 318 015c 002B     		cmp	r3, #0
 319 015e 01DD     		ble	.L11
  99:subsystems/ahrs/ahrs_aligner.c ****         ahrs_aligner.low_noise_cnt--;
 320              		.loc 1 99 0
 321 0160 013B     		subs	r3, r3, #1
 322              	.L13:
 323 0162 9362     		str	r3, [r2, #40]
 324              	.L11:
 100:subsystems/ahrs/ahrs_aligner.c **** 
 101:subsystems/ahrs/ahrs_aligner.c ****     if (ahrs_aligner.low_noise_cnt > LOW_NOISE_TIME) {
 325              		.loc 1 101 0
 326 0164 936A     		ldr	r3, [r2, #40]
 327 0166 052B     		cmp	r3, #5
 328 0168 06DD     		ble	.L4
 102:subsystems/ahrs/ahrs_aligner.c ****       ahrs_aligner.status = AHRS_ALIGNER_LOCKED;
 329              		.loc 1 102 0
 330 016a 0C4B     		ldr	r3, .L14+28
 331 016c 0222     		movs	r2, #2
 332 016e 83F82C20 		strb	r2, [r3, #44]
 103:subsystems/ahrs/ahrs_aligner.c **** #ifdef AHRS_ALIGNER_LED
 104:subsystems/ahrs/ahrs_aligner.c ****       LED_ON(AHRS_ALIGNER_LED);
 333              		.loc 1 104 0
 334 0172 094B     		ldr	r3, .L14+24
 335 0174 1022     		movs	r2, #16
 336 0176 5A61     		str	r2, [r3, #20]
 337              	.LVL9:
 338              	.L4:
 339              	.LBE3:
 105:subsystems/ahrs/ahrs_aligner.c **** #endif
 106:subsystems/ahrs/ahrs_aligner.c ****     }
 107:subsystems/ahrs/ahrs_aligner.c ****   }
 108:subsystems/ahrs/ahrs_aligner.c **** 
 109:subsystems/ahrs/ahrs_aligner.c **** }
 340              		.loc 1 109 0
 341 0178 05B0     		add	sp, sp, #20
 342 017a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 343              	.L15:
 344 017e 00BF     		.align	2
 345              	.L14:
 346 0180 00000000 		.word	imu
 347 0184 00000000 		.word	.LANCHOR1
 348 0188 00000000 		.word	.LANCHOR2
 349 018c 00000000 		.word	.LANCHOR3
 350 0190 00000000 		.word	.LANCHOR4
 351 0194 00000000 		.word	.LANCHOR6
 352 0198 000C0140 		.word	1073810432
 353 019c 00000000 		.word	.LANCHOR0
 354 01a0 8F5F0100 		.word	89999
 355 01a4 00000000 		.word	.LANCHOR5
 356              		.cfi_endproc
 357              	.LFE30:
 359              		.global	ahrs_aligner
 360              		.section	.bss.gyro_sum,"aw",%nobits
 361              		.align	2
 362              		.set	.LANCHOR1,. + 0
 365              	gyro_sum:
 366 0000 00000000 		.space	12
 366      00000000 
 366      00000000 
 367              		.section	.bss.mag_sum,"aw",%nobits
 368              		.align	2
 369              		.set	.LANCHOR3,. + 0
 372              	mag_sum:
 373 0000 00000000 		.space	12
 373      00000000 
 373      00000000 
 374              		.section	.bss.samples_idx,"aw",%nobits
 375              		.align	2
 376              		.set	.LANCHOR4,. + 0
 379              	samples_idx:
 380 0000 00000000 		.space	4
 381              		.section	.bss.ahrs_aligner,"aw",%nobits
 382              		.align	2
 383              		.set	.LANCHOR0,. + 0
 386              	ahrs_aligner:
 387 0000 00000000 		.space	48
 387      00000000 
 387      00000000 
 387      00000000 
 387      00000000 
 388              		.section	.bss.ref_sensor_samples,"aw",%nobits
 389              		.align	2
 390              		.set	.LANCHOR5,. + 0
 393              	ref_sensor_samples:
 394 0000 00000000 		.space	480
 394      00000000 
 394      00000000 
 394      00000000 
 394      00000000 
 395              		.section	.bss.accel_sum,"aw",%nobits
 396              		.align	2
 397              		.set	.LANCHOR2,. + 0
 400              	accel_sum:
 401 0000 00000000 		.space	12
 401      00000000 
 401      00000000 
 402              		.section	.bss.prescaler.3617,"aw",%nobits
 403              		.align	1
 404              		.set	.LANCHOR6,. + 0
 407              	prescaler.3617:
 408 0000 0000     		.space	2
 409              		.text
 410              	.Letext0:
 411              		.file 2 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 412              		.file 3 "./math/pprz_algebra_int.h"
 413              		.file 4 "subsystems/ahrs/ahrs_aligner.h"
 414              		.file 5 "./subsystems/imu.h"
 415              		.file 6 "./subsystems/imu/imu_aspirin2.h"
 416              		.file 7 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ahrs_aligner.c
     /tmp/ccSfS6nO.s:18     .text.ahrs_aligner_init:0000000000000000 $t
     /tmp/ccSfS6nO.s:23     .text.ahrs_aligner_init:0000000000000000 ahrs_aligner_init
     /tmp/ccSfS6nO.s:67     .text.ahrs_aligner_init:000000000000002c $d
     /tmp/ccSfS6nO.s:76     .text.ahrs_aligner_run:0000000000000000 $t
     /tmp/ccSfS6nO.s:81     .text.ahrs_aligner_run:0000000000000000 ahrs_aligner_run
     /tmp/ccSfS6nO.s:346    .text.ahrs_aligner_run:0000000000000180 $d
     /tmp/ccSfS6nO.s:386    .bss.ahrs_aligner:0000000000000000 ahrs_aligner
     /tmp/ccSfS6nO.s:361    .bss.gyro_sum:0000000000000000 $d
     /tmp/ccSfS6nO.s:365    .bss.gyro_sum:0000000000000000 gyro_sum
     /tmp/ccSfS6nO.s:368    .bss.mag_sum:0000000000000000 $d
     /tmp/ccSfS6nO.s:372    .bss.mag_sum:0000000000000000 mag_sum
     /tmp/ccSfS6nO.s:375    .bss.samples_idx:0000000000000000 $d
     /tmp/ccSfS6nO.s:379    .bss.samples_idx:0000000000000000 samples_idx
     /tmp/ccSfS6nO.s:382    .bss.ahrs_aligner:0000000000000000 $d
     /tmp/ccSfS6nO.s:389    .bss.ref_sensor_samples:0000000000000000 $d
     /tmp/ccSfS6nO.s:393    .bss.ref_sensor_samples:0000000000000000 ref_sensor_samples
     /tmp/ccSfS6nO.s:396    .bss.accel_sum:0000000000000000 $d
     /tmp/ccSfS6nO.s:400    .bss.accel_sum:0000000000000000 accel_sum
     /tmp/ccSfS6nO.s:403    .bss.prescaler.3617:0000000000000000 $d
     /tmp/ccSfS6nO.s:407    .bss.prescaler.3617:0000000000000000 prescaler.3617
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
imu
