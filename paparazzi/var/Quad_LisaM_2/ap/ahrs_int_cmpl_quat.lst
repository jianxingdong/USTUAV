   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"ahrs_int_cmpl_quat.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_i2f
  18              		.global	__aeabi_fmul
  19              		.global	__aeabi_f2iz
  20              		.section	.text.ahrs_init,"ax",%progbits
  21              		.align	1
  22              		.global	ahrs_init
  23              		.thumb
  24              		.thumb_func
  26              	ahrs_init:
  27              	.LFB10:
  28              		.file 1 "subsystems/ahrs/ahrs_int_cmpl_quat.c"
   1:subsystems/ahrs/ahrs_int_cmpl_quat.c **** /*
   2:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * Copyright (C) 2008-2012 The Paparazzi Team
   3:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
   4:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * This file is part of paparazzi.
   5:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
   6:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * it under the terms of the GNU General Public License as published by
   8:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * any later version.
  10:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
  11:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * GNU General Public License for more details.
  15:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
  16:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * You should have received a copy of the GNU General Public License
  17:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * along with paparazzi; see the file COPYING.  If not, write to
  18:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  19:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  * Boston, MA 02111-1307, USA.
  20:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  */
  21:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  22:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  23:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "subsystems/ahrs/ahrs_int_cmpl_quat.h"
  24:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "subsystems/ahrs/ahrs_aligner.h"
  25:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "subsystems/ahrs/ahrs_int_utils.h"
  26:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  27:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "subsystems/imu.h"
  28:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if USE_GPS
  29:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "subsystems/gps.h"
  30:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  31:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "math/pprz_trig_int.h"
  32:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "math/pprz_algebra_int.h"
  33:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  34:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #include "generated/airframe.h"
  35:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  36:subsystems/ahrs/ahrs_int_cmpl_quat.c **** //#include "../../test/pprz_algebra_print.h"
  37:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  38:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void ahrs_update_mag_full(void);
  39:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void ahrs_update_mag_2d(void);
  40:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  41:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #ifdef AHRS_MAG_UPDATE_YAW_ONLY
  42:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #warning "AHRS_MAG_UPDATE_YAW_ONLY is deprecated, please remove it. This is the default behaviour. 
  43:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  44:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  45:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if USE_MAGNETOMETER && AHRS_USE_GPS_HEADING
  46:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #warning "Using magnetometer and GPS course to update heading. Probably better to set USE_MAGNETOME
  47:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  48:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  49:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #ifndef AHRS_PROPAGATE_FREQUENCY
  50:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #define AHRS_PROPAGATE_FREQUENCY PERIODIC_FREQUENCY
  51:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  52:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  53:subsystems/ahrs/ahrs_int_cmpl_quat.c **** struct AhrsIntCmpl ahrs_impl;
  54:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  55:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void compute_imu_euler_and_rmat_from_quat(void);
  56:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void compute_body_euler_and_rmat_from_quat(void);
  57:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void compute_imu_orientation(void);
  58:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void compute_body_orientation(void);
  59:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  60:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_init(void) {
  29              		.loc 1 60 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, sl, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 32
  36              		.cfi_offset 14, -4
  37              		.cfi_offset 10, -8
  38              		.cfi_offset 9, -12
  39              		.cfi_offset 8, -16
  40              		.cfi_offset 7, -20
  41              		.cfi_offset 6, -24
  42              		.cfi_offset 5, -28
  43              		.cfi_offset 4, -32
  61:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  62:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs.status = AHRS_UNINIT;
  44              		.loc 1 62 0
  45 0004 524E     		ldr	r6, .L2
  63:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.ltp_vel_norm_valid = FALSE;
  64:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = FALSE;
  65:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  66:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* set ltp_to_body to zero */
  67:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_EULERS_ZERO(ahrs.ltp_to_body_euler);
  68:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_ZERO(ahrs.ltp_to_body_quat);
  46              		.loc 1 68 0
  47 0006 4FF40043 		mov	r3, #32768
  48 000a F364     		str	r3, [r6, #76]
  69:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_ZERO(ahrs.ltp_to_body_rmat);
  49              		.loc 1 69 0
  50 000c 4FF48043 		mov	r3, #16384
  51 0010 B366     		str	r3, [r6, #104]
  52 0012 B367     		str	r3, [r6, #120]
  53 0014 C6F88830 		str	r3, [r6, #136]
  70:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs.body_rate);
  71:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  72:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* set ltp_to_imu so that body is zero */
  73:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
  54              		.loc 1 73 0
  55 0018 4E4B     		ldr	r3, .L2+4
  63:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.ltp_vel_norm_valid = FALSE;
  56              		.loc 1 63 0
  57 001a 4F4D     		ldr	r5, .L2+8
  58              		.loc 1 73 0
  59 001c D3F88420 		ldr	r2, [r3, #132]
  62:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs.status = AHRS_UNINIT;
  60              		.loc 1 62 0
  61 0020 0024     		movs	r4, #0
  62              		.loc 1 73 0
  63 0022 3260     		str	r2, [r6, #0]
  64 0024 D3F88820 		ldr	r2, [r3, #136]
  74:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RMAT_COPY(ahrs.ltp_to_imu_rmat, imu.body_to_imu_rmat);
  65              		.loc 1 74 0
  66 0028 06F11C07 		add	r7, r6, #28
  73:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
  67              		.loc 1 73 0
  68 002c 7260     		str	r2, [r6, #4]
  69 002e D3F88C20 		ldr	r2, [r3, #140]
  70              		.loc 1 74 0
  71 0032 03F1940E 		add	lr, r3, #148
  73:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
  72              		.loc 1 73 0
  73 0036 B260     		str	r2, [r6, #8]
  74 0038 D3F89020 		ldr	r2, [r3, #144]
  62:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs.status = AHRS_UNINIT;
  75              		.loc 1 62 0
  76 003c 86F89840 		strb	r4, [r6, #152]
  73:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
  77              		.loc 1 73 0
  78 0040 F260     		str	r2, [r6, #12]
  63:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.ltp_vel_norm_valid = FALSE;
  79              		.loc 1 63 0
  80 0042 85F84440 		strb	r4, [r5, #68]
  81              		.loc 1 74 0
  82 0046 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
  64:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = FALSE;
  83              		.loc 1 64 0
  84 004a 85F84740 		strb	r4, [r5, #71]
  67:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_EULERS_ZERO(ahrs.ltp_to_body_euler);
  85              		.loc 1 67 0
  86 004e F465     		str	r4, [r6, #92]
  87 0050 3466     		str	r4, [r6, #96]
  88 0052 7466     		str	r4, [r6, #100]
  68:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_ZERO(ahrs.ltp_to_body_quat);
  89              		.loc 1 68 0
  90 0054 3465     		str	r4, [r6, #80]
  91 0056 7465     		str	r4, [r6, #84]
  92 0058 B465     		str	r4, [r6, #88]
  69:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_ZERO(ahrs.ltp_to_body_rmat);
  93              		.loc 1 69 0
  94 005a F466     		str	r4, [r6, #108]
  95 005c 3467     		str	r4, [r6, #112]
  96 005e 7467     		str	r4, [r6, #116]
  97 0060 F467     		str	r4, [r6, #124]
  98 0062 C6F88040 		str	r4, [r6, #128]
  99 0066 C6F88440 		str	r4, [r6, #132]
  70:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs.body_rate);
 100              		.loc 1 70 0
 101 006a C6F88C40 		str	r4, [r6, #140]
 102 006e C6F89040 		str	r4, [r6, #144]
 103 0072 C6F89440 		str	r4, [r6, #148]
 104              		.loc 1 74 0
 105 0076 0FC7     		stmia	r7!, {r0, r1, r2, r3}
 106 0078 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 107 007c 0FC7     		stmia	r7!, {r0, r1, r2, r3}
 108 007e DEF80030 		ldr	r3, [lr, #0]
 109 0082 3B60     		str	r3, [r7, #0]
 110              	.LBB67:
  75:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_RMAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_rmat);
 111              		.loc 1 75 0
 112 0084 F069     		ldr	r0, [r6, #28]
 113 0086 FFF7FEFF 		bl	__aeabi_i2f
 114 008a 4FF06251 		mov	r1, #947912704
 115 008e FFF7FEFF 		bl	__aeabi_fmul
 116 0092 0746     		mov	r7, r0
 117              	.LVL0:
 118 0094 306A     		ldr	r0, [r6, #32]
 119              	.LVL1:
 120 0096 FFF7FEFF 		bl	__aeabi_i2f
 121 009a 4FF06251 		mov	r1, #947912704
 122 009e FFF7FEFF 		bl	__aeabi_fmul
 123 00a2 8246     		mov	sl, r0
 124              	.LVL2:
 125 00a4 706A     		ldr	r0, [r6, #36]
 126              	.LVL3:
 127 00a6 FFF7FEFF 		bl	__aeabi_i2f
 128 00aa 4FF06251 		mov	r1, #947912704
 129 00ae FFF7FEFF 		bl	__aeabi_fmul
 130 00b2 8046     		mov	r8, r0
 131              	.LVL4:
 132 00b4 306B     		ldr	r0, [r6, #48]
 133              	.LVL5:
 134 00b6 FFF7FEFF 		bl	__aeabi_i2f
 135              	.LVL6:
 136 00ba 4FF06251 		mov	r1, #947912704
 137 00be FFF7FEFF 		bl	__aeabi_fmul
 138 00c2 8146     		mov	r9, r0
 139 00c4 F06B     		ldr	r0, [r6, #60]
 140 00c6 FFF7FEFF 		bl	__aeabi_i2f
 141 00ca 4FF06251 		mov	r1, #947912704
 142 00ce FFF7FEFF 		bl	__aeabi_fmul
 143 00d2 0146     		mov	r1, r0
 144 00d4 4846     		mov	r0, r9
 145 00d6 FFF7FEFF 		bl	atan2f
 146 00da 8146     		mov	r9, r0
 147              	.LVL7:
 148 00dc 4046     		mov	r0, r8
 149              	.LVL8:
 150 00de FFF7FEFF 		bl	asinf
 151 00e2 3946     		mov	r1, r7
 152 00e4 8046     		mov	r8, r0
 153              	.LVL9:
 154 00e6 5046     		mov	r0, sl
 155              	.LVL10:
 156 00e8 FFF7FEFF 		bl	atan2f
 157 00ec 4FF08B41 		mov	r1, #1166016512
 158 00f0 0746     		mov	r7, r0
 159              	.LVL11:
 160 00f2 4846     		mov	r0, r9
 161              	.LVL12:
 162 00f4 FFF7FEFF 		bl	__aeabi_fmul
 163 00f8 FFF7FEFF 		bl	__aeabi_f2iz
 164 00fc 4FF08B41 		mov	r1, #1166016512
 165 0100 3061     		str	r0, [r6, #16]
 166 0102 08F10040 		add	r0, r8, #-2147483648
 167 0106 FFF7FEFF 		bl	__aeabi_fmul
 168 010a FFF7FEFF 		bl	__aeabi_f2iz
 169 010e 4FF08B41 		mov	r1, #1166016512
 170 0112 7061     		str	r0, [r6, #20]
 171 0114 3846     		mov	r0, r7
 172 0116 FFF7FEFF 		bl	__aeabi_fmul
 173 011a FFF7FEFF 		bl	__aeabi_f2iz
 174              	.LBE67:
  76:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs.imu_rate);
  77:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  78:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.gyro_bias);
  79:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.rate_correction);
  80:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.high_rez_bias);
 175              		.loc 1 80 0
 176 011e 0022     		movs	r2, #0
 177 0120 0023     		movs	r3, #0
 178              	.LBB68:
  75:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_RMAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_rmat);
 179              		.loc 1 75 0
 180 0122 B061     		str	r0, [r6, #24]
 181              	.LBE68:
  76:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs.imu_rate);
 182              		.loc 1 76 0
 183 0124 3464     		str	r4, [r6, #64]
 184 0126 7464     		str	r4, [r6, #68]
 185 0128 B464     		str	r4, [r6, #72]
  78:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.gyro_bias);
 186              		.loc 1 78 0
 187 012a 2C60     		str	r4, [r5, #0]
 188 012c 6C60     		str	r4, [r5, #4]
 189 012e AC60     		str	r4, [r5, #8]
  79:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.rate_correction);
 190              		.loc 1 79 0
 191 0130 EC60     		str	r4, [r5, #12]
 192 0132 2C61     		str	r4, [r5, #16]
 193 0134 6C61     		str	r4, [r5, #20]
 194              		.loc 1 80 0
 195 0136 C5E90A23 		strd	r2, [r5, #40]
 196 013a C5E90C23 		strd	r2, [r5, #48]
 197 013e C5E90E23 		strd	r2, [r5, #56]
  81:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  82:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if AHRS_GRAVITY_UPDATE_COORDINATED_TURN
  83:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.correct_gravity = TRUE;
  84:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #else
  85:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.correct_gravity = FALSE;
 198              		.loc 1 85 0
 199 0142 85F84540 		strb	r4, [r5, #69]
  86:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  87:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  88:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if AHRS_GRAVITY_UPDATE_NORM_HEURISTIC
  89:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.use_gravity_heuristic = TRUE;
  90:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #else
  91:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.use_gravity_heuristic = FALSE;
 200              		.loc 1 91 0
 201 0146 85F84640 		strb	r4, [r5, #70]
  92:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
  93:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  94:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 202              		.loc 1 94 0
 203 014a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 204              	.L3:
 205 014e 00BF     		.align	2
 206              	.L2:
 207 0150 00000000 		.word	ahrs
 208 0154 00000000 		.word	imu
 209 0158 00000000 		.word	.LANCHOR0
 210              		.cfi_endproc
 211              	.LFE10:
 213              		.global	__aeabi_fadd
 214              		.global	__aeabi_f2d
 215              		.global	__aeabi_ddiv
 216              		.global	__aeabi_dmul
 217              		.global	__aeabi_d2f
 218              		.global	__aeabi_dsub
 219              		.global	__aeabi_dcmplt
 220              		.global	__aeabi_dcmpgt
 221              		.global	__aeabi_fsub
 222              		.global	__aeabi_fcmpgt
 223              		.global	__aeabi_fdiv
 224              		.global	__aeabi_dadd
 225              		.global	__aeabi_fcmplt
 226              		.section	.text.ahrs_align,"ax",%progbits
 227              		.align	1
 228              		.global	ahrs_align
 229              		.thumb
 230              		.thumb_func
 232              	ahrs_align:
 233              	.LFB11:
  95:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  96:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_align(void) {
 234              		.loc 1 96 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 48
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              	.LVL13:
 239 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 240              	.LCFI1:
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 14, -4
 243              		.cfi_offset 11, -8
 244              		.cfi_offset 10, -12
 245              		.cfi_offset 9, -16
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 7, -24
 248              		.cfi_offset 6, -28
 249              		.cfi_offset 5, -32
 250              		.cfi_offset 4, -36
 251              	.LBB69:
 252              	.LBB70:
 253              	.LBB71:
 254              	.LBB72:
 255              	.LBB73:
 256              	.LBB74:
 257              		.file 2 "./subsystems/ahrs/ahrs_float_utils.h"
   1:./subsystems/ahrs/ahrs_float_utils.h **** #ifndef AHRS_FLOAT_UTILS_H
   2:./subsystems/ahrs/ahrs_float_utils.h **** #define AHRS_FLOAT_UTILS_H
   3:./subsystems/ahrs/ahrs_float_utils.h **** 
   4:./subsystems/ahrs/ahrs_float_utils.h **** #include "subsystems/ahrs/ahrs_magnetic_field_model.h"
   5:./subsystems/ahrs/ahrs_float_utils.h **** 
   6:./subsystems/ahrs/ahrs_float_utils.h **** #include "std.h" // for ABS
   7:./subsystems/ahrs/ahrs_float_utils.h **** 
   8:./subsystems/ahrs/ahrs_float_utils.h **** static inline void ahrs_float_get_euler_from_accel_mag(struct FloatEulers* e, struct Int32Vect3* ac
   9:./subsystems/ahrs/ahrs_float_utils.h ****   /* get phi and theta from accelerometer */
  10:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatVect3 accelf;
  11:./subsystems/ahrs/ahrs_float_utils.h ****   ACCELS_FLOAT_OF_BFP(accelf, *accel);
  12:./subsystems/ahrs/ahrs_float_utils.h ****   const float phi   = atan2f(-accelf.y, -accelf.z);
  13:./subsystems/ahrs/ahrs_float_utils.h ****   const float cphi = cosf(phi);
  14:./subsystems/ahrs/ahrs_float_utils.h ****   const float theta = atan2f(cphi*accelf.x, -accelf.z);
  15:./subsystems/ahrs/ahrs_float_utils.h **** 
  16:./subsystems/ahrs/ahrs_float_utils.h ****   /* get psi from magnetometer */
  17:./subsystems/ahrs/ahrs_float_utils.h ****   /* project mag on local tangeant plane */
  18:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatVect3 magf;
  19:./subsystems/ahrs/ahrs_float_utils.h ****   MAGS_FLOAT_OF_BFP(magf, *mag);
  20:./subsystems/ahrs/ahrs_float_utils.h ****   const float sphi   = sinf(phi);
  21:./subsystems/ahrs/ahrs_float_utils.h ****   const float ctheta = cosf(theta);
  22:./subsystems/ahrs/ahrs_float_utils.h ****   const float stheta = sinf(theta);
  23:./subsystems/ahrs/ahrs_float_utils.h ****   const float mn = ctheta * magf.x + sphi*stheta*magf.y + cphi*stheta*magf.z;
  24:./subsystems/ahrs/ahrs_float_utils.h ****   const float me =     0. * magf.x + cphi       *magf.y - sphi       *magf.z;
  25:./subsystems/ahrs/ahrs_float_utils.h ****   float psi = -atan2f(me, mn) + atan2(AHRS_H_Y, AHRS_H_X);
  26:./subsystems/ahrs/ahrs_float_utils.h ****   if (psi > M_PI) psi -= 2.*M_PI; if (psi < -M_PI) psi+= 2.*M_PI;
  27:./subsystems/ahrs/ahrs_float_utils.h ****   EULERS_ASSIGN(*e, phi, theta, psi);
  28:./subsystems/ahrs/ahrs_float_utils.h **** 
  29:./subsystems/ahrs/ahrs_float_utils.h **** }
  30:./subsystems/ahrs/ahrs_float_utils.h **** 
  31:./subsystems/ahrs/ahrs_float_utils.h **** /** Compute a quaternion representing roll and pitch from an accelerometer measurement. */
  32:./subsystems/ahrs/ahrs_float_utils.h **** static inline void ahrs_float_get_quat_from_accel(struct FloatQuat* q, struct Int32Vect3* accel) {
  33:./subsystems/ahrs/ahrs_float_utils.h ****   /* normalized accel measurement in floating point */
  34:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatVect3 acc_normalized;
  35:./subsystems/ahrs/ahrs_float_utils.h ****   ACCELS_FLOAT_OF_BFP(acc_normalized, *accel);
 258              		.loc 2 35 0
 259 0004 5E4C     		ldr	r4, .L41
 260              	.LBE74:
 261              	.LBE73:
 262              	.LBE72:
 263              	.LBE71:
 264              	.LBE70:
 265              	.LBE69:
 266              		.loc 1 96 0
 267 0006 8DB0     		sub	sp, sp, #52
 268              	.LCFI2:
 269              		.cfi_def_cfa_offset 88
 270              	.LBB102:
 271              	.LBB100:
 272              	.LBB99:
 273              	.LBB98:
 274              	.LBB82:
 275              	.LBB81:
 276              		.loc 2 35 0
 277 0008 E068     		ldr	r0, [r4, #12]
 278 000a FFF7FEFF 		bl	__aeabi_i2f
 279 000e 4FF06A51 		mov	r1, #981467136
 280 0012 FFF7FEFF 		bl	__aeabi_fmul
 281 0016 0546     		mov	r5, r0
 282              	.LVL14:
 283 0018 2069     		ldr	r0, [r4, #16]
 284              	.LVL15:
 285 001a FFF7FEFF 		bl	__aeabi_i2f
 286 001e 4FF06A51 		mov	r1, #981467136
 287 0022 FFF7FEFF 		bl	__aeabi_fmul
 288 0026 0646     		mov	r6, r0
 289              	.LVL16:
 290 0028 6069     		ldr	r0, [r4, #20]
 291              	.LVL17:
 292 002a FFF7FEFF 		bl	__aeabi_i2f
 293 002e 4FF06A51 		mov	r1, #981467136
 294 0032 FFF7FEFF 		bl	__aeabi_fmul
 295              	.LBB75:
  36:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_VECT3_NORMALIZE(acc_normalized);
 296              		.loc 2 36 0
 297 0036 2946     		mov	r1, r5
 298              	.LBE75:
  35:./subsystems/ahrs/ahrs_float_utils.h ****   ACCELS_FLOAT_OF_BFP(acc_normalized, *accel);
 299              		.loc 2 35 0
 300 0038 0446     		mov	r4, r0
 301              	.LVL18:
 302              	.LBB76:
 303              		.loc 2 36 0
 304 003a 2846     		mov	r0, r5
 305              	.LVL19:
 306 003c FFF7FEFF 		bl	__aeabi_fmul
 307 0040 3146     		mov	r1, r6
 308 0042 0746     		mov	r7, r0
 309 0044 3046     		mov	r0, r6
 310 0046 FFF7FEFF 		bl	__aeabi_fmul
 311 004a 0146     		mov	r1, r0
 312 004c 3846     		mov	r0, r7
 313 004e FFF7FEFF 		bl	__aeabi_fadd
 314 0052 2146     		mov	r1, r4
 315 0054 0746     		mov	r7, r0
 316 0056 2046     		mov	r0, r4
 317 0058 FFF7FEFF 		bl	__aeabi_fmul
 318 005c 0146     		mov	r1, r0
 319 005e 3846     		mov	r0, r7
 320 0060 FFF7FEFF 		bl	__aeabi_fadd
 321 0064 FFF7FEFF 		bl	sqrtf
 322 0068 FFF7FEFF 		bl	__aeabi_f2d
 323 006c 0246     		mov	r2, r0
 324 006e 0B46     		mov	r3, r1
 325 0070 0020     		movs	r0, #0
 326 0072 4449     		ldr	r1, .L41+4
 327 0074 FFF7FEFF 		bl	__aeabi_ddiv
 328 0078 8246     		mov	sl, r0
 329 007a 8B46     		mov	fp, r1
 330              	.LVL20:
 331 007c 2046     		mov	r0, r4
 332 007e FFF7FEFF 		bl	__aeabi_f2d
 333 0082 5246     		mov	r2, sl
 334 0084 5B46     		mov	r3, fp
 335 0086 FFF7FEFF 		bl	__aeabi_dmul
 336 008a FFF7FEFF 		bl	__aeabi_d2f
 337 008e 0746     		mov	r7, r0
 338              	.LVL21:
 339              	.LBE76:
  37:./subsystems/ahrs/ahrs_float_utils.h **** 
  38:./subsystems/ahrs/ahrs_float_utils.h ****   /* check for 180deg case */
  39:./subsystems/ahrs/ahrs_float_utils.h ****   if ( ABS(acc_normalized.z - 1.0) < 5*FLT_MIN ) {
 340              		.loc 2 39 0
 341 0090 FFF7FEFF 		bl	__aeabi_f2d
 342              	.LVL22:
 343 0094 0022     		movs	r2, #0
 344 0096 3B4B     		ldr	r3, .L41+4
 345 0098 FFF7FEFF 		bl	__aeabi_dsub
 346 009c 0022     		movs	r2, #0
 347 009e 0023     		movs	r3, #0
 348 00a0 8046     		mov	r8, r0
 349 00a2 8946     		mov	r9, r1
 350 00a4 FFF7FEFF 		bl	__aeabi_dcmplt
 351 00a8 0124     		movs	r4, #1
 352 00aa 30B1     		cbz	r0, .L33
 353 00ac 4046     		mov	r0, r8
 354 00ae 4946     		mov	r1, r9
 355 00b0 0022     		movs	r2, #0
 356 00b2 354B     		ldr	r3, .L41+8
 357 00b4 FFF7FEFF 		bl	__aeabi_dcmpgt
 358 00b8 05E0     		b	.L38
 359              	.L33:
 360 00ba 4046     		mov	r0, r8
 361 00bc 4946     		mov	r1, r9
 362 00be 0022     		movs	r2, #0
 363 00c0 324B     		ldr	r3, .L41+12
 364 00c2 FFF7FEFF 		bl	__aeabi_dcmplt
 365              	.L38:
 366 00c6 00B9     		cbnz	r0, .L9
 367 00c8 0024     		movs	r4, #0
 368              	.L9:
 369 00ca E4B2     		uxtb	r4, r4
 370 00cc 002C     		cmp	r4, #0
 371 00ce 4FD1     		bne	.L23
 372              	.LBB77:
  36:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_VECT3_NORMALIZE(acc_normalized);
 373              		.loc 2 36 0
 374 00d0 2846     		mov	r0, r5
 375 00d2 FFF7FEFF 		bl	__aeabi_f2d
 376 00d6 5246     		mov	r2, sl
 377 00d8 5B46     		mov	r3, fp
 378 00da FFF7FEFF 		bl	__aeabi_dmul
 379 00de FFF7FEFF 		bl	__aeabi_d2f
 380 00e2 8046     		mov	r8, r0
 381 00e4 3046     		mov	r0, r6
 382 00e6 FFF7FEFF 		bl	__aeabi_f2d
 383 00ea 5246     		mov	r2, sl
 384 00ec 5B46     		mov	r3, fp
 385 00ee FFF7FEFF 		bl	__aeabi_dmul
 386 00f2 FFF7FEFF 		bl	__aeabi_d2f
 387              	.LBE77:
  40:./subsystems/ahrs/ahrs_float_utils.h ****     QUAT_ASSIGN(*q, 0.0, 1.0, 0.0, 0.0);
  41:./subsystems/ahrs/ahrs_float_utils.h ****   }
  42:./subsystems/ahrs/ahrs_float_utils.h ****   else {
  43:./subsystems/ahrs/ahrs_float_utils.h ****     /*
  44:./subsystems/ahrs/ahrs_float_utils.h ****      * axis we want to rotate around is cross product of accel and reference [0,0,-g]
  45:./subsystems/ahrs/ahrs_float_utils.h ****      * normalized: cross(acc_normalized, [0,0,-1])
  46:./subsystems/ahrs/ahrs_float_utils.h ****      * vector part of quaternion is the axis
  47:./subsystems/ahrs/ahrs_float_utils.h ****      * scalar part (angle): 1.0 + dot(acc_normalized, [0,0,-1])
  48:./subsystems/ahrs/ahrs_float_utils.h ****      */
  49:./subsystems/ahrs/ahrs_float_utils.h ****     q->qx = - acc_normalized.y;
  50:./subsystems/ahrs/ahrs_float_utils.h ****     q->qy = acc_normalized.x;
  51:./subsystems/ahrs/ahrs_float_utils.h ****     q->qz = 0.0;
  52:./subsystems/ahrs/ahrs_float_utils.h ****     q->qi = 1.0 - acc_normalized.z;
 388              		.loc 2 52 0
 389 00f6 3946     		mov	r1, r7
  49:./subsystems/ahrs/ahrs_float_utils.h ****     q->qx = - acc_normalized.y;
 390              		.loc 2 49 0
 391 00f8 00F10045 		add	r5, r0, #-2147483648
 392              	.LVL23:
 393              		.loc 2 52 0
 394 00fc 4FF07E50 		mov	r0, #1065353216
 395 0100 FFF7FEFF 		bl	__aeabi_fsub
 396              	.LBB78:
  53:./subsystems/ahrs/ahrs_float_utils.h ****     FLOAT_QUAT_NORMALIZE(*q);
 397              		.loc 2 53 0
 398 0104 0146     		mov	r1, r0
 399              	.LBE78:
  52:./subsystems/ahrs/ahrs_float_utils.h ****     q->qi = 1.0 - acc_normalized.z;
 400              		.loc 2 52 0
 401 0106 8246     		mov	sl, r0
 402              	.LVL24:
 403              	.LBB79:
 404              		.loc 2 53 0
 405 0108 FFF7FEFF 		bl	__aeabi_fmul
 406              	.LVL25:
 407 010c 2946     		mov	r1, r5
 408 010e 0446     		mov	r4, r0
 409 0110 2846     		mov	r0, r5
 410 0112 FFF7FEFF 		bl	__aeabi_fmul
 411 0116 0146     		mov	r1, r0
 412 0118 2046     		mov	r0, r4
 413 011a FFF7FEFF 		bl	__aeabi_fadd
 414 011e 4146     		mov	r1, r8
 415 0120 0446     		mov	r4, r0
 416 0122 4046     		mov	r0, r8
 417 0124 FFF7FEFF 		bl	__aeabi_fmul
 418 0128 0146     		mov	r1, r0
 419 012a 2046     		mov	r0, r4
 420 012c FFF7FEFF 		bl	__aeabi_fadd
 421 0130 0021     		movs	r1, #0
 422 0132 FFF7FEFF 		bl	__aeabi_fadd
 423 0136 FFF7FEFF 		bl	sqrtf
 424 013a 4FF40001 		mov	r1, #8388608
 425 013e 0446     		mov	r4, r0
 426              	.LVL26:
 427 0140 FFF7FEFF 		bl	__aeabi_fcmpgt
 428              	.LVL27:
 429 0144 20B3     		cbz	r0, .L34
 430 0146 5046     		mov	r0, sl
 431 0148 2146     		mov	r1, r4
 432 014a FFF7FEFF 		bl	__aeabi_fdiv
 433 014e 2146     		mov	r1, r4
 434 0150 8246     		mov	sl, r0
 435              	.LVL28:
 436 0152 2846     		mov	r0, r5
 437              	.LVL29:
 438 0154 FFF7FEFF 		bl	__aeabi_fdiv
 439 0158 2146     		mov	r1, r4
 440 015a 0546     		mov	r5, r0
 441              	.LVL30:
 442 015c 4046     		mov	r0, r8
 443              	.LVL31:
 444 015e FFF7FEFF 		bl	__aeabi_fdiv
 445 0162 2146     		mov	r1, r4
 446 0164 8046     		mov	r8, r0
 447              	.LVL32:
 448 0166 0020     		movs	r0, #0
 449              	.LVL33:
 450 0168 FFF7FEFF 		bl	__aeabi_fdiv
 451 016c 8146     		mov	r9, r0
 452              	.LVL34:
 453 016e 11E0     		b	.L10
 454              	.LVL35:
 455              	.L23:
 456              	.LBE79:
  40:./subsystems/ahrs/ahrs_float_utils.h ****     QUAT_ASSIGN(*q, 0.0, 1.0, 0.0, 0.0);
 457              		.loc 2 40 0
 458 0170 4FF00009 		mov	r9, #0
 459 0174 C846     		mov	r8, r9
 460 0176 4FF07E55 		mov	r5, #1065353216
 461              	.LVL36:
 462 017a CA46     		mov	sl, r9
 463              	.LVL37:
 464 017c 0AE0     		b	.L10
 465              	.L42:
 466 017e 00BF     		.align	2
 467              	.L41:
 468 0180 00000000 		.word	ahrs_aligner
 469 0184 0000F03F 		.word	1072693248
 470 0188 000034B8 		.word	-1204551680
 471 018c 00003438 		.word	942931968
 472              	.LVL38:
 473              	.L34:
 474              	.LBB80:
  51:./subsystems/ahrs/ahrs_float_utils.h ****     q->qz = 0.0;
 475              		.loc 2 51 0
 476 0190 4FF00009 		mov	r9, #0
 477              	.LVL39:
 478              	.L10:
 479              	.LBE80:
 480              	.LBE81:
 481              	.LBE82:
  54:./subsystems/ahrs/ahrs_float_utils.h ****   }
  55:./subsystems/ahrs/ahrs_float_utils.h **** }
  56:./subsystems/ahrs/ahrs_float_utils.h **** 
  57:./subsystems/ahrs/ahrs_float_utils.h **** static inline void ahrs_float_get_quat_from_accel_mag(struct FloatQuat* q, struct Int32Vect3* accel
  58:./subsystems/ahrs/ahrs_float_utils.h **** 
  59:./subsystems/ahrs/ahrs_float_utils.h ****   /* the quaternion representing roll and pitch from acc measurement */
  60:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatQuat q_a;
  61:./subsystems/ahrs/ahrs_float_utils.h ****   ahrs_float_get_quat_from_accel(&q_a, accel);
  62:./subsystems/ahrs/ahrs_float_utils.h **** 
  63:./subsystems/ahrs/ahrs_float_utils.h **** 
  64:./subsystems/ahrs/ahrs_float_utils.h ****   /* convert mag measurement to float */
  65:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatVect3 mag_float;
  66:./subsystems/ahrs/ahrs_float_utils.h ****   MAGS_FLOAT_OF_BFP(mag_float, *mag);
 482              		.loc 2 66 0
 483 0194 AC4C     		ldr	r4, .L43+24
 484 0196 A069     		ldr	r0, [r4, #24]
 485 0198 FFF7FEFF 		bl	__aeabi_i2f
 486 019c 4FF06851 		mov	r1, #973078528
 487 01a0 FFF7FEFF 		bl	__aeabi_fmul
 488 01a4 0290     		str	r0, [sp, #8]	@ float
 489              	.LVL40:
 490 01a6 E069     		ldr	r0, [r4, #28]
 491              	.LVL41:
 492 01a8 FFF7FEFF 		bl	__aeabi_i2f
 493 01ac 4FF06851 		mov	r1, #973078528
 494 01b0 FFF7FEFF 		bl	__aeabi_fmul
 495 01b4 0490     		str	r0, [sp, #16]	@ float
 496              	.LVL42:
 497 01b6 206A     		ldr	r0, [r4, #32]
 498              	.LVL43:
 499 01b8 FFF7FEFF 		bl	__aeabi_i2f
 500 01bc 4FF06851 		mov	r1, #973078528
 501 01c0 FFF7FEFF 		bl	__aeabi_fmul
 502 01c4 0690     		str	r0, [sp, #24]	@ float
 503              	.LVL44:
 504              	.LBB83:
  67:./subsystems/ahrs/ahrs_float_utils.h **** 
  68:./subsystems/ahrs/ahrs_float_utils.h ****   /* and rotate to horizontal plane using the quat from above */
  69:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatRMat rmat_phi_theta;
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 505              		.loc 2 70 0
 506 01c6 5046     		mov	r0, sl
 507              	.LVL45:
 508 01c8 FFF7FEFF 		bl	__aeabi_f2d
 509 01cc 98A3     		adr	r3, .L43
 510 01ce D3E90023 		ldrd	r2, [r3]
 511 01d2 FFF7FEFF 		bl	__aeabi_dmul
 512 01d6 FFF7FEFF 		bl	__aeabi_d2f
 513 01da 0646     		mov	r6, r0
 514              	.LVL46:
 515 01dc 2846     		mov	r0, r5
 516              	.LVL47:
 517 01de FFF7FEFF 		bl	__aeabi_f2d
 518 01e2 93A3     		adr	r3, .L43
 519 01e4 D3E90023 		ldrd	r2, [r3]
 520 01e8 FFF7FEFF 		bl	__aeabi_dmul
 521 01ec FFF7FEFF 		bl	__aeabi_d2f
 522 01f0 0446     		mov	r4, r0
 523              	.LVL48:
 524 01f2 4046     		mov	r0, r8
 525              	.LVL49:
 526 01f4 FFF7FEFF 		bl	__aeabi_f2d
 527 01f8 8DA3     		adr	r3, .L43
 528 01fa D3E90023 		ldrd	r2, [r3]
 529 01fe FFF7FEFF 		bl	__aeabi_dmul
 530 0202 FFF7FEFF 		bl	__aeabi_d2f
 531 0206 0746     		mov	r7, r0
 532              	.LVL50:
 533 0208 4846     		mov	r0, r9
 534              	.LVL51:
 535 020a FFF7FEFF 		bl	__aeabi_f2d
 536 020e 88A3     		adr	r3, .L43
 537 0210 D3E90023 		ldrd	r2, [r3]
 538 0214 FFF7FEFF 		bl	__aeabi_dmul
 539 0218 FFF7FEFF 		bl	__aeabi_d2f
 540 021c 3146     		mov	r1, r6
 541 021e 8346     		mov	fp, r0
 542              	.LVL52:
 543 0220 3046     		mov	r0, r6
 544              	.LVL53:
 545 0222 FFF7FEFF 		bl	__aeabi_fmul
 546 0226 4FF07E51 		mov	r1, #1065353216
 547 022a FFF7FEFF 		bl	__aeabi_fsub
 548 022e 5946     		mov	r1, fp
 549 0230 0790     		str	r0, [sp, #28]	@ float
 550              	.LVL54:
 551 0232 3046     		mov	r0, r6
 552              	.LVL55:
 553 0234 FFF7FEFF 		bl	__aeabi_fmul
 554 0238 3946     		mov	r1, r7
 555 023a 0990     		str	r0, [sp, #36]	@ float
 556              	.LVL56:
 557 023c 2046     		mov	r0, r4
 558              	.LVL57:
 559 023e FFF7FEFF 		bl	__aeabi_fmul
 560 0242 2146     		mov	r1, r4
 561 0244 0890     		str	r0, [sp, #32]	@ float
 562              	.LVL58:
 563 0246 2046     		mov	r0, r4
 564              	.LVL59:
 565 0248 FFF7FEFF 		bl	__aeabi_fmul
 566 024c 0146     		mov	r1, r0
 567 024e 0798     		ldr	r0, [sp, #28]	@ float
 568 0250 FFF7FEFF 		bl	__aeabi_fadd
 569              	.LBE83:
  71:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatVect3 mag_ltp;
  72:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_VECT3_TRANSP_MUL(mag_ltp, rmat_phi_theta, mag_float);
 570              		.loc 2 72 0
 571 0254 0299     		ldr	r1, [sp, #8]	@ float
 572 0256 FFF7FEFF 		bl	__aeabi_fmul
 573              	.LBB84:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 574              		.loc 2 70 0
 575 025a 0999     		ldr	r1, [sp, #36]	@ float
 576              	.LBE84:
 577              		.loc 2 72 0
 578 025c 0346     		mov	r3, r0
 579              	.LBB85:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 580              		.loc 2 70 0
 581 025e 0898     		ldr	r0, [sp, #32]	@ float
 582 0260 0093     		str	r3, [sp, #0]
 583 0262 FFF7FEFF 		bl	__aeabi_fsub
 584              	.LBE85:
 585              		.loc 2 72 0
 586 0266 0499     		ldr	r1, [sp, #16]	@ float
 587 0268 FFF7FEFF 		bl	__aeabi_fmul
 588 026c 009B     		ldr	r3, [sp, #0]
 589 026e 0146     		mov	r1, r0
 590 0270 1846     		mov	r0, r3
 591 0272 FFF7FEFF 		bl	__aeabi_fadd
 592              	.LBB86:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 593              		.loc 2 70 0
 594 0276 5946     		mov	r1, fp
 595              	.LBE86:
 596              		.loc 2 72 0
 597 0278 0246     		mov	r2, r0
 598              	.LBB87:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 599              		.loc 2 70 0
 600 027a 2046     		mov	r0, r4
 601 027c 0192     		str	r2, [sp, #4]
 602 027e FFF7FEFF 		bl	__aeabi_fmul
 603 0282 3946     		mov	r1, r7
 604 0284 0346     		mov	r3, r0
 605 0286 3046     		mov	r0, r6
 606 0288 0093     		str	r3, [sp, #0]
 607 028a FFF7FEFF 		bl	__aeabi_fmul
 608 028e 009B     		ldr	r3, [sp, #0]
 609 0290 0146     		mov	r1, r0
 610 0292 1846     		mov	r0, r3
 611 0294 FFF7FEFF 		bl	__aeabi_fadd
 612              	.LBE87:
 613              		.loc 2 72 0
 614 0298 0699     		ldr	r1, [sp, #24]	@ float
 615 029a FFF7FEFF 		bl	__aeabi_fmul
 616 029e 019A     		ldr	r2, [sp, #4]
 617 02a0 0146     		mov	r1, r0
 618 02a2 1046     		mov	r0, r2
 619 02a4 FFF7FEFF 		bl	__aeabi_fadd
 620              	.LBB88:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 621              		.loc 2 70 0
 622 02a8 0999     		ldr	r1, [sp, #36]	@ float
 623              	.LBE88:
 624              		.loc 2 72 0
 625 02aa 0A90     		str	r0, [sp, #40]	@ float
 626              	.LVL60:
 627              	.LBB89:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 628              		.loc 2 70 0
 629 02ac 0898     		ldr	r0, [sp, #32]	@ float
 630              	.LVL61:
 631 02ae FFF7FEFF 		bl	__aeabi_fadd
 632              	.LBE89:
 633              		.loc 2 72 0
 634 02b2 0299     		ldr	r1, [sp, #8]	@ float
 635 02b4 FFF7FEFF 		bl	__aeabi_fmul
 636              	.LBB90:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 637              		.loc 2 70 0
 638 02b8 3946     		mov	r1, r7
 639              	.LBE90:
 640              		.loc 2 72 0
 641 02ba 0346     		mov	r3, r0
 642              	.LBB91:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 643              		.loc 2 70 0
 644 02bc 3846     		mov	r0, r7
 645 02be 0093     		str	r3, [sp, #0]
 646 02c0 FFF7FEFF 		bl	__aeabi_fmul
 647 02c4 0146     		mov	r1, r0
 648 02c6 0798     		ldr	r0, [sp, #28]	@ float
 649 02c8 FFF7FEFF 		bl	__aeabi_fadd
 650              	.LBE91:
 651              		.loc 2 72 0
 652 02cc 0499     		ldr	r1, [sp, #16]	@ float
 653 02ce FFF7FEFF 		bl	__aeabi_fmul
 654 02d2 009B     		ldr	r3, [sp, #0]
 655 02d4 0146     		mov	r1, r0
 656 02d6 1846     		mov	r0, r3
 657 02d8 FFF7FEFF 		bl	__aeabi_fadd
 658              	.LBB92:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 659              		.loc 2 70 0
 660 02dc 5946     		mov	r1, fp
 661              	.LBE92:
 662              		.loc 2 72 0
 663 02de 0346     		mov	r3, r0
 664              	.LBB93:
  70:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_RMAT_OF_QUAT(rmat_phi_theta, q_a);
 665              		.loc 2 70 0
 666 02e0 3846     		mov	r0, r7
 667 02e2 0093     		str	r3, [sp, #0]
 668 02e4 FFF7FEFF 		bl	__aeabi_fmul
 669 02e8 2146     		mov	r1, r4
 670 02ea 0746     		mov	r7, r0
 671              	.LVL62:
 672 02ec 3046     		mov	r0, r6
 673 02ee FFF7FEFF 		bl	__aeabi_fmul
 674 02f2 0146     		mov	r1, r0
 675 02f4 3846     		mov	r0, r7
 676 02f6 FFF7FEFF 		bl	__aeabi_fsub
 677              	.LBE93:
 678              		.loc 2 72 0
 679 02fa 0699     		ldr	r1, [sp, #24]	@ float
 680 02fc FFF7FEFF 		bl	__aeabi_fmul
 681 0300 009B     		ldr	r3, [sp, #0]
 682 0302 0146     		mov	r1, r0
 683 0304 1846     		mov	r0, r3
 684 0306 FFF7FEFF 		bl	__aeabi_fadd
 685 030a 0446     		mov	r4, r0
 686              	.LVL63:
  73:./subsystems/ahrs/ahrs_float_utils.h **** 
  74:./subsystems/ahrs/ahrs_float_utils.h ****   /* heading from mag -> make quaternion to rotate around ltp z axis*/
  75:./subsystems/ahrs/ahrs_float_utils.h ****   struct FloatQuat q_m;
  76:./subsystems/ahrs/ahrs_float_utils.h **** 
  77:./subsystems/ahrs/ahrs_float_utils.h ****   /* dot([mag_n.x, mag_n.x, 0], [AHRS_H_X, AHRS_H_Y, 0]) */
  78:./subsystems/ahrs/ahrs_float_utils.h ****   float dot = mag_ltp.x * AHRS_H_X + mag_ltp.y * AHRS_H_Y;
 687              		.loc 2 78 0
 688 030c 0A98     		ldr	r0, [sp, #40]	@ float
 689              	.LVL64:
 690 030e FFF7FEFF 		bl	__aeabi_f2d
 691 0312 CDE90201 		strd	r0, [sp, #8]
 692 0316 2046     		mov	r0, r4
 693 0318 FFF7FEFF 		bl	__aeabi_f2d
 694 031c CDE90401 		strd	r0, [sp, #16]
 695              	.LVL65:
  79:./subsystems/ahrs/ahrs_float_utils.h **** 
  80:./subsystems/ahrs/ahrs_float_utils.h ****   /* |v1||v2| */
  81:./subsystems/ahrs/ahrs_float_utils.h ****   float norm2 = sqrtf(SQUARE(mag_ltp.x) + SQUARE(mag_ltp.y))
 696              		.loc 2 81 0
 697 0320 0A98     		ldr	r0, [sp, #40]	@ float
 698              	.LVL66:
 699 0322 0146     		mov	r1, r0
 700 0324 FFF7FEFF 		bl	__aeabi_fmul
 701 0328 2146     		mov	r1, r4
 702 032a 0646     		mov	r6, r0
 703              	.LVL67:
 704 032c 2046     		mov	r0, r4
 705 032e FFF7FEFF 		bl	__aeabi_fmul
 706 0332 0146     		mov	r1, r0
 707 0334 3046     		mov	r0, r6
 708 0336 FFF7FEFF 		bl	__aeabi_fadd
 709 033a FFF7FEFF 		bl	sqrtf
 710 033e 4349     		ldr	r1, .L43+28
 711 0340 FFF7FEFF 		bl	__aeabi_fmul
  78:./subsystems/ahrs/ahrs_float_utils.h ****   float dot = mag_ltp.x * AHRS_H_X + mag_ltp.y * AHRS_H_Y;
 712              		.loc 2 78 0
 713 0344 3CA3     		adr	r3, .L43+8
 714 0346 D3E90023 		ldrd	r2, [r3]
 715              		.loc 2 81 0
 716 034a 0446     		mov	r4, r0
 717              	.LVL68:
  78:./subsystems/ahrs/ahrs_float_utils.h ****   float dot = mag_ltp.x * AHRS_H_X + mag_ltp.y * AHRS_H_Y;
 718              		.loc 2 78 0
 719 034c DDE90201 		ldrd	r0, [sp, #8]
 720 0350 FFF7FEFF 		bl	__aeabi_dmul
 721 0354 3AA3     		adr	r3, .L43+16
 722 0356 D3E90023 		ldrd	r2, [r3]
 723 035a 0646     		mov	r6, r0
 724 035c 0F46     		mov	r7, r1
 725 035e DDE90401 		ldrd	r0, [sp, #16]
 726 0362 FFF7FEFF 		bl	__aeabi_dmul
 727 0366 0246     		mov	r2, r0
 728 0368 0B46     		mov	r3, r1
 729 036a 3046     		mov	r0, r6
 730 036c 3946     		mov	r1, r7
 731 036e FFF7FEFF 		bl	__aeabi_dadd
 732 0372 FFF7FEFF 		bl	__aeabi_d2f
 733 0376 0146     		mov	r1, r0
  82:./subsystems/ahrs/ahrs_float_utils.h ****     * sqrtf(SQUARE(AHRS_H_X) + SQUARE(AHRS_H_Y));
  83:./subsystems/ahrs/ahrs_float_utils.h **** 
  84:./subsystems/ahrs/ahrs_float_utils.h ****   // catch 180deg case
  85:./subsystems/ahrs/ahrs_float_utils.h ****   if (ABS(norm2 + dot) < 5*FLT_MIN) {
 734              		.loc 2 85 0
 735 0378 2046     		mov	r0, r4
 736 037a FFF7FEFF 		bl	__aeabi_fadd
 737 037e 0021     		movs	r1, #0
 738 0380 0446     		mov	r4, r0
 739 0382 FFF7FEFF 		bl	__aeabi_fcmplt
 740 0386 0126     		movs	r6, #1
 741 0388 20B1     		cbz	r0, .L35
 742 038a 2046     		mov	r0, r4
 743 038c 3049     		ldr	r1, .L43+32
 744 038e FFF7FEFF 		bl	__aeabi_fcmpgt
 745 0392 04E0     		b	.L40
 746              	.L35:
 747 0394 2046     		mov	r0, r4
 748 0396 4FF0D071 		mov	r1, #27262976
 749 039a FFF7FEFF 		bl	__aeabi_fcmplt
 750              	.L40:
 751 039e 00B9     		cbnz	r0, .L16
 752 03a0 0026     		movs	r6, #0
 753              	.L16:
 754 03a2 F6B2     		uxtb	r6, r6
 755 03a4 002E     		cmp	r6, #0
 756 03a6 55D1     		bne	.L25
 757              	.LVL69:
  86:./subsystems/ahrs/ahrs_float_utils.h ****     QUAT_ASSIGN(q_m, 0.0, 0.0, 0.0, 1.0);
  87:./subsystems/ahrs/ahrs_float_utils.h ****   } else {
  88:./subsystems/ahrs/ahrs_float_utils.h ****     /* q_xyz = cross([mag_n.x, mag_n.y, 0], [AHRS_H_X, AHRS_H_Y, 0]) */
  89:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qx = 0.0;
  90:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qy = 0.0;
  91:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qz = mag_ltp.x * AHRS_H_Y - mag_ltp.y * AHRS_H_X;
 758              		.loc 2 91 0
 759 03a8 DDE90201 		ldrd	r0, [sp, #8]
 760 03ac 24A3     		adr	r3, .L43+16
 761 03ae D3E90023 		ldrd	r2, [r3]
 762 03b2 FFF7FEFF 		bl	__aeabi_dmul
 763 03b6 20A3     		adr	r3, .L43+8
 764 03b8 D3E90023 		ldrd	r2, [r3]
 765 03bc 0646     		mov	r6, r0
 766 03be 0F46     		mov	r7, r1
 767 03c0 DDE90401 		ldrd	r0, [sp, #16]
 768 03c4 FFF7FEFF 		bl	__aeabi_dmul
 769 03c8 0246     		mov	r2, r0
 770 03ca 0B46     		mov	r3, r1
 771 03cc 3046     		mov	r0, r6
 772 03ce 3946     		mov	r1, r7
 773 03d0 FFF7FEFF 		bl	__aeabi_dsub
 774 03d4 FFF7FEFF 		bl	__aeabi_d2f
 775              	.LBB94:
  92:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qi = norm2 + dot;
  93:./subsystems/ahrs/ahrs_float_utils.h ****     FLOAT_QUAT_NORMALIZE(q_m);
 776              		.loc 2 93 0
 777 03d8 2146     		mov	r1, r4
 778              	.LBE94:
  91:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qz = mag_ltp.x * AHRS_H_Y - mag_ltp.y * AHRS_H_X;
 779              		.loc 2 91 0
 780 03da 0646     		mov	r6, r0
 781              	.LVL70:
 782              	.LBB95:
 783              		.loc 2 93 0
 784 03dc 2046     		mov	r0, r4
 785              	.LVL71:
 786 03de FFF7FEFF 		bl	__aeabi_fmul
 787 03e2 0021     		movs	r1, #0
 788 03e4 FFF7FEFF 		bl	__aeabi_fadd
 789 03e8 0021     		movs	r1, #0
 790 03ea FFF7FEFF 		bl	__aeabi_fadd
 791 03ee 3146     		mov	r1, r6
 792 03f0 0746     		mov	r7, r0
 793 03f2 3046     		mov	r0, r6
 794 03f4 FFF7FEFF 		bl	__aeabi_fmul
 795 03f8 0146     		mov	r1, r0
 796 03fa 3846     		mov	r0, r7
 797 03fc FFF7FEFF 		bl	__aeabi_fadd
 798 0400 FFF7FEFF 		bl	sqrtf
 799 0404 4FF40001 		mov	r1, #8388608
 800 0408 0746     		mov	r7, r0
 801              	.LVL72:
 802 040a FFF7FEFF 		bl	__aeabi_fcmpgt
 803              	.LVL73:
 804 040e 30B3     		cbz	r0, .L36
 805 0410 2046     		mov	r0, r4
 806 0412 3946     		mov	r1, r7
 807 0414 FFF7FEFF 		bl	__aeabi_fdiv
 808 0418 3946     		mov	r1, r7
 809 041a 0446     		mov	r4, r0
 810              	.LVL74:
 811 041c 0020     		movs	r0, #0
 812              	.LVL75:
 813 041e FFF7FEFF 		bl	__aeabi_fdiv
 814 0422 3946     		mov	r1, r7
 815 0424 8346     		mov	fp, r0
 816              	.LVL76:
 817 0426 3046     		mov	r0, r6
 818              	.LVL77:
 819 0428 FFF7FEFF 		bl	__aeabi_fdiv
 820 042c 0646     		mov	r6, r0
 821              	.LVL78:
 822 042e 18E0     		b	.L17
 823              	.L44:
 824              		.align	3
 825              	.L43:
 826 0430 CD3B7F66 		.word	1719614413
 827 0434 9EA0F63F 		.word	1073127582
 828 0438 9095A993 		.word	2477364624
 829 043c 7D21D83F 		.word	1071128957
 830 0440 534D5A02 		.word	39472467
 831 0444 3ADD933F 		.word	1066655034
 832 0448 00000000 		.word	ahrs_aligner
 833 044c 4A4DC13E 		.word	1052855626
 834 0450 0000A081 		.word	-2120220672
 835              	.LVL79:
 836              	.L25:
 837              	.LBE95:
  86:./subsystems/ahrs/ahrs_float_utils.h ****     QUAT_ASSIGN(q_m, 0.0, 0.0, 0.0, 1.0);
 838              		.loc 2 86 0
 839 0454 0024     		movs	r4, #0
 840 0456 4FF07E56 		mov	r6, #1065353216
 841 045a A346     		mov	fp, r4
 842              	.LVL80:
 843 045c 01E0     		b	.L17
 844              	.LVL81:
 845              	.L36:
 846              	.LBB96:
  89:./subsystems/ahrs/ahrs_float_utils.h ****     q_m.qx = 0.0;
 847              		.loc 2 89 0
 848 045e 4FF0000B 		mov	fp, #0
 849              	.LVL82:
 850              	.L17:
 851              	.LBE96:
  94:./subsystems/ahrs/ahrs_float_utils.h ****   }
  95:./subsystems/ahrs/ahrs_float_utils.h **** 
  96:./subsystems/ahrs/ahrs_float_utils.h ****   // q_ltp2imu = q_a * q_m
  97:./subsystems/ahrs/ahrs_float_utils.h ****   // and wrap and normalize
  98:./subsystems/ahrs/ahrs_float_utils.h ****   FLOAT_QUAT_COMP_NORM_SHORTEST(*q, q_m, q_a);
 852              		.loc 2 98 0
 853 0462 2946     		mov	r1, r5
 854 0464 5846     		mov	r0, fp
 855 0466 FFF7FEFF 		bl	__aeabi_fmul
 856 046a 4146     		mov	r1, r8
 857 046c 0290     		str	r0, [sp, #8]	@ float
 858 046e 5846     		mov	r0, fp
 859 0470 FFF7FEFF 		bl	__aeabi_fmul
 860 0474 5146     		mov	r1, sl
 861 0476 0490     		str	r0, [sp, #16]	@ float
 862 0478 2046     		mov	r0, r4
 863 047a FFF7FEFF 		bl	__aeabi_fmul
 864 047e 0299     		ldr	r1, [sp, #8]	@ float
 865 0480 FFF7FEFF 		bl	__aeabi_fsub
 866 0484 0499     		ldr	r1, [sp, #16]	@ float
 867 0486 FFF7FEFF 		bl	__aeabi_fsub
 868 048a 4946     		mov	r1, r9
 869 048c 0746     		mov	r7, r0
 870 048e 3046     		mov	r0, r6
 871 0490 FFF7FEFF 		bl	__aeabi_fmul
 872 0494 0146     		mov	r1, r0
 873 0496 3846     		mov	r0, r7
 874 0498 FFF7FEFF 		bl	__aeabi_fsub
 875 049c 5146     		mov	r1, sl
 876 049e 0746     		mov	r7, r0
 877              	.LVL83:
 878 04a0 5846     		mov	r0, fp
 879              	.LVL84:
 880 04a2 FFF7FEFF 		bl	__aeabi_fmul
 881 04a6 4946     		mov	r1, r9
 882 04a8 0690     		str	r0, [sp, #24]	@ float
 883 04aa 5846     		mov	r0, fp
 884 04ac FFF7FEFF 		bl	__aeabi_fmul
 885 04b0 2946     		mov	r1, r5
 886 04b2 0790     		str	r0, [sp, #28]	@ float
 887 04b4 2046     		mov	r0, r4
 888 04b6 FFF7FEFF 		bl	__aeabi_fmul
 889 04ba 0699     		ldr	r1, [sp, #24]	@ float
 890 04bc FFF7FEFF 		bl	__aeabi_fadd
 891 04c0 0799     		ldr	r1, [sp, #28]	@ float
 892 04c2 FFF7FEFF 		bl	__aeabi_fadd
 893 04c6 4146     		mov	r1, r8
 894 04c8 8346     		mov	fp, r0
 895              	.LVL85:
 896 04ca 3046     		mov	r0, r6
 897 04cc FFF7FEFF 		bl	__aeabi_fmul
 898 04d0 0146     		mov	r1, r0
 899 04d2 5846     		mov	r0, fp
 900 04d4 FFF7FEFF 		bl	__aeabi_fsub
 901 04d8 4146     		mov	r1, r8
 902 04da 8346     		mov	fp, r0
 903              	.LVL86:
 904 04dc 2046     		mov	r0, r4
 905              	.LVL87:
 906 04de FFF7FEFF 		bl	__aeabi_fmul
 907 04e2 0799     		ldr	r1, [sp, #28]	@ float
 908 04e4 FFF7FEFF 		bl	__aeabi_fsub
 909 04e8 0699     		ldr	r1, [sp, #24]	@ float
 910 04ea FFF7FEFF 		bl	__aeabi_fadd
 911 04ee 2946     		mov	r1, r5
 912 04f0 8046     		mov	r8, r0
 913              	.LVL88:
 914 04f2 3046     		mov	r0, r6
 915 04f4 FFF7FEFF 		bl	__aeabi_fmul
 916 04f8 0146     		mov	r1, r0
 917 04fa 4046     		mov	r0, r8
 918 04fc FFF7FEFF 		bl	__aeabi_fadd
 919 0500 4946     		mov	r1, r9
 920 0502 0546     		mov	r5, r0
 921              	.LVL89:
 922 0504 2046     		mov	r0, r4
 923              	.LVL90:
 924 0506 FFF7FEFF 		bl	__aeabi_fmul
 925 050a 0499     		ldr	r1, [sp, #16]	@ float
 926 050c FFF7FEFF 		bl	__aeabi_fadd
 927 0510 0299     		ldr	r1, [sp, #8]	@ float
 928 0512 FFF7FEFF 		bl	__aeabi_fsub
 929 0516 5146     		mov	r1, sl
 930 0518 0446     		mov	r4, r0
 931              	.LVL91:
 932 051a 3046     		mov	r0, r6
 933 051c FFF7FEFF 		bl	__aeabi_fmul
 934 0520 0146     		mov	r1, r0
 935 0522 2046     		mov	r0, r4
 936 0524 FFF7FEFF 		bl	__aeabi_fadd
 937 0528 0021     		movs	r1, #0
 938 052a 0646     		mov	r6, r0
 939              	.LVL92:
 940 052c 3846     		mov	r0, r7
 941              	.LVL93:
 942 052e FFF7FEFF 		bl	__aeabi_fcmplt
 943 0532 38B1     		cbz	r0, .L19
 944 0534 07F10047 		add	r7, r7, #-2147483648
 945              	.LVL94:
 946 0538 0BF1004B 		add	fp, fp, #-2147483648
 947              	.LVL95:
 948 053c 05F10045 		add	r5, r5, #-2147483648
 949              	.LVL96:
 950 0540 06F10046 		add	r6, r6, #-2147483648
 951              	.LVL97:
 952              	.L19:
 953              	.LBB97:
 954 0544 3946     		mov	r1, r7
 955 0546 3846     		mov	r0, r7
 956 0548 FFF7FEFF 		bl	__aeabi_fmul
 957 054c 5946     		mov	r1, fp
 958 054e 0446     		mov	r4, r0
 959 0550 5846     		mov	r0, fp
 960 0552 FFF7FEFF 		bl	__aeabi_fmul
 961 0556 0146     		mov	r1, r0
 962 0558 2046     		mov	r0, r4
 963 055a FFF7FEFF 		bl	__aeabi_fadd
 964 055e 2946     		mov	r1, r5
 965 0560 0446     		mov	r4, r0
 966 0562 2846     		mov	r0, r5
 967 0564 FFF7FEFF 		bl	__aeabi_fmul
 968 0568 0146     		mov	r1, r0
 969 056a 2046     		mov	r0, r4
 970 056c FFF7FEFF 		bl	__aeabi_fadd
 971 0570 3146     		mov	r1, r6
 972 0572 0446     		mov	r4, r0
 973 0574 3046     		mov	r0, r6
 974 0576 FFF7FEFF 		bl	__aeabi_fmul
 975 057a 0146     		mov	r1, r0
 976 057c 2046     		mov	r0, r4
 977 057e FFF7FEFF 		bl	__aeabi_fadd
 978 0582 FFF7FEFF 		bl	sqrtf
 979 0586 4FF40001 		mov	r1, #8388608
 980 058a 0446     		mov	r4, r0
 981              	.LVL98:
 982 058c FFF7FEFF 		bl	__aeabi_fcmpgt
 983              	.LVL99:
 984 0590 98B1     		cbz	r0, .L21
 985 0592 3846     		mov	r0, r7
 986 0594 2146     		mov	r1, r4
 987 0596 FFF7FEFF 		bl	__aeabi_fdiv
 988 059a 2146     		mov	r1, r4
 989 059c 0746     		mov	r7, r0
 990              	.LVL100:
 991 059e 5846     		mov	r0, fp
 992              	.LVL101:
 993 05a0 FFF7FEFF 		bl	__aeabi_fdiv
 994 05a4 2146     		mov	r1, r4
 995 05a6 8346     		mov	fp, r0
 996              	.LVL102:
 997 05a8 2846     		mov	r0, r5
 998              	.LVL103:
 999 05aa FFF7FEFF 		bl	__aeabi_fdiv
 1000 05ae 2146     		mov	r1, r4
 1001 05b0 0546     		mov	r5, r0
 1002              	.LVL104:
 1003 05b2 3046     		mov	r0, r6
 1004              	.LVL105:
 1005 05b4 FFF7FEFF 		bl	__aeabi_fdiv
 1006 05b8 0646     		mov	r6, r0
 1007              	.LVL106:
 1008              	.L21:
 1009              	.LBE97:
 1010              	.LBE98:
 1011              	.LBE99:
 1012              		.file 3 "./subsystems/ahrs/ahrs_int_utils.h"
   1:./subsystems/ahrs/ahrs_int_utils.h **** #ifndef AHRS_INT_UTILS_H
   2:./subsystems/ahrs/ahrs_int_utils.h **** #define AHRS_INT_UTILS_H
   3:./subsystems/ahrs/ahrs_int_utils.h **** 
   4:./subsystems/ahrs/ahrs_int_utils.h **** //#include "../../test/pprz_algebra_print.h"
   5:./subsystems/ahrs/ahrs_int_utils.h **** #include "math/pprz_algebra_int.h"
   6:./subsystems/ahrs/ahrs_int_utils.h **** 
   7:./subsystems/ahrs/ahrs_int_utils.h **** #include "subsystems/ahrs/ahrs_magnetic_field_model.h"
   8:./subsystems/ahrs/ahrs_int_utils.h **** 
   9:./subsystems/ahrs/ahrs_int_utils.h **** #include "subsystems/ahrs/ahrs_float_utils.h"
  10:./subsystems/ahrs/ahrs_int_utils.h **** 
  11:./subsystems/ahrs/ahrs_int_utils.h **** static inline void ahrs_int_get_euler_from_accel_mag(struct Int32Eulers* e, struct Int32Vect3* acce
  12:./subsystems/ahrs/ahrs_int_utils.h ****   //  DISPLAY_INT32_VECT3("# accel", (*accel));
  13:./subsystems/ahrs/ahrs_int_utils.h ****   const float fphi = atan2f(-accel->y, -accel->z);
  14:./subsystems/ahrs/ahrs_int_utils.h ****   //  printf("# atan float %f\n", DegOfRad(fphi));
  15:./subsystems/ahrs/ahrs_int_utils.h ****   e->phi = ANGLE_BFP_OF_REAL(fphi);
  16:./subsystems/ahrs/ahrs_int_utils.h **** 
  17:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t cphi;
  18:./subsystems/ahrs/ahrs_int_utils.h ****   PPRZ_ITRIG_COS(cphi, e->phi);
  19:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t cphi_ax = -INT_MULT_RSHIFT(cphi, accel->x, INT32_TRIG_FRAC);
  20:./subsystems/ahrs/ahrs_int_utils.h ****   const float ftheta = atan2f(-cphi_ax, -accel->z);
  21:./subsystems/ahrs/ahrs_int_utils.h ****   e->theta = ANGLE_BFP_OF_REAL(ftheta);
  22:./subsystems/ahrs/ahrs_int_utils.h **** 
  23:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t sphi;
  24:./subsystems/ahrs/ahrs_int_utils.h ****   PPRZ_ITRIG_SIN(sphi, e->phi);
  25:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t stheta;
  26:./subsystems/ahrs/ahrs_int_utils.h ****   PPRZ_ITRIG_SIN(stheta, e->theta);
  27:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t ctheta;
  28:./subsystems/ahrs/ahrs_int_utils.h ****   PPRZ_ITRIG_COS(ctheta, e->theta);
  29:./subsystems/ahrs/ahrs_int_utils.h **** 
  30:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t sphi_stheta = (sphi*stheta)>>INT32_TRIG_FRAC;
  31:./subsystems/ahrs/ahrs_int_utils.h ****   int32_t cphi_stheta = (cphi*stheta)>>INT32_TRIG_FRAC;
  32:./subsystems/ahrs/ahrs_int_utils.h ****   //int32_t sphi_ctheta = (sphi*ctheta)>>INT32_TRIG_FRAC;
  33:./subsystems/ahrs/ahrs_int_utils.h ****   //int32_t cphi_ctheta = (cphi*ctheta)>>INT32_TRIG_FRAC;
  34:./subsystems/ahrs/ahrs_int_utils.h **** 
  35:./subsystems/ahrs/ahrs_int_utils.h ****   const int32_t mn = ctheta * mag->x + sphi_stheta * mag->y + cphi_stheta * mag->z;
  36:./subsystems/ahrs/ahrs_int_utils.h ****   const int32_t me = 0      * mag->x + cphi        * mag->y - sphi        * mag->z;
  37:./subsystems/ahrs/ahrs_int_utils.h ****   //const int32_t md =
  38:./subsystems/ahrs/ahrs_int_utils.h ****   //  -stheta     * imu.mag.x +
  39:./subsystems/ahrs/ahrs_int_utils.h ****   //  sphi_ctheta * imu.mag.y +
  40:./subsystems/ahrs/ahrs_int_utils.h ****   //  cphi_ctheta * imu.mag.z;
  41:./subsystems/ahrs/ahrs_int_utils.h ****   //  float m_psi = -atan2(me, mn);
  42:./subsystems/ahrs/ahrs_int_utils.h ****   const float mag_dec = atan2(-AHRS_H_Y, AHRS_H_X);
  43:./subsystems/ahrs/ahrs_int_utils.h ****   const float fpsi = atan2f(-me, mn) - mag_dec;
  44:./subsystems/ahrs/ahrs_int_utils.h ****   e->psi = ANGLE_BFP_OF_REAL(fpsi);
  45:./subsystems/ahrs/ahrs_int_utils.h ****   INT32_ANGLE_NORMALIZE(e->psi);
  46:./subsystems/ahrs/ahrs_int_utils.h **** 
  47:./subsystems/ahrs/ahrs_int_utils.h **** }
  48:./subsystems/ahrs/ahrs_int_utils.h **** 
  49:./subsystems/ahrs/ahrs_int_utils.h **** static inline void ahrs_int_get_quat_from_accel(struct Int32Quat* q, struct Int32Vect3* accel) {
  50:./subsystems/ahrs/ahrs_int_utils.h ****   struct FloatQuat q_f;
  51:./subsystems/ahrs/ahrs_int_utils.h ****   ahrs_float_get_quat_from_accel(&q_f, accel);
  52:./subsystems/ahrs/ahrs_int_utils.h ****   QUAT_BFP_OF_REAL(*q, q_f);
  53:./subsystems/ahrs/ahrs_int_utils.h **** }
  54:./subsystems/ahrs/ahrs_int_utils.h **** 
  55:./subsystems/ahrs/ahrs_int_utils.h **** static inline void ahrs_int_get_quat_from_accel_mag(struct Int32Quat* q, struct Int32Vect3* accel, 
  56:./subsystems/ahrs/ahrs_int_utils.h **** 
  57:./subsystems/ahrs/ahrs_int_utils.h ****   struct FloatQuat q_f;
  58:./subsystems/ahrs/ahrs_int_utils.h ****   ahrs_float_get_quat_from_accel_mag(&q_f, accel, mag);
  59:./subsystems/ahrs/ahrs_int_utils.h ****   QUAT_BFP_OF_REAL(*q, q_f);
 1013              		.loc 3 59 0
 1014 05ba 4FF08E41 		mov	r1, #1191182336
 1015 05be 3846     		mov	r0, r7
 1016 05c0 FFF7FEFF 		bl	__aeabi_fmul
 1017 05c4 FFF7FEFF 		bl	__aeabi_f2iz
 1018 05c8 D74C     		ldr	r4, .L45
 1019              	.LVL107:
 1020 05ca 8146     		mov	r9, r0
 1021              	.LVL108:
 1022 05cc 4FF08E41 		mov	r1, #1191182336
 1023 05d0 2060     		str	r0, [r4, #0]
 1024 05d2 5846     		mov	r0, fp
 1025 05d4 FFF7FEFF 		bl	__aeabi_fmul
 1026 05d8 FFF7FEFF 		bl	__aeabi_f2iz
 1027 05dc 4FF08E41 		mov	r1, #1191182336
 1028 05e0 0746     		mov	r7, r0
 1029              	.LVL109:
 1030 05e2 6060     		str	r0, [r4, #4]
 1031 05e4 2846     		mov	r0, r5
 1032 05e6 FFF7FEFF 		bl	__aeabi_fmul
 1033 05ea FFF7FEFF 		bl	__aeabi_f2iz
 1034 05ee 4FF08E41 		mov	r1, #1191182336
 1035 05f2 8046     		mov	r8, r0
 1036 05f4 A060     		str	r0, [r4, #8]
 1037 05f6 3046     		mov	r0, r6
 1038 05f8 FFF7FEFF 		bl	__aeabi_fmul
 1039 05fc FFF7FEFF 		bl	__aeabi_f2iz
 1040              	.LBE100:
 1041              	.LBE102:
  97:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
  98:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if USE_MAGNETOMETER
  99:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute an initial orientation from accel and mag directly as quaternion */
 100:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_int_get_quat_from_accel_mag(&ahrs.ltp_to_imu_quat, &ahrs_aligner.lp_accel, &ahrs_aligner.lp_
 101:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = TRUE;
 1042              		.loc 1 101 0
 1043 0600 CA4D     		ldr	r5, .L45+4
 1044              	.LVL110:
 1045              	.LBB103:
 1046              	.LBB101:
 1047              		.loc 3 59 0
 1048 0602 0646     		mov	r6, r0
 1049              	.LVL111:
 1050 0604 E060     		str	r0, [r4, #12]
 1051              	.LBE101:
 1052              	.LBE103:
 1053              		.loc 1 101 0
 1054 0606 0120     		movs	r0, #1
 1055 0608 85F84700 		strb	r0, [r5, #71]
 1056              	.LVL112:
 1057              	.LBB104:
 1058              	.LBB105:
 102:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #else
 103:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute an initial orientation from accel and just set heading to zero */
 104:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_int_get_quat_from_accel(&ahrs.ltp_to_imu_quat, &ahrs_aligner.lp_accel);
 105:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = FALSE;
 106:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 107:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 108:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Convert initial orientation from quat to euler and rotation matrix representations. */
 109:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   compute_imu_euler_and_rmat_from_quat();
 110:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 111:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   compute_body_orientation();
 112:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 113:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Use low passed gyro value as initial bias */
 114:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 115:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.high_rez_bias, ahrs_aligner.lp_gyro);
 116:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 117:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 118:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs.status = AHRS_RUNNING;
 119:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 120:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 121:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 122:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 123:subsystems/ahrs/ahrs_int_cmpl_quat.c **** /*
 124:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
 125:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
 126:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  *
 127:subsystems/ahrs/ahrs_int_cmpl_quat.c ****  */
 128:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_propagate(void) {
 129:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 130:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* unbias gyro             */
 131:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Rates omega;
 132:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_DIFF(omega, imu.gyro_prev, ahrs_impl.gyro_bias);
 133:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 134:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* low pass rate */
 135:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #ifdef AHRS_PROPAGATE_LOW_PASS_RATES
 136:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_SMUL(ahrs.imu_rate, ahrs.imu_rate,2);
 137:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(ahrs.imu_rate, omega);
 138:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_SDIV(ahrs.imu_rate, ahrs.imu_rate, 3);
 139:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #else
 140:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY(ahrs.imu_rate, omega);
 141:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 142:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 143:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* add correction     */
 144:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(omega, ahrs_impl.rate_correction);
 145:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* and zeros it */
 146:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.rate_correction);
 147:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 148:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* integrate quaternion */
 149:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE_FREQ
 150:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 151:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 152:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   compute_imu_euler_and_rmat_from_quat();
 153:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 154:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   compute_body_orientation();
 155:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 156:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 157:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 158:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 159:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 160:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_accel(void) {
 162:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 163:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // c2 = ltp z-axis in imu-frame
 164:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 c2 = { RMAT_ELMT(ahrs.ltp_to_imu_rmat, 0,2),
 165:subsystems/ahrs/ahrs_int_cmpl_quat.c ****                            RMAT_ELMT(ahrs.ltp_to_imu_rmat, 1,2),
 166:subsystems/ahrs/ahrs_int_cmpl_quat.c ****                            RMAT_ELMT(ahrs.ltp_to_imu_rmat, 2,2)};
 167:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual;
 168:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 169:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.correct_gravity && ahrs_impl.ltp_vel_norm_valid) {
 170:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /*
 171:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      * centrifugal acceleration in body frame
 172:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      * a_c_body = omega x (omega x r)
 173:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      * (omega x r) = tangential velocity in body frame
 174:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      * a_c_body = omega x vel_tangential_body
 175:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      * assumption: tangential velocity only along body x-axis
 176:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      */
 177:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 178:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     // FIXME: check overflows !
 179:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const struct Int32Vect3 vel_tangential_body = {(ahrs_impl.ltp_vel_norm>>INT32_ACCEL_FRAC), 0.0,
 180:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     struct Int32Vect3 acc_c_body;
 181:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_RATES_CROSS_VECT3(acc_c_body, ahrs.body_rate, vel_tangential_body);
 182:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_RSHIFT(acc_c_body, acc_c_body, INT32_SPEED_FRAC+INT32_RATE_FRAC-INT32_ACCEL_FRAC-IN
 183:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 184:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /* convert centrifucal acceleration from body to imu frame */
 185:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     struct Int32Vect3 acc_c_imu;
 186:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 187:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 188:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /* and subtract it from imu measurement to get a corrected measurement of the gravitiy vector *
 189:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     struct Int32Vect3 corrected_gravity;
 190:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(corrected_gravity, imu.accel, acc_c_imu);
 191:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 192:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /* compute the residual of gravity vector in imu frame */
 193:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_CROSS_PRODUCT(residual, corrected_gravity, c2);
 194:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   } else {
 195:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_CROSS_PRODUCT(residual, imu.accel, c2);
 196:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 197:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 198:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 199:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   int32_t inv_weight;
 200:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.use_gravity_heuristic) {
 201:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /* heuristic on acceleration norm */
 202:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     int32_t acc_norm;
 203:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, imu.accel);
 204:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const int32_t acc_norm_d = ABS(ACCEL_BFP_OF_REAL(9.81)-acc_norm);
 205:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     inv_weight = Chop(6*acc_norm_d/ACCEL_BFP_OF_REAL(9.81), 1, 6);
 206:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 207:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   else {
 208:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     inv_weight = 1;
 209:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 210:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 211:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // residual FRAC : ACCEL_FRAC + TRIG_FRAC = 10 + 14 = 24
 212:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // rate_correction FRAC = RATE_FRAC = 12
 213:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // 2^12 / 2^24 * 5e-2 = 1/81920
 214:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += -residual.x/82000/inv_weight;
 215:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += -residual.y/82000/inv_weight;
 216:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += -residual.z/82000/inv_weight;
 217:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 218:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // residual FRAC = ACCEL_FRAC + TRIG_FRAC = 10 + 14 = 24
 219:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // high_rez_bias = RATE_FRAC+28 = 40
 220:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // 2^40 / 2^24 * 5e-6 = 1/3.05
 221:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 222:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.p += residual.x*3;
 223:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.q += residual.y*3;
 224:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.r += residual.z*3;
 225:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 226:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p += residual.x/inv_weight;
 227:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q += residual.y/inv_weight;
 228:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r += residual.z/inv_weight;
 229:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 230:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 231:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /*                        */
 232:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 233:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 234:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 235:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 236:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_mag(void) {
 237:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if AHRS_MAG_UPDATE_ALL_AXES
 238:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_update_mag_full();
 239:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #else
 240:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_update_mag_2d();
 241:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 242:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 243:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 244:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 245:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void ahrs_update_mag_full(void) {
 246:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   const struct Int32Vect3 expected_ltp = {MAG_BFP_OF_REAL(AHRS_H_X),
 247:subsystems/ahrs/ahrs_int_cmpl_quat.c ****                                           MAG_BFP_OF_REAL(AHRS_H_Y),
 248:subsystems/ahrs/ahrs_int_cmpl_quat.c ****                                           MAG_BFP_OF_REAL(AHRS_H_Z)};
 249:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 expected_imu;
 250:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(expected_imu, ahrs.ltp_to_imu_rmat, expected_ltp);
 251:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 252:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual;
 253:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_VECT3_CROSS_PRODUCT(residual, imu.mag, expected_imu);
 254:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 255:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual.x/32/16;
 256:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual.y/32/16;
 257:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual.z/32/16;
 258:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 259:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 260:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p -= residual.x/32*1024;
 261:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q -= residual.y/32*1024;
 262:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r -= residual.z/32*1024;
 263:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 264:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 265:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 266:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 267:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 268:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 269:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 270:subsystems/ahrs/ahrs_int_cmpl_quat.c **** static inline void ahrs_update_mag_2d(void) {
 271:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 272:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   const struct Int32Vect2 expected_ltp = {MAG_BFP_OF_REAL(AHRS_H_X),
 273:subsystems/ahrs/ahrs_int_cmpl_quat.c ****                                           MAG_BFP_OF_REAL(AHRS_H_Y)};
 274:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 275:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 measured_ltp;
 276:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ahrs.ltp_to_imu_rmat, imu.mag);
 277:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 278:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual_ltp =
 279:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     { 0,
 280:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       0,
 281:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (measured_ltp.x * expected_ltp.y - measured_ltp.y * expected_ltp.x)/(1<<5)};
 282:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 283:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual_imu;
 284:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 285:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 286:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // residual_ltp FRAC = 2 * MAG_FRAC = 22
 287:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // rate_correction FRAC = RATE_FRAC = 12
 288:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // 2^12 / 2^22 * 2.5 = 1/410
 289:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 290:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.rate_correction.p += residual_imu.x*(1<<5)/410;
 291:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.rate_correction.q += residual_imu.y*(1<<5)/410;
 292:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.rate_correction.r += residual_imu.z*(1<<5)/410;
 293:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 294:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/16;
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/16;
 296:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/16;
 297:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 298:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 299:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // residual_ltp FRAC = 2 * MAG_FRAC = 22
 300:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // high_rez_bias = RATE_FRAC+28 = 40
 301:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // 2^40 / 2^22 * 2.5e-3 = 655
 302:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 303:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.p -= residual_imu.x*(1<<5)*655;
 304:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.q -= residual_imu.y*(1<<5)*655;
 305:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //  ahrs_impl.high_rez_bias.r -= residual_imu.z*(1<<5)*655;
 306:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 307:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p -= residual_imu.x*1024;
 308:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q -= residual_imu.y*1024;
 309:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r -= residual_imu.z*1024;
 310:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 311:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 312:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 313:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 314:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 315:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 316:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_gps(void) {
 317:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if AHRS_GRAVITY_UPDATE_COORDINATED_TURN && USE_GPS
 318:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (gps.fix == GPS_FIX_3D) {
 319:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.ltp_vel_norm = SPEED_BFP_OF_REAL(gps.speed_3d / 100.);
 320:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.ltp_vel_norm_valid = TRUE;
 321:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   } else {
 322:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.ltp_vel_norm_valid = FALSE;
 323:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 324:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 325:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 326:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #if AHRS_USE_GPS_HEADING && USE_GPS
 327:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   //got a 3d fix,ground speed > 0.5 m/s and course accuracy is better than 10deg
 328:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if(gps.fix == GPS_FIX_3D &&
 329:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      gps.gspeed >= 500 &&
 330:subsystems/ahrs/ahrs_int_cmpl_quat.c ****      gps.cacc <= RadOfDeg(10*1e7)) {
 331:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 332:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     // gps.course is in rad * 1e7, we need it in rad * 2^INT32_ANGLE_FRAC
 333:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     int32_t course = gps.course * ((1<<INT32_ANGLE_FRAC) / 1e7);
 334:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 335:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     /* the assumption here is that there is no side-slip, so heading=course */
 336:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 337:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     if (ahrs_impl.heading_aligned) {
 338:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       ahrs_update_heading(course);
 339:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     }
 340:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     else {
 341:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       /* hard reset the heading if this is the first measurement */
 342:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       ahrs_realign_heading(course);
 343:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     }
 344:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 345:subsystems/ahrs/ahrs_int_cmpl_quat.c **** #endif
 346:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 347:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 348:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 349:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_heading(int32_t heading) {
 350:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 351:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_ANGLE_NORMALIZE(heading);
 352:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 353:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // row 0 of ltp_to_body_rmat = body x-axis in ltp frame
 354:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // we only consider x and y
 355:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect2 expected_ltp =
 356:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     { RMAT_ELMT(ahrs.ltp_to_body_rmat, 0, 0),
 357:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       RMAT_ELMT(ahrs.ltp_to_body_rmat, 0, 1) };
 358:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 359:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   int32_t heading_x, heading_y;
 360:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 361:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 362:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 363:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // expected_heading cross measured_heading ??
 364:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual_ltp =
 365:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     { 0,
 366:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       0,
 367:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (expected_ltp.x * heading_y - expected_ltp.y * heading_x)/(1<<INT32_ANGLE_FRAC)};
 368:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 369:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 residual_imu;
 370:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 371:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 372:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // residual FRAC = TRIG_FRAC + TRIG_FRAC = 14 + 14 = 28
 373:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // rate_correction FRAC = RATE_FRAC = 12
 374:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // 2^12 / 2^28 * 4.0 = 1/2^14
 375:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   // (1<<INT32_ANGLE_FRAC)/2^14 = 1/4
 376:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/4;
 377:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/4;
 378:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/4;
 379:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 380:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 381:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* crude attempt to only update bias if deviation is small
 382:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    * e.g. needed when you only have gps providing heading
 383:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    * and the inital heading is totally different from
 384:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    * the gps course information you get once you have a gps fix.
 385:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    * Otherwise the bias will be falsely "corrected".
 386:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    */
 387:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   int32_t sin_max_angle_deviation;
 388:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(sin_max_angle_deviation, TRIG_BFP_OF_REAL(RadOfDeg(5.)));
 389:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ABS(residual_ltp.z) < sin_max_angle_deviation)
 390:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   {
 391:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     // residual_ltp FRAC = 2 * TRIG_FRAC = 28
 392:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     // high_rez_bias = RATE_FRAC+28 = 40
 393:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     // 2^40 / 2^28 * 2.5e-4 = 1
 394:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.p -= residual_imu.x*(1<<INT32_ANGLE_FRAC);
 395:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.q -= residual_imu.y*(1<<INT32_ANGLE_FRAC);
 396:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.r -= residual_imu.z*(1<<INT32_ANGLE_FRAC);
 397:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 398:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 399:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   }
 400:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 401:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 402:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_realign_heading(int32_t heading) {
 403:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 404:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* quaternion representing only the heading rotation from ltp to body */
 405:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Quat q_h_new;
 406:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   q_h_new.qx = 0;
 407:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   q_h_new.qy = 0;
 408:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 409:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 410:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 411:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* quaternion representing current heading only */
 412:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Quat q_h;
 413:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(q_h, ahrs.ltp_to_body_quat);
 414:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   q_h.qx = 0;
 415:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   q_h.qy = 0;
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 417:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 418:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* quaternion representing rotation from current to new heading */
 419:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Quat q_c;
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 421:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 422:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* correct current heading in body frame */
 423:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Quat q;
 424:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 425:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(ahrs.ltp_to_body_quat, q);
 426:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 427:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* compute other representations in body frame */
 428:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   compute_body_euler_and_rmat_from_quat();
 429:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 430:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* compute ltp to imu rotations */
 431:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   compute_imu_orientation();
 432:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 433:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = TRUE;
 434:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 435:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 436:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 437:subsystems/ahrs/ahrs_int_cmpl_quat.c **** /* Compute ltp to imu rotation in euler angles and rotation matrix representation
 438:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    from the quaternion representation */
 439:subsystems/ahrs/ahrs_int_cmpl_quat.c **** __attribute__ ((always_inline)) static inline void compute_imu_euler_and_rmat_from_quat(void) {
 440:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 441:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute LTP to IMU euler */
 442:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_quat);
 1059              		.loc 1 442 0
 1060 060c 07FB09F0 		mul	r0, r7, r9
 1061 0610 06FB08F3 		mul	r3, r6, r8
 1062 0614 C013     		asrs	r0, r0, #15
 1063 0616 00EBE330 		add	r0, r0, r3, asr #15
 1064 061a 40F31000 		sbfx	r0, r0, #0, #17
 1065 061e FFF7FEFF 		bl	__aeabi_i2f
 1066 0622 4FF06251 		mov	r1, #947912704
 1067 0626 FFF7FEFF 		bl	__aeabi_fmul
 1068 062a 08FB08FA 		mul	sl, r8, r8
 1069              	.LVL113:
 1070 062e 8346     		mov	fp, r0
 1071              	.LVL114:
 1072 0630 07FB07F0 		mul	r0, r7, r7
 1073 0634 4FEAEA3A 		asr	sl, sl, #15
 1074              	.LVL115:
 1075 0638 0AEBE030 		add	r0, sl, r0, asr #15
 1076 063c 40F31000 		sbfx	r0, r0, #0, #17
 1077 0640 C0F58040 		rsb	r0, r0, #16384
 1078 0644 FFF7FEFF 		bl	__aeabi_i2f
 1079 0648 4FF06251 		mov	r1, #947912704
 1080 064c FFF7FEFF 		bl	__aeabi_fmul
 1081 0650 0146     		mov	r1, r0
 1082 0652 5846     		mov	r0, fp
 1083 0654 FFF7FEFF 		bl	atan2f
 1084 0658 8346     		mov	fp, r0
 1085              	.LVL116:
 1086 065a 08FB09F0 		mul	r0, r8, r9
 1087              	.LVL117:
 1088 065e 06FB07F3 		mul	r3, r6, r7
 1089 0662 C013     		asrs	r0, r0, #15
 1090 0664 C0EBE330 		rsb	r0, r0, r3, asr #15
 1091 0668 40F31000 		sbfx	r0, r0, #0, #17
 1092 066c FFF7FEFF 		bl	__aeabi_i2f
 1093 0670 4FF06251 		mov	r1, #947912704
 1094 0674 FFF7FEFF 		bl	__aeabi_fmul
 1095 0678 FFF7FEFF 		bl	asinf
 1096 067c 06FB09F9 		mul	r9, r6, r9
 1097              	.LVL118:
 1098 0680 08FB07F7 		mul	r7, r8, r7
 1099              	.LVL119:
 1100 0684 4FEAE939 		asr	r9, r9, #15
 1101              	.LVL120:
 1102 0688 0346     		mov	r3, r0
 1103              	.LVL121:
 1104 068a 09EBE730 		add	r0, r9, r7, asr #15
 1105              	.LVL122:
 1106 068e 40F31000 		sbfx	r0, r0, #0, #17
 1107 0692 0093     		str	r3, [sp, #0]
 1108 0694 FFF7FEFF 		bl	__aeabi_i2f
 1109              	.LVL123:
 1110 0698 4FF06251 		mov	r1, #947912704
 1111 069c FFF7FEFF 		bl	__aeabi_fmul
 1112 06a0 7643     		muls	r6, r6, r6
 1113              	.LVL124:
 1114 06a2 0AEBE63A 		add	sl, sl, r6, asr #15
 1115              	.LVL125:
 1116 06a6 0746     		mov	r7, r0
 1117 06a8 4AF31000 		sbfx	r0, sl, #0, #17
 1118 06ac C0F58040 		rsb	r0, r0, #16384
 1119 06b0 FFF7FEFF 		bl	__aeabi_i2f
 1120 06b4 4FF06251 		mov	r1, #947912704
 1121 06b8 FFF7FEFF 		bl	__aeabi_fmul
 1122 06bc 0146     		mov	r1, r0
 1123 06be 3846     		mov	r0, r7
 1124 06c0 FFF7FEFF 		bl	atan2f
 1125 06c4 4FF08B41 		mov	r1, #1166016512
 1126 06c8 0646     		mov	r6, r0
 1127              	.LVL126:
 1128 06ca 5846     		mov	r0, fp
 1129              	.LVL127:
 1130 06cc FFF7FEFF 		bl	__aeabi_fmul
 1131 06d0 FFF7FEFF 		bl	__aeabi_f2iz
 1132 06d4 009B     		ldr	r3, [sp, #0]
 1133 06d6 4FF08B41 		mov	r1, #1166016512
 1134 06da 2061     		str	r0, [r4, #16]
 1135 06dc 03F10040 		add	r0, r3, #-2147483648
 1136 06e0 FFF7FEFF 		bl	__aeabi_fmul
 1137 06e4 FFF7FEFF 		bl	__aeabi_f2iz
 1138 06e8 4FF08B41 		mov	r1, #1166016512
 1139 06ec 6061     		str	r0, [r4, #20]
 1140 06ee 3046     		mov	r0, r6
 1141 06f0 FFF7FEFF 		bl	__aeabi_fmul
 1142 06f4 FFF7FEFF 		bl	__aeabi_f2iz
 1143              	.LBE105:
 1144              	.LBB106:
 443:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute LTP to IMU rotation matrix */
 444:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1145              		.loc 1 444 0
 1146 06f8 2768     		ldr	r7, [r4, #0]
 1147 06fa 211D     		adds	r1, r4, #4
 1148 06fc 07FB07FE 		mul	lr, r7, r7
 1149 0700 0EC9     		ldmia	r1, {r1, r2, r3}
 1150              	.LBE106:
 1151              	.LBB107:
 442:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_quat);
 1152              		.loc 1 442 0
 1153 0702 A061     		str	r0, [r4, #24]
 1154              	.LBE107:
 1155              	.LBB108:
 1156              		.loc 1 444 0
 1157 0704 01FB07F0 		mul	r0, r1, r7
 1158 0708 03FB07F8 		mul	r8, r3, r7
 1159 070c 02FB01FA 		mul	sl, r2, r1
 1160 0710 01FB01FB 		mul	fp, r1, r1
 1161              	.LVL128:
 1162 0714 02FB07F6 		mul	r6, r2, r7
 1163              	.LVL129:
 1164 0718 03FB01FC 		mul	ip, r3, r1
 1165 071c 4FEAEE3E 		asr	lr, lr, #15
 1166 0720 AEF5804E 		sub	lr, lr, #16384
 1167              	.LVL130:
 1168 0724 C013     		asrs	r0, r0, #15
 1169 0726 0890     		str	r0, [sp, #32]
 1170              	.LVL131:
 1171 0728 4FEAE838 		asr	r8, r8, #15
 1172 072c 0EEBEB30 		add	r0, lr, fp, asr #15
 1173              	.LVL132:
 1174 0730 03FB02F9 		mul	r9, r3, r2
 1175              	.LVL133:
 1176 0734 4FEAEA3A 		asr	sl, sl, #15
 1177 0738 F613     		asrs	r6, r6, #15
 1178              	.LVL134:
 1179 073a 4FEAEC3C 		asr	ip, ip, #15
 1180 073e 0290     		str	r0, [sp, #8]
 1181 0740 E061     		str	r0, [r4, #28]
 1182 0742 C8EB0A00 		rsb	r0, r8, sl
 1183 0746 02FB02FB 		mul	fp, r2, r2
 1184 074a 0490     		str	r0, [sp, #16]
 1185 074c A062     		str	r0, [r4, #40]
 1186 074e 0CEB0600 		add	r0, ip, r6
 1187 0752 0690     		str	r0, [sp, #24]
 1188 0754 6063     		str	r0, [r4, #52]
 1189 0756 0898     		ldr	r0, [sp, #32]
 1190 0758 4FEAE939 		asr	r9, r9, #15
 1191 075c C0EB0900 		rsb	r0, r0, r9
 1192 0760 0790     		str	r0, [sp, #28]
 1193 0762 A063     		str	r0, [r4, #56]
 1194 0764 0EEBEB30 		add	r0, lr, fp, asr #15
 1195 0768 0990     		str	r0, [sp, #36]
 1196 076a E062     		str	r0, [r4, #44]
 1197 076c 0898     		ldr	r0, [sp, #32]
 1198 076e C6EB0C0C 		rsb	ip, r6, ip
 1199 0772 8144     		add	r9, r9, r0
 1200 0774 03FB03F0 		mul	r0, r3, r3
 1201              	.LBE108:
 1202              	.LBE104:
 1203              	.LBB113:
 1204              	.LBB114:
 445:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 446:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 447:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 448:subsystems/ahrs/ahrs_int_cmpl_quat.c **** /* Compute ltp to body rotation in euler angles and rotation matrix representation
 449:subsystems/ahrs/ahrs_int_cmpl_quat.c ****    from the quaternion representation */
 450:subsystems/ahrs/ahrs_int_cmpl_quat.c **** __attribute__ ((always_inline)) static inline void compute_body_euler_and_rmat_from_quat(void) {
 451:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 452:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute LTP to body euler */
 453:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_quat);
 454:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute LTP to body rotation matrix */
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 456:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 457:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 458:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 459:subsystems/ahrs/ahrs_int_cmpl_quat.c **** __attribute__ ((always_inline)) static inline void compute_body_orientation(void) {
 460:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 461:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute LTP to BODY quaternion */
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1205              		.loc 1 462 0
 1206 0778 6D4E     		ldr	r6, .L45+8
 1207              	.LVL135:
 1208              	.LBE114:
 1209              	.LBE113:
 1210              	.LBB121:
 1211              	.LBB109:
 444:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1212              		.loc 1 444 0
 1213 077a 0EEBE03E 		add	lr, lr, r0, asr #15
 1214              	.LVL136:
 1215              	.LBE109:
 1216              	.LBE121:
 1217              	.LBB122:
 1218              	.LBB117:
 1219              		.loc 1 462 0
 1220 077e D6F88800 		ldr	r0, [r6, #136]
 1221              	.LBE117:
 1222              	.LBE122:
 1223              	.LBB123:
 1224              	.LBB110:
 444:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1225              		.loc 1 444 0
 1226 0782 C244     		add	sl, sl, r8
 1227              	.LBE110:
 1228              	.LBE123:
 1229              	.LBB124:
 1230              	.LBB118:
 1231              		.loc 1 462 0
 1232 0784 00FB01FB 		mul	fp, r0, r1
 1233 0788 D6F88400 		ldr	r0, [r6, #132]
 1234 078c D6F89080 		ldr	r8, [r6, #144]
 1235              	.LVL137:
 1236 0790 00FB07BB 		mla	fp, r0, r7, fp
 1237 0794 D6F88C00 		ldr	r0, [r6, #140]
 1238 0798 CDF82CB0 		str	fp, [sp, #44]
 1239 079c 00FB02FB 		mul	fp, r0, r2
 1240 07a0 08FB03BB 		mla	fp, r8, r3, fp
 1241 07a4 0B98     		ldr	r0, [sp, #44]
 1242              	.LBE118:
 1243              	.LBE124:
 1244              	.LBB125:
 1245              	.LBB111:
 444:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1246              		.loc 1 444 0
 1247 07a6 C4F820A0 		str	sl, [r4, #32]
 1248              	.LBE111:
 1249              	.LBE125:
 1250              	.LBB126:
 1251              	.LBB119:
 1252              		.loc 1 462 0
 1253 07aa 8344     		add	fp, r0, fp
 1254 07ac 4FEAEB3B 		asr	fp, fp, #15
 1255              	.LBE119:
 1256              	.LBE126:
 1257              	.LBB127:
 1258              	.LBB112:
 444:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1259              		.loc 1 444 0
 1260 07b0 C4F824C0 		str	ip, [r4, #36]
 1261 07b4 C4F83090 		str	r9, [r4, #48]
 1262 07b8 C4F83CE0 		str	lr, [r4, #60]
 1263              	.LBE112:
 1264              	.LBE127:
 1265              	.LBB128:
 1266              	.LBB120:
 1267              		.loc 1 462 0
 1268 07bc C4F84CB0 		str	fp, [r4, #76]
 1269 07c0 D6F88400 		ldr	r0, [r6, #132]
 1270 07c4 7F42     		negs	r7, r7
 1271 07c6 00FB01FB 		mul	fp, r0, r1
 1272 07ca D6F88800 		ldr	r0, [r6, #136]
 1273 07ce 00FB07BB 		mla	fp, r0, r7, fp
 1274 07d2 D6F88C00 		ldr	r0, [r6, #140]
 1275 07d6 CDF82CB0 		str	fp, [sp, #44]
 1276 07da 00FB03FB 		mul	fp, r0, r3
 1277 07de 08FB12BB 		mls	fp, r8, r2, fp
 1278 07e2 0B98     		ldr	r0, [sp, #44]
 1279 07e4 8344     		add	fp, r0, fp
 1280 07e6 4FEAEB3B 		asr	fp, fp, #15
 1281 07ea C4F850B0 		str	fp, [r4, #80]
 1282 07ee 08FB01FB 		mul	fp, r8, r1
 1283 07f2 D6F88C00 		ldr	r0, [r6, #140]
 1284 07f6 00FB07BB 		mla	fp, r0, r7, fp
 1285 07fa D6F88400 		ldr	r0, [r6, #132]
 1286 07fe 08FB07F7 		mul	r7, r8, r7
 1287 0802 00FB02BB 		mla	fp, r0, r2, fp
 1288 0806 D6F88800 		ldr	r0, [r6, #136]
 1289 080a 00FB13BB 		mls	fp, r0, r3, fp
 1290 080e D6F88C00 		ldr	r0, [r6, #140]
 1291 0812 4FEAEB3B 		asr	fp, fp, #15
 1292 0816 00FB1177 		mls	r7, r0, r1, r7
 1293 081a D6F88810 		ldr	r1, [r6, #136]
 1294 081e D6F88400 		ldr	r0, [r6, #132]
 1295 0822 4A43     		muls	r2, r1, r2
 1296 0824 00FB0322 		mla	r2, r0, r3, r2
 463:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute LTP to BODY rotation matrix */
 464:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_COMP_INV(ahrs.ltp_to_body_rmat, ahrs.ltp_to_imu_rmat, imu.body_to_imu_rmat);
 1297              		.loc 1 464 0
 1298 0828 D6F8A010 		ldr	r1, [r6, #160]
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1299              		.loc 1 462 0
 1300 082c BA18     		adds	r2, r7, r2
 1301              		.loc 1 464 0
 1302 082e 049F     		ldr	r7, [sp, #16]
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1303              		.loc 1 462 0
 1304 0830 D213     		asrs	r2, r2, #15
 1305              		.loc 1 464 0
 1306 0832 07FB01F0 		mul	r0, r7, r1
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1307              		.loc 1 462 0
 1308 0836 A265     		str	r2, [r4, #88]
 1309              		.loc 1 464 0
 1310 0838 029F     		ldr	r7, [sp, #8]
 1311 083a D6F89420 		ldr	r2, [r6, #148]
 1312 083e D6F8AC30 		ldr	r3, [r6, #172]
 1313 0842 07FB0200 		mla	r0, r7, r2, r0
 1314 0846 069F     		ldr	r7, [sp, #24]
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1315              		.loc 1 462 0
 1316 0848 C4F854B0 		str	fp, [r4, #84]
 1317              		.loc 1 464 0
 1318 084c 07FB0300 		mla	r0, r7, r3, r0
 1319 0850 8013     		asrs	r0, r0, #14
 1320 0852 0890     		str	r0, [sp, #32]
 1321 0854 A066     		str	r0, [r4, #104]
 1322 0856 0998     		ldr	r0, [sp, #36]
 1323 0858 00FB01F7 		mul	r7, r0, r1
 1324 085c 09FB01F1 		mul	r1, r9, r1
 1325 0860 0CFB0211 		mla	r1, ip, r2, r1
 1326 0864 0AFB0277 		mla	r7, sl, r2, r7
 1327 0868 0798     		ldr	r0, [sp, #28]
 1328 086a 0EFB0311 		mla	r1, lr, r3, r1
 1329 086e 00FB0377 		mla	r7, r0, r3, r7
 1330 0872 4FEAA138 		asr	r8, r1, #14
 1331 0876 0498     		ldr	r0, [sp, #16]
 1332 0878 D6F8A410 		ldr	r1, [r6, #164]
 1333 087c BF13     		asrs	r7, r7, #14
 1334 087e 0A97     		str	r7, [sp, #40]
 1335 0880 E766     		str	r7, [r4, #108]
 1336 0882 00FB01F7 		mul	r7, r0, r1
 1337 0886 D6F89820 		ldr	r2, [r6, #152]
 1338 088a 0298     		ldr	r0, [sp, #8]
 1339 088c D6F8B030 		ldr	r3, [r6, #176]
 1340 0890 00FB0277 		mla	r7, r0, r2, r7
 1341 0894 0698     		ldr	r0, [sp, #24]
 1342 0896 C4F87080 		str	r8, [r4, #112]
 1343 089a 00FB0377 		mla	r7, r0, r3, r7
 1344 089e B813     		asrs	r0, r7, #14
 1345 08a0 6067     		str	r0, [r4, #116]
 1346 08a2 0998     		ldr	r0, [sp, #36]
 1347 08a4 00FB01F7 		mul	r7, r0, r1
 1348 08a8 09FB01F1 		mul	r1, r9, r1
 1349 08ac 0AFB0277 		mla	r7, sl, r2, r7
 1350 08b0 0CFB0211 		mla	r1, ip, r2, r1
 1351 08b4 0798     		ldr	r0, [sp, #28]
 1352 08b6 0EFB0311 		mla	r1, lr, r3, r1
 1353 08ba 00FB0377 		mla	r7, r0, r3, r7
 1354 08be B813     		asrs	r0, r7, #14
 1355 08c0 A067     		str	r0, [r4, #120]
 1356 08c2 049F     		ldr	r7, [sp, #16]
 1357 08c4 8813     		asrs	r0, r1, #14
 1358 08c6 D6F8A810 		ldr	r1, [r6, #168]
 1359 08ca D6F89C20 		ldr	r2, [r6, #156]
 1360 08ce 07FB01FB 		mul	fp, r7, r1
 1361 08d2 029F     		ldr	r7, [sp, #8]
 1362 08d4 D6F8B430 		ldr	r3, [r6, #180]
 1363 08d8 07FB02BB 		mla	fp, r7, r2, fp
 1364 08dc 069F     		ldr	r7, [sp, #24]
 1365 08de 09FB01F9 		mul	r9, r9, r1
 1366 08e2 07FB03BB 		mla	fp, r7, r3, fp
 1367 08e6 099F     		ldr	r7, [sp, #36]
 1368 08e8 4FEAAB3B 		asr	fp, fp, #14
 1369 08ec C4F880B0 		str	fp, [r4, #128]
 1370 08f0 07FB01FB 		mul	fp, r7, r1
 1371 08f4 0CFB029C 		mla	ip, ip, r2, r9
 1372 08f8 0AFB02BA 		mla	sl, sl, r2, fp
 1373 08fc 079F     		ldr	r7, [sp, #28]
 1374 08fe 0EFB03CE 		mla	lr, lr, r3, ip
 1375 0902 07FB03AA 		mla	sl, r7, r3, sl
 1376 0906 4FEAAE39 		asr	r9, lr, #14
 1377 090a 4FEAAA3A 		asr	sl, sl, #14
 1378 090e C4F884A0 		str	sl, [r4, #132]
 1379 0912 C4F88890 		str	r9, [r4, #136]
 1380              	.LVL138:
 1381 0916 E067     		str	r0, [r4, #124]
 1382              	.LBB115:
 465:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* compute LTP to BODY eulers */
 466:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_RMAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_rmat);
 1383              		.loc 1 466 0
 1384 0918 FFF7FEFF 		bl	__aeabi_i2f
 1385              	.LVL139:
 1386 091c 4FF06251 		mov	r1, #947912704
 1387 0920 FFF7FEFF 		bl	__aeabi_fmul
 1388 0924 8246     		mov	sl, r0
 1389 0926 05E0     		b	.L46
 1390              	.L47:
 1391              		.align	2
 1392              	.L45:
 1393 0928 00000000 		.word	ahrs
 1394 092c 00000000 		.word	.LANCHOR0
 1395 0930 00000000 		.word	imu
 1396              	.L46:
 1397 0934 4846     		mov	r0, r9
 1398 0936 FFF7FEFF 		bl	__aeabi_i2f
 1399 093a 4FF06251 		mov	r1, #947912704
 1400 093e FFF7FEFF 		bl	__aeabi_fmul
 1401 0942 0146     		mov	r1, r0
 1402 0944 5046     		mov	r0, sl
 1403 0946 FFF7FEFF 		bl	atan2f
 1404 094a 8146     		mov	r9, r0
 1405              	.LVL140:
 1406 094c 4046     		mov	r0, r8
 1407              	.LVL141:
 1408 094e FFF7FEFF 		bl	__aeabi_i2f
 1409 0952 4FF06251 		mov	r1, #947912704
 1410 0956 FFF7FEFF 		bl	__aeabi_fmul
 1411 095a FFF7FEFF 		bl	asinf
 1412 095e 8046     		mov	r8, r0
 1413              	.LVL142:
 1414 0960 0A98     		ldr	r0, [sp, #40]
 1415              	.LVL143:
 1416 0962 FFF7FEFF 		bl	__aeabi_i2f
 1417 0966 4FF06251 		mov	r1, #947912704
 1418 096a FFF7FEFF 		bl	__aeabi_fmul
 1419 096e 0746     		mov	r7, r0
 1420 0970 0898     		ldr	r0, [sp, #32]
 1421 0972 FFF7FEFF 		bl	__aeabi_i2f
 1422 0976 4FF06251 		mov	r1, #947912704
 1423 097a FFF7FEFF 		bl	__aeabi_fmul
 1424 097e 0146     		mov	r1, r0
 1425 0980 3846     		mov	r0, r7
 1426 0982 FFF7FEFF 		bl	atan2f
 1427 0986 4FF08B41 		mov	r1, #1166016512
 1428 098a 0746     		mov	r7, r0
 1429              	.LVL144:
 1430 098c 4846     		mov	r0, r9
 1431              	.LVL145:
 1432 098e FFF7FEFF 		bl	__aeabi_fmul
 1433 0992 FFF7FEFF 		bl	__aeabi_f2iz
 1434 0996 4FF08B41 		mov	r1, #1166016512
 1435 099a E065     		str	r0, [r4, #92]
 1436 099c 08F10040 		add	r0, r8, #-2147483648
 1437 09a0 FFF7FEFF 		bl	__aeabi_fmul
 1438 09a4 FFF7FEFF 		bl	__aeabi_f2iz
 1439 09a8 4FF08B41 		mov	r1, #1166016512
 1440 09ac 2066     		str	r0, [r4, #96]
 1441 09ae 3846     		mov	r0, r7
 1442 09b0 FFF7FEFF 		bl	__aeabi_fmul
 1443 09b4 FFF7FEFF 		bl	__aeabi_f2iz
 1444              	.LBE115:
 467:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* compute body rates */
 468:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_RATEMULT(ahrs.body_rate, imu.body_to_imu_rmat, ahrs.imu_rate);
 1445              		.loc 1 468 0
 1446 09b8 616C     		ldr	r1, [r4, #68]
 1447              	.LBB116:
 466:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_RMAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_rmat);
 1448              		.loc 1 466 0
 1449 09ba 6066     		str	r0, [r4, #100]
 1450              	.LBE116:
 1451              		.loc 1 468 0
 1452 09bc D6F8A000 		ldr	r0, [r6, #160]
 1453 09c0 226C     		ldr	r2, [r4, #64]
 1454 09c2 4843     		muls	r0, r1, r0
 1455 09c4 D6F89470 		ldr	r7, [r6, #148]
 1456              	.LVL146:
 1457 09c8 A36C     		ldr	r3, [r4, #72]
 1458 09ca 07FB0200 		mla	r0, r7, r2, r0
 1459 09ce D6F8AC70 		ldr	r7, [r6, #172]
 1460 09d2 07FB0300 		mla	r0, r7, r3, r0
 1461 09d6 8013     		asrs	r0, r0, #14
 1462 09d8 C4F88C00 		str	r0, [r4, #140]
 1463 09dc D6F8A400 		ldr	r0, [r6, #164]
 1464 09e0 D6F89870 		ldr	r7, [r6, #152]
 1465 09e4 4843     		muls	r0, r1, r0
 1466 09e6 07FB0200 		mla	r0, r7, r2, r0
 1467 09ea D6F8B070 		ldr	r7, [r6, #176]
 1468 09ee 07FB0300 		mla	r0, r7, r3, r0
 1469 09f2 D6F8A870 		ldr	r7, [r6, #168]
 1470 09f6 8013     		asrs	r0, r0, #14
 1471 09f8 7943     		muls	r1, r7, r1
 1472 09fa C4F89000 		str	r0, [r4, #144]
 1473 09fe D6F89C00 		ldr	r0, [r6, #156]
 1474 0a02 00FB0212 		mla	r2, r0, r2, r1
 1475 0a06 D6F8B410 		ldr	r1, [r6, #180]
 1476 0a0a 01FB0323 		mla	r3, r1, r3, r2
 1477 0a0e 9B13     		asrs	r3, r3, #14
 1478 0a10 C4F89430 		str	r3, [r4, #148]
 1479              	.LBE120:
 1480              	.LBE128:
 114:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 1481              		.loc 1 114 0
 1482 0a14 104B     		ldr	r3, .L48
 1483 0a16 1968     		ldr	r1, [r3, #0]
 1484 0a18 5A68     		ldr	r2, [r3, #4]
 115:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.high_rez_bias, ahrs_aligner.lp_gyro);
 1485              		.loc 1 115 0
 1486 0a1a C817     		asrs	r0, r1, #31
 116:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1487              		.loc 1 116 0
 1488 0a1c 0007     		lsls	r0, r0, #28
 1489 0a1e 40EA1110 		orr	r0, r0, r1, lsr #4
 114:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 1490              		.loc 1 114 0
 1491 0a22 2960     		str	r1, [r5, #0]
 116:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1492              		.loc 1 116 0
 1493 0a24 0907     		lsls	r1, r1, #28
 1494 0a26 A962     		str	r1, [r5, #40]
 115:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.high_rez_bias, ahrs_aligner.lp_gyro);
 1495              		.loc 1 115 0
 1496 0a28 D117     		asrs	r1, r2, #31
 114:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 1497              		.loc 1 114 0
 1498 0a2a 9B68     		ldr	r3, [r3, #8]
 116:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1499              		.loc 1 116 0
 1500 0a2c 0907     		lsls	r1, r1, #28
 114:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 1501              		.loc 1 114 0
 1502 0a2e 6A60     		str	r2, [r5, #4]
 116:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1503              		.loc 1 116 0
 1504 0a30 41EA1211 		orr	r1, r1, r2, lsr #4
 1505 0a34 1207     		lsls	r2, r2, #28
 1506 0a36 2A63     		str	r2, [r5, #48]
 115:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.high_rez_bias, ahrs_aligner.lp_gyro);
 1507              		.loc 1 115 0
 1508 0a38 DA17     		asrs	r2, r3, #31
 116:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1509              		.loc 1 116 0
 1510 0a3a 1207     		lsls	r2, r2, #28
 114:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY( ahrs_impl.gyro_bias, ahrs_aligner.lp_gyro);
 1511              		.loc 1 114 0
 1512 0a3c AB60     		str	r3, [r5, #8]
 116:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1513              		.loc 1 116 0
 1514 0a3e E862     		str	r0, [r5, #44]
 1515 0a40 42EA1312 		orr	r2, r2, r3, lsr #4
 118:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs.status = AHRS_RUNNING;
 1516              		.loc 1 118 0
 1517 0a44 0120     		movs	r0, #1
 116:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_LSHIFT(ahrs_impl.high_rez_bias, ahrs_impl.high_rez_bias, 28);
 1518              		.loc 1 116 0
 1519 0a46 1B07     		lsls	r3, r3, #28
 1520 0a48 6963     		str	r1, [r5, #52]
 1521 0a4a EA63     		str	r2, [r5, #60]
 1522 0a4c AB63     		str	r3, [r5, #56]
 118:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs.status = AHRS_RUNNING;
 1523              		.loc 1 118 0
 1524 0a4e 84F89800 		strb	r0, [r4, #152]
 119:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 1525              		.loc 1 119 0
 1526 0a52 0DB0     		add	sp, sp, #52
 1527 0a54 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1528              	.L49:
 1529              		.align	2
 1530              	.L48:
 1531 0a58 00000000 		.word	ahrs_aligner
 1532              		.cfi_endproc
 1533              	.LFE11:
 1535 0a5c AFF30080 		.section	.text.ahrs_propagate,"ax",%progbits
 1536              		.align	1
 1537              		.global	ahrs_propagate
 1538              		.thumb
 1539              		.thumb_func
 1541              	ahrs_propagate:
 1542              	.LFB12:
 128:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_propagate(void) {
 1543              		.loc 1 128 0
 1544              		.cfi_startproc
 1545              		@ args = 0, pretend = 0, frame = 32
 1546              		@ frame_needed = 0, uses_anonymous_args = 0
 1547 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1548              	.LCFI3:
 1549              		.cfi_def_cfa_offset 36
 1550              		.cfi_offset 14, -4
 1551              		.cfi_offset 11, -8
 1552              		.cfi_offset 10, -12
 1553              		.cfi_offset 9, -16
 1554              		.cfi_offset 8, -20
 1555              		.cfi_offset 7, -24
 1556              		.cfi_offset 6, -28
 1557              		.cfi_offset 5, -32
 1558              		.cfi_offset 4, -36
 132:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_DIFF(omega, imu.gyro_prev, ahrs_impl.gyro_bias);
 1559              		.loc 1 132 0
 1560 0004 4949     		ldr	r1, .L56
 1561 0006 4A4C     		ldr	r4, .L56+4
 1562 0008 4A6A     		ldr	r2, [r1, #36]
 1563 000a 2368     		ldr	r3, [r4, #0]
 1564 000c 886A     		ldr	r0, [r1, #40]
 1565 000e D31A     		subs	r3, r2, r3
 1566              	.LVL147:
 1567 0010 6268     		ldr	r2, [r4, #4]
 1568 0012 C96A     		ldr	r1, [r1, #44]
 1569 0014 801A     		subs	r0, r0, r2
 1570              	.LVL148:
 1571 0016 A268     		ldr	r2, [r4, #8]
 140:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY(ahrs.imu_rate, omega);
 1572              		.loc 1 140 0
 1573 0018 464D     		ldr	r5, .L56+8
 132:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_DIFF(omega, imu.gyro_prev, ahrs_impl.gyro_bias);
 1574              		.loc 1 132 0
 1575 001a 8A1A     		subs	r2, r1, r2
 1576              	.LVL149:
 144:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(omega, ahrs_impl.rate_correction);
 1577              		.loc 1 144 0
 1578 001c E168     		ldr	r1, [r4, #12]
 140:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY(ahrs.imu_rate, omega);
 1579              		.loc 1 140 0
 1580 001e 2B64     		str	r3, [r5, #64]
 144:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(omega, ahrs_impl.rate_correction);
 1581              		.loc 1 144 0
 1582 0020 5B18     		adds	r3, r3, r1
 1583              	.LVL150:
 1584 0022 2169     		ldr	r1, [r4, #16]
 140:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY(ahrs.imu_rate, omega);
 1585              		.loc 1 140 0
 1586 0024 6864     		str	r0, [r5, #68]
 144:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(omega, ahrs_impl.rate_correction);
 1587              		.loc 1 144 0
 1588 0026 4018     		adds	r0, r0, r1
 1589              	.LVL151:
 1590 0028 6169     		ldr	r1, [r4, #20]
 1591              	.LBB129:
 149:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE_FREQ
 1592              		.loc 1 149 0
 1593 002a D5F804E0 		ldr	lr, [r5, #4]
 1594              	.LBE129:
 140:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_COPY(ahrs.imu_rate, omega);
 1595              		.loc 1 140 0
 1596 002e AA64     		str	r2, [r5, #72]
 144:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   RATES_ADD(omega, ahrs_impl.rate_correction);
 1597              		.loc 1 144 0
 1598 0030 5218     		adds	r2, r2, r1
 1599              	.LVL152:
 146:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_ZERO(ahrs_impl.rate_correction);
 1600              		.loc 1 146 0
 1601 0032 0021     		movs	r1, #0
 1602 0034 E160     		str	r1, [r4, #12]
 1603 0036 2161     		str	r1, [r4, #16]
 1604 0038 6161     		str	r1, [r4, #20]
 1605              	.LBB130:
 149:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE_FREQ
 1606              		.loc 1 149 0
 1607 003a 5942     		negs	r1, r3
 1608 003c 0EFB01F1 		mul	r1, lr, r1
 1609 0040 AE68     		ldr	r6, [r5, #8]
 1610 0042 D5F80CC0 		ldr	ip, [r5, #12]
 1611 0046 06FB1011 		mls	r1, r6, r0, r1
 1612 004a 0CFB1211 		mls	r1, ip, r2, r1
 1613 004e A769     		ldr	r7, [r4, #24]
 1614 0050 06FB02F8 		mul	r8, r6, r2
 1615 0054 C919     		adds	r1, r1, r7
 1616 0056 2F68     		ldr	r7, [r5, #0]
 1617 0058 D4F81C90 		ldr	r9, [r4, #28]
 1618 005c 07FB0388 		mla	r8, r7, r3, r8
 1619 0060 0CFB1088 		mls	r8, ip, r0, r8
 1620 0064 C844     		add	r8, r9, r8
 1621 0066 C4F81C80 		str	r8, [r4, #28]
 1622 006a 07FB00F8 		mul	r8, r7, r0
 1623 006e 0EFB00F0 		mul	r0, lr, r0
 1624              	.LVL153:
 1625 0072 0EFB1288 		mls	r8, lr, r2, r8
 1626 0076 07FB0202 		mla	r2, r7, r2, r0
 1627              	.LVL154:
 1628 007a 0CFB038C 		mla	ip, ip, r3, r8
 1629 007e 06FB1323 		mls	r3, r6, r3, r2
 1630              	.LVL155:
 1631 0082 D4F82080 		ldr	r8, [r4, #32]
 1632 0086 666A     		ldr	r6, [r4, #36]
 1633              	.LBE130:
 128:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_propagate(void) {
 1634              		.loc 1 128 0
 1635 0088 89B0     		sub	sp, sp, #36
 1636              	.LCFI4:
 1637              		.cfi_def_cfa_offset 72
 1638              	.LBB131:
 149:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE_FREQ
 1639              		.loc 1 149 0
 1640 008a C444     		add	ip, r8, ip
 1641 008c F318     		adds	r3, r6, r3
 1642 008e C4F820C0 		str	ip, [r4, #32]
 1643 0092 A161     		str	r1, [r4, #24]
 1644 0094 6362     		str	r3, [r4, #36]
 1645 0096 06A8     		add	r0, sp, #24
 1646 0098 4FF48002 		mov	r2, #4194304
 1647 009c FFF7FEFF 		bl	ldiv
 1648              	.LVL156:
 1649 00a0 2A68     		ldr	r2, [r5, #0]
 1650 00a2 069B     		ldr	r3, [sp, #24]
 1651 00a4 06A8     		add	r0, sp, #24
 1652              	.LVL157:
 1653 00a6 D318     		adds	r3, r2, r3
 1654 00a8 2B60     		str	r3, [r5, #0]
 1655 00aa 079B     		ldr	r3, [sp, #28]
 1656 00ac E169     		ldr	r1, [r4, #28]
 1657 00ae A361     		str	r3, [r4, #24]
 1658 00b0 4FF48002 		mov	r2, #4194304
 1659 00b4 FFF7FEFF 		bl	ldiv
 1660              	.LVL158:
 1661 00b8 6A68     		ldr	r2, [r5, #4]
 1662 00ba 069B     		ldr	r3, [sp, #24]
 1663 00bc 06A8     		add	r0, sp, #24
 1664              	.LVL159:
 1665 00be D318     		adds	r3, r2, r3
 1666 00c0 6B60     		str	r3, [r5, #4]
 1667 00c2 079B     		ldr	r3, [sp, #28]
 1668 00c4 216A     		ldr	r1, [r4, #32]
 1669 00c6 E361     		str	r3, [r4, #28]
 1670 00c8 4FF48002 		mov	r2, #4194304
 1671 00cc FFF7FEFF 		bl	ldiv
 1672              	.LVL160:
 1673 00d0 AA68     		ldr	r2, [r5, #8]
 1674 00d2 069B     		ldr	r3, [sp, #24]
 1675 00d4 06A8     		add	r0, sp, #24
 1676              	.LVL161:
 1677 00d6 D318     		adds	r3, r2, r3
 1678 00d8 AB60     		str	r3, [r5, #8]
 1679 00da 079B     		ldr	r3, [sp, #28]
 1680 00dc 616A     		ldr	r1, [r4, #36]
 1681 00de 2362     		str	r3, [r4, #32]
 1682 00e0 4FF48002 		mov	r2, #4194304
 1683 00e4 FFF7FEFF 		bl	ldiv
 1684              	.LVL162:
 1685              	.LBE131:
 1686              	.LBB132:
 1687              	.LBB133:
 150:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1688              		.loc 1 150 0
 1689 00e8 95E8C200 		ldmia	r5, {r1, r6, r7}
 1690              	.LBE133:
 1691              	.LBE132:
 1692              	.LBB138:
 149:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE_FREQ
 1693              		.loc 1 149 0
 1694 00ec 069B     		ldr	r3, [sp, #24]
 1695 00ee EA68     		ldr	r2, [r5, #12]
 1696              	.LBE138:
 1697              	.LBB139:
 1698              	.LBB135:
 150:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1699              		.loc 1 150 0
 1700 00f0 06FB06F0 		mul	r0, r6, r6
 1701              	.LBE135:
 1702              	.LBE139:
 1703              	.LBB140:
 149:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE_FREQ
 1704              		.loc 1 149 0
 1705 00f4 D218     		adds	r2, r2, r3
 1706 00f6 079B     		ldr	r3, [sp, #28]
 1707              	.LBE140:
 1708              	.LBB141:
 1709              	.LBB136:
 150:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1710              		.loc 1 150 0
 1711 00f8 01FB0100 		mla	r0, r1, r1, r0
 1712              	.LBE136:
 1713              	.LBE141:
 1714              	.LBB142:
 149:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INTEGRATE_FI(ahrs.ltp_to_imu_quat, ahrs_impl.high_rez_quat, omega, AHRS_PROPAGATE_FREQ
 1715              		.loc 1 149 0
 1716 00fc 6362     		str	r3, [r4, #36]
 1717              	.LBE142:
 1718              	.LBB143:
 1719              	.LBB137:
 150:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1720              		.loc 1 150 0
 1721 00fe 07FB07F3 		mul	r3, r7, r7
 1722 0102 02FB0233 		mla	r3, r2, r2, r3
 1723              	.LVL163:
 1724 0106 C018     		adds	r0, r0, r3
 1725              	.LVL164:
 1726 0108 16D0     		beq	.L54
 1727              	.LVL165:
 1728              	.LBB134:
 150:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1729              		.loc 1 150 0 is_stmt 0 discriminator 2
 1730 010a 0346     		mov	r3, r0
 1731 010c 2824     		movs	r4, #40
 1732 010e 00E0     		b	.L53
 1733              	.LVL166:
 1734              	.L55:
 150:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1735              		.loc 1 150 0
 1736 0110 2B46     		mov	r3, r5
 1737              	.LVL167:
 1738              	.L53:
 150:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1739              		.loc 1 150 0 discriminator 3
 1740 0112 B0FBF3F5 		udiv	r5, r0, r3
 1741              	.LVL168:
 1742 0116 ED18     		adds	r5, r5, r3
 1743              	.LVL169:
 1744 0118 6D08     		lsrs	r5, r5, #1
 1745              	.LVL170:
 1746 011a 5B1B     		subs	r3, r3, r5
 1747              	.LVL171:
 1748 011c 012B     		cmp	r3, #1
 1749 011e 0CD9     		bls	.L51
 150:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1750              		.loc 1 150 0 discriminator 4
 1751 0120 013C     		subs	r4, r4, #1
 1752 0122 E4B2     		uxtb	r4, r4
 1753 0124 002C     		cmp	r4, #0
 1754 0126 F3D1     		bne	.L55
 1755 0128 07E0     		b	.L51
 1756              	.L57:
 1757 012a 00BF     		.align	2
 1758              	.L56:
 1759 012c 00000000 		.word	imu
 1760 0130 00000000 		.word	.LANCHOR0
 1761 0134 00000000 		.word	ahrs
 1762              	.LVL172:
 1763              	.L54:
 1764              	.LBE134:
 150:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1765              		.loc 1 150 0
 1766 0138 0546     		mov	r5, r0
 1767              	.L51:
 1768              	.LVL173:
 1769              	.LBE137:
 150:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1770              		.loc 1 150 0 discriminator 6
 1771 013a 4FEAC138 		lsl	r8, r1, #15
 1772 013e F603     		lsls	r6, r6, #15
 1773 0140 D203     		lsls	r2, r2, #15
 1774 0142 96FBF5F6 		sdiv	r6, r6, r5
 1775 0146 98FBF5F8 		sdiv	r8, r8, r5
 1776 014a FF03     		lsls	r7, r7, #15
 1777 014c 97FBF5F7 		sdiv	r7, r7, r5
 1778              	.LBE143:
 1779              	.LBB144:
 1780              	.LBB145:
 442:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_quat);
 1781              		.loc 1 442 0 is_stmt 1 discriminator 6
 1782 0150 06FB08F0 		mul	r0, r6, r8
 1783              	.LVL174:
 1784              	.LBE145:
 1785              	.LBE144:
 1786              	.LBB157:
 150:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1787              		.loc 1 150 0 discriminator 6
 1788 0154 92FBF5F5 		sdiv	r5, r2, r5
 1789              	.LVL175:
 1790              	.LBE157:
 1791              	.LBB158:
 1792              	.LBB146:
 442:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_quat);
 1793              		.loc 1 442 0 discriminator 6
 1794 0158 05FB07F3 		mul	r3, r5, r7
 1795              	.LBE146:
 1796              	.LBE158:
 1797              	.LBB159:
 150:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1798              		.loc 1 150 0 discriminator 6
 1799 015c DA4C     		ldr	r4, .L58
 1800              	.LBE159:
 1801              	.LBB160:
 1802              	.LBB147:
 442:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_quat);
 1803              		.loc 1 442 0 discriminator 6
 1804 015e C013     		asrs	r0, r0, #15
 1805 0160 00EBE330 		add	r0, r0, r3, asr #15
 1806              	.LBE147:
 1807              	.LBE160:
 1808              	.LBB161:
 150:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(ahrs.ltp_to_imu_quat);
 1809              		.loc 1 150 0 discriminator 6
 1810 0164 C4F80080 		str	r8, [r4, #0]
 1811 0168 6660     		str	r6, [r4, #4]
 1812 016a A760     		str	r7, [r4, #8]
 1813 016c E560     		str	r5, [r4, #12]
 1814              	.LVL176:
 1815              	.LBE161:
 1816              	.LBB162:
 1817              	.LBB148:
 442:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_quat);
 1818              		.loc 1 442 0 discriminator 6
 1819 016e 40F31000 		sbfx	r0, r0, #0, #17
 1820 0172 FFF7FEFF 		bl	__aeabi_i2f
 1821 0176 4FF06251 		mov	r1, #947912704
 1822 017a FFF7FEFF 		bl	__aeabi_fmul
 1823 017e 07FB07F9 		mul	r9, r7, r7
 1824 0182 8246     		mov	sl, r0
 1825 0184 06FB06F0 		mul	r0, r6, r6
 1826 0188 4FEAE939 		asr	r9, r9, #15
 1827              	.LVL177:
 1828 018c 09EBE030 		add	r0, r9, r0, asr #15
 1829 0190 40F31000 		sbfx	r0, r0, #0, #17
 1830 0194 C0F58040 		rsb	r0, r0, #16384
 1831 0198 FFF7FEFF 		bl	__aeabi_i2f
 1832 019c 4FF06251 		mov	r1, #947912704
 1833 01a0 FFF7FEFF 		bl	__aeabi_fmul
 1834 01a4 0146     		mov	r1, r0
 1835 01a6 5046     		mov	r0, sl
 1836 01a8 FFF7FEFF 		bl	atan2f
 1837 01ac 8346     		mov	fp, r0
 1838              	.LVL178:
 1839 01ae 07FB08F0 		mul	r0, r7, r8
 1840              	.LVL179:
 1841 01b2 05FB06F3 		mul	r3, r5, r6
 1842 01b6 C013     		asrs	r0, r0, #15
 1843 01b8 C0EBE330 		rsb	r0, r0, r3, asr #15
 1844 01bc 40F31000 		sbfx	r0, r0, #0, #17
 1845 01c0 FFF7FEFF 		bl	__aeabi_i2f
 1846 01c4 4FF06251 		mov	r1, #947912704
 1847 01c8 FFF7FEFF 		bl	__aeabi_fmul
 1848 01cc FFF7FEFF 		bl	asinf
 1849 01d0 05FB08F8 		mul	r8, r5, r8
 1850              	.LVL180:
 1851 01d4 7E43     		muls	r6, r7, r6
 1852              	.LVL181:
 1853 01d6 4FEAE838 		asr	r8, r8, #15
 1854              	.LVL182:
 1855 01da 8246     		mov	sl, r0
 1856              	.LVL183:
 1857 01dc 08EBE630 		add	r0, r8, r6, asr #15
 1858              	.LVL184:
 1859 01e0 40F31000 		sbfx	r0, r0, #0, #17
 1860 01e4 FFF7FEFF 		bl	__aeabi_i2f
 1861 01e8 4FF06251 		mov	r1, #947912704
 1862 01ec FFF7FEFF 		bl	__aeabi_fmul
 1863 01f0 6D43     		muls	r5, r5, r5
 1864              	.LVL185:
 1865 01f2 09EBE539 		add	r9, r9, r5, asr #15
 1866              	.LVL186:
 1867 01f6 0646     		mov	r6, r0
 1868 01f8 49F31000 		sbfx	r0, r9, #0, #17
 1869 01fc C0F58040 		rsb	r0, r0, #16384
 1870 0200 FFF7FEFF 		bl	__aeabi_i2f
 1871 0204 4FF06251 		mov	r1, #947912704
 1872 0208 FFF7FEFF 		bl	__aeabi_fmul
 1873 020c 0146     		mov	r1, r0
 1874 020e 3046     		mov	r0, r6
 1875 0210 FFF7FEFF 		bl	atan2f
 1876 0214 4FF08B41 		mov	r1, #1166016512
 1877 0218 0546     		mov	r5, r0
 1878              	.LVL187:
 1879 021a 5846     		mov	r0, fp
 1880              	.LVL188:
 1881 021c FFF7FEFF 		bl	__aeabi_fmul
 1882 0220 FFF7FEFF 		bl	__aeabi_f2iz
 1883 0224 4FF08B41 		mov	r1, #1166016512
 1884 0228 2061     		str	r0, [r4, #16]
 1885 022a 0AF10040 		add	r0, sl, #-2147483648
 1886 022e FFF7FEFF 		bl	__aeabi_fmul
 1887 0232 FFF7FEFF 		bl	__aeabi_f2iz
 1888 0236 4FF08B41 		mov	r1, #1166016512
 1889 023a 6061     		str	r0, [r4, #20]
 1890 023c 2846     		mov	r0, r5
 1891 023e FFF7FEFF 		bl	__aeabi_fmul
 1892 0242 FFF7FEFF 		bl	__aeabi_f2iz
 1893              	.LBE148:
 1894              	.LBB149:
 444:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1895              		.loc 1 444 0 discriminator 6
 1896 0246 2668     		ldr	r6, [r4, #0]
 1897 0248 211D     		adds	r1, r4, #4
 1898 024a 06FB06FE 		mul	lr, r6, r6
 1899 024e 0EC9     		ldmia	r1, {r1, r2, r3}
 1900              	.LBE149:
 1901              	.LBB150:
 442:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_quat);
 1902              		.loc 1 442 0 discriminator 6
 1903 0250 A061     		str	r0, [r4, #24]
 1904              	.LBE150:
 1905              	.LBB151:
 444:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1906              		.loc 1 444 0 discriminator 6
 1907 0252 01FB06F0 		mul	r0, r1, r6
 1908 0256 02FB06F5 		mul	r5, r2, r6
 1909              	.LVL189:
 1910 025a 03FB01FC 		mul	ip, r3, r1
 1911 025e 01FB01FB 		mul	fp, r1, r1
 1912              	.LVL190:
 1913 0262 4FEAEE3E 		asr	lr, lr, #15
 1914 0266 AEF5804E 		sub	lr, lr, #16384
 1915              	.LVL191:
 1916 026a C013     		asrs	r0, r0, #15
 1917 026c 03FB02F9 		mul	r9, r3, r2
 1918 0270 0590     		str	r0, [sp, #20]
 1919              	.LVL192:
 1920 0272 ED13     		asrs	r5, r5, #15
 1921              	.LVL193:
 1922 0274 0EEBEB30 		add	r0, lr, fp, asr #15
 1923              	.LVL194:
 1924 0278 4FEAEC3C 		asr	ip, ip, #15
 1925 027c 02FB02F8 		mul	r8, r2, r2
 1926              	.LVL195:
 1927 0280 0190     		str	r0, [sp, #4]
 1928 0282 E061     		str	r0, [r4, #28]
 1929 0284 0CEB0500 		add	r0, ip, r5
 1930 0288 0290     		str	r0, [sp, #8]
 1931 028a 6063     		str	r0, [r4, #52]
 1932 028c 0598     		ldr	r0, [sp, #20]
 1933 028e 4FEAE939 		asr	r9, r9, #15
 1934 0292 C0EB0900 		rsb	r0, r0, r9
 1935 0296 0390     		str	r0, [sp, #12]
 1936 0298 A063     		str	r0, [r4, #56]
 1937 029a 0EEBE830 		add	r0, lr, r8, asr #15
 1938 029e 0490     		str	r0, [sp, #16]
 1939 02a0 E062     		str	r0, [r4, #44]
 1940 02a2 0598     		ldr	r0, [sp, #20]
 1941 02a4 C5EB0C0C 		rsb	ip, r5, ip
 1942 02a8 8144     		add	r9, r9, r0
 1943 02aa 03FB03F0 		mul	r0, r3, r3
 1944              	.LBE151:
 1945              	.LBE162:
 1946              	.LBB163:
 1947              	.LBB164:
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1948              		.loc 1 462 0 discriminator 6
 1949 02ae 874D     		ldr	r5, .L58+4
 1950              	.LVL196:
 1951              	.LBE164:
 1952              	.LBE163:
 1953              	.LBB172:
 1954              	.LBB152:
 444:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1955              		.loc 1 444 0 discriminator 6
 1956 02b0 0EEBE03E 		add	lr, lr, r0, asr #15
 1957              	.LVL197:
 1958              	.LBE152:
 1959              	.LBE172:
 1960              	.LBB173:
 1961              	.LBB167:
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1962              		.loc 1 462 0 discriminator 6
 1963 02b4 D5F88800 		ldr	r0, [r5, #136]
 1964              	.LBE167:
 1965              	.LBE173:
 1966              	.LBB174:
 1967              	.LBB153:
 444:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1968              		.loc 1 444 0 discriminator 6
 1969 02b8 03FB06F7 		mul	r7, r3, r6
 1970              	.LVL198:
 1971              	.LBE153:
 1972              	.LBE174:
 1973              	.LBB175:
 1974              	.LBB168:
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1975              		.loc 1 462 0 discriminator 6
 1976 02bc 00FB01F8 		mul	r8, r0, r1
 1977 02c0 D5F88400 		ldr	r0, [r5, #132]
 1978              	.LBE168:
 1979              	.LBE175:
 1980              	.LBB176:
 1981              	.LBB154:
 444:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1982              		.loc 1 444 0 discriminator 6
 1983 02c4 02FB01FA 		mul	sl, r2, r1
 1984              	.LVL199:
 1985              	.LBE154:
 1986              	.LBE176:
 1987              	.LBB177:
 1988              	.LBB169:
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 1989              		.loc 1 462 0 discriminator 6
 1990 02c8 00FB0688 		mla	r8, r0, r6, r8
 1991 02cc D5F88C00 		ldr	r0, [r5, #140]
 1992 02d0 CDF81480 		str	r8, [sp, #20]
 1993 02d4 00FB02F8 		mul	r8, r0, r2
 1994              	.LBE169:
 1995              	.LBE177:
 1996              	.LBB178:
 1997              	.LBB155:
 444:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 1998              		.loc 1 444 0 discriminator 6
 1999 02d8 FF13     		asrs	r7, r7, #15
 2000              	.LVL200:
 2001 02da 4FEAEA3A 		asr	sl, sl, #15
 2002 02de C7EB0A0B 		rsb	fp, r7, sl
 2003 02e2 BA44     		add	sl, sl, r7
 2004              	.LBE155:
 2005              	.LBE178:
 2006              	.LBB179:
 2007              	.LBB170:
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 2008              		.loc 1 462 0 discriminator 6
 2009 02e4 D5F89070 		ldr	r7, [r5, #144]
 2010              	.LVL201:
 2011 02e8 0598     		ldr	r0, [sp, #20]
 2012 02ea 07FB0388 		mla	r8, r7, r3, r8
 2013 02ee 8044     		add	r8, r0, r8
 2014 02f0 4FEAE838 		asr	r8, r8, #15
 2015              	.LBE170:
 2016              	.LBE179:
 2017              	.LBB180:
 2018              	.LBB156:
 444:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_imu_quat);
 2019              		.loc 1 444 0 discriminator 6
 2020 02f4 C4F828B0 		str	fp, [r4, #40]
 2021 02f8 C4F820A0 		str	sl, [r4, #32]
 2022 02fc C4F824C0 		str	ip, [r4, #36]
 2023 0300 C4F83090 		str	r9, [r4, #48]
 2024 0304 C4F83CE0 		str	lr, [r4, #60]
 2025              	.LBE156:
 2026              	.LBE180:
 2027              	.LBB181:
 2028              	.LBB171:
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 2029              		.loc 1 462 0 discriminator 6
 2030 0308 C4F84C80 		str	r8, [r4, #76]
 2031 030c D5F88400 		ldr	r0, [r5, #132]
 2032 0310 7642     		negs	r6, r6
 2033 0312 00FB01F8 		mul	r8, r0, r1
 2034 0316 D5F88800 		ldr	r0, [r5, #136]
 2035 031a 00FB0688 		mla	r8, r0, r6, r8
 2036 031e D5F88C00 		ldr	r0, [r5, #140]
 2037 0322 CDF81480 		str	r8, [sp, #20]
 2038 0326 00FB03F8 		mul	r8, r0, r3
 2039 032a 07FB1288 		mls	r8, r7, r2, r8
 2040 032e 0598     		ldr	r0, [sp, #20]
 2041 0330 8044     		add	r8, r0, r8
 2042 0332 4FEAE838 		asr	r8, r8, #15
 2043 0336 C4F85080 		str	r8, [r4, #80]
 2044 033a 07FB01F8 		mul	r8, r7, r1
 2045 033e D5F88C00 		ldr	r0, [r5, #140]
 2046 0342 00FB0688 		mla	r8, r0, r6, r8
 2047 0346 D5F88400 		ldr	r0, [r5, #132]
 2048 034a 7E43     		muls	r6, r7, r6
 2049 034c 00FB0288 		mla	r8, r0, r2, r8
 2050 0350 D5F88800 		ldr	r0, [r5, #136]
 2051 0354 00FB1388 		mls	r8, r0, r3, r8
 2052 0358 D5F88C00 		ldr	r0, [r5, #140]
 2053 035c 4FEAE838 		asr	r8, r8, #15
 2054 0360 00FB1166 		mls	r6, r0, r1, r6
 2055 0364 D5F88810 		ldr	r1, [r5, #136]
 2056 0368 D5F88400 		ldr	r0, [r5, #132]
 2057 036c 4A43     		muls	r2, r1, r2
 2058 036e 00FB0322 		mla	r2, r0, r3, r2
 464:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_COMP_INV(ahrs.ltp_to_body_rmat, ahrs.ltp_to_imu_rmat, imu.body_to_imu_rmat);
 2059              		.loc 1 464 0 discriminator 6
 2060 0372 D5F8A010 		ldr	r1, [r5, #160]
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 2061              		.loc 1 462 0 discriminator 6
 2062 0376 B618     		adds	r6, r6, r2
 2063 0378 F613     		asrs	r6, r6, #15
 2064 037a A665     		str	r6, [r4, #88]
 464:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_COMP_INV(ahrs.ltp_to_body_rmat, ahrs.ltp_to_imu_rmat, imu.body_to_imu_rmat);
 2065              		.loc 1 464 0 discriminator 6
 2066 037c 0BFB01F6 		mul	r6, fp, r1
 2067 0380 D5F89420 		ldr	r2, [r5, #148]
 2068 0384 0198     		ldr	r0, [sp, #4]
 2069 0386 D5F8AC30 		ldr	r3, [r5, #172]
 2070 038a 00FB0266 		mla	r6, r0, r2, r6
 2071 038e 0298     		ldr	r0, [sp, #8]
 462:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_INV(ahrs.ltp_to_body_quat, ahrs.ltp_to_imu_quat, imu.body_to_imu_quat);
 2072              		.loc 1 462 0 discriminator 6
 2073 0390 C4F85480 		str	r8, [r4, #84]
 464:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_COMP_INV(ahrs.ltp_to_body_rmat, ahrs.ltp_to_imu_rmat, imu.body_to_imu_rmat);
 2074              		.loc 1 464 0 discriminator 6
 2075 0394 00FB0366 		mla	r6, r0, r3, r6
 2076 0398 B613     		asrs	r6, r6, #14
 2077 039a 0596     		str	r6, [sp, #20]
 2078 039c A666     		str	r6, [r4, #104]
 2079 039e 049E     		ldr	r6, [sp, #16]
 2080 03a0 0398     		ldr	r0, [sp, #12]
 2081 03a2 06FB01F7 		mul	r7, r6, r1
 2082 03a6 09FB01F1 		mul	r1, r9, r1
 2083 03aa 0CFB0211 		mla	r1, ip, r2, r1
 2084 03ae 0EFB0311 		mla	r1, lr, r3, r1
 2085 03b2 0AFB0277 		mla	r7, sl, r2, r7
 2086 03b6 4FEAA138 		asr	r8, r1, #14
 2087 03ba D5F8A410 		ldr	r1, [r5, #164]
 2088 03be D5F89820 		ldr	r2, [r5, #152]
 2089 03c2 0BFB01F6 		mul	r6, fp, r1
 2090 03c6 00FB0377 		mla	r7, r0, r3, r7
 2091 03ca 0198     		ldr	r0, [sp, #4]
 2092 03cc D5F8B030 		ldr	r3, [r5, #176]
 2093 03d0 00FB0266 		mla	r6, r0, r2, r6
 2094 03d4 0298     		ldr	r0, [sp, #8]
 2095 03d6 BF13     		asrs	r7, r7, #14
 2096 03d8 00FB0366 		mla	r6, r0, r3, r6
 2097 03dc B013     		asrs	r0, r6, #14
 2098 03de 6067     		str	r0, [r4, #116]
 2099 03e0 0498     		ldr	r0, [sp, #16]
 2100 03e2 E766     		str	r7, [r4, #108]
 2101 03e4 00FB01F6 		mul	r6, r0, r1
 2102 03e8 09FB01F1 		mul	r1, r9, r1
 2103 03ec 0AFB0266 		mla	r6, sl, r2, r6
 2104 03f0 0CFB0211 		mla	r1, ip, r2, r1
 2105 03f4 0398     		ldr	r0, [sp, #12]
 2106 03f6 0EFB0311 		mla	r1, lr, r3, r1
 2107 03fa 00FB0366 		mla	r6, r0, r3, r6
 2108 03fe B013     		asrs	r0, r6, #14
 2109 0400 C4F87080 		str	r8, [r4, #112]
 2110 0404 A067     		str	r0, [r4, #120]
 2111 0406 8813     		asrs	r0, r1, #14
 2112 0408 D5F8A810 		ldr	r1, [r5, #168]
 2113 040c D5F89C20 		ldr	r2, [r5, #156]
 2114 0410 0BFB01FB 		mul	fp, fp, r1
 2115 0414 019E     		ldr	r6, [sp, #4]
 2116 0416 D5F8B430 		ldr	r3, [r5, #180]
 2117 041a 06FB02BB 		mla	fp, r6, r2, fp
 2118 041e 029E     		ldr	r6, [sp, #8]
 2119 0420 09FB01F9 		mul	r9, r9, r1
 2120 0424 06FB03BB 		mla	fp, r6, r3, fp
 2121 0428 049E     		ldr	r6, [sp, #16]
 2122 042a 4FEAAB3B 		asr	fp, fp, #14
 2123 042e C4F880B0 		str	fp, [r4, #128]
 2124 0432 06FB01FB 		mul	fp, r6, r1
 2125 0436 0CFB029C 		mla	ip, ip, r2, r9
 2126 043a 0AFB02BA 		mla	sl, sl, r2, fp
 2127 043e 039E     		ldr	r6, [sp, #12]
 2128 0440 0EFB03CE 		mla	lr, lr, r3, ip
 2129 0444 06FB03AA 		mla	sl, r6, r3, sl
 2130 0448 4FEAAE39 		asr	r9, lr, #14
 2131 044c 4FEAAA3A 		asr	sl, sl, #14
 2132 0450 C4F884A0 		str	sl, [r4, #132]
 2133 0454 C4F88890 		str	r9, [r4, #136]
 2134              	.LVL202:
 2135 0458 E067     		str	r0, [r4, #124]
 2136              	.LBB165:
 466:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_RMAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_rmat);
 2137              		.loc 1 466 0 discriminator 6
 2138 045a FFF7FEFF 		bl	__aeabi_i2f
 2139              	.LVL203:
 2140 045e 4FF06251 		mov	r1, #947912704
 2141 0462 FFF7FEFF 		bl	__aeabi_fmul
 2142 0466 8246     		mov	sl, r0
 2143 0468 4846     		mov	r0, r9
 2144 046a FFF7FEFF 		bl	__aeabi_i2f
 2145 046e 4FF06251 		mov	r1, #947912704
 2146 0472 FFF7FEFF 		bl	__aeabi_fmul
 2147 0476 0146     		mov	r1, r0
 2148 0478 5046     		mov	r0, sl
 2149 047a FFF7FEFF 		bl	atan2f
 2150 047e 8146     		mov	r9, r0
 2151              	.LVL204:
 2152 0480 4046     		mov	r0, r8
 2153              	.LVL205:
 2154 0482 FFF7FEFF 		bl	__aeabi_i2f
 2155 0486 4FF06251 		mov	r1, #947912704
 2156 048a FFF7FEFF 		bl	__aeabi_fmul
 2157 048e FFF7FEFF 		bl	asinf
 2158 0492 8046     		mov	r8, r0
 2159              	.LVL206:
 2160 0494 3846     		mov	r0, r7
 2161              	.LVL207:
 2162 0496 FFF7FEFF 		bl	__aeabi_i2f
 2163 049a 4FF06251 		mov	r1, #947912704
 2164 049e FFF7FEFF 		bl	__aeabi_fmul
 2165 04a2 0746     		mov	r7, r0
 2166              	.LVL208:
 2167 04a4 0598     		ldr	r0, [sp, #20]
 2168 04a6 FFF7FEFF 		bl	__aeabi_i2f
 2169 04aa 4FF06251 		mov	r1, #947912704
 2170 04ae FFF7FEFF 		bl	__aeabi_fmul
 2171 04b2 0146     		mov	r1, r0
 2172 04b4 3846     		mov	r0, r7
 2173 04b6 FFF7FEFF 		bl	atan2f
 2174 04ba 4FF08B41 		mov	r1, #1166016512
 2175 04be 0646     		mov	r6, r0
 2176              	.LVL209:
 2177 04c0 4846     		mov	r0, r9
 2178              	.LVL210:
 2179 04c2 FFF7FEFF 		bl	__aeabi_fmul
 2180 04c6 03E0     		b	.L59
 2181              	.L60:
 2182              		.align	2
 2183              	.L58:
 2184 04c8 00000000 		.word	ahrs
 2185 04cc 00000000 		.word	imu
 2186              	.L59:
 2187 04d0 FFF7FEFF 		bl	__aeabi_f2iz
 2188 04d4 4FF08B41 		mov	r1, #1166016512
 2189 04d8 E065     		str	r0, [r4, #92]
 2190 04da 08F10040 		add	r0, r8, #-2147483648
 2191 04de FFF7FEFF 		bl	__aeabi_fmul
 2192 04e2 FFF7FEFF 		bl	__aeabi_f2iz
 2193 04e6 4FF08B41 		mov	r1, #1166016512
 2194 04ea 2066     		str	r0, [r4, #96]
 2195 04ec 3046     		mov	r0, r6
 2196 04ee FFF7FEFF 		bl	__aeabi_fmul
 2197 04f2 FFF7FEFF 		bl	__aeabi_f2iz
 2198              	.LBE165:
 2199              		.loc 1 468 0 discriminator 6
 2200 04f6 616C     		ldr	r1, [r4, #68]
 2201              	.LBB166:
 466:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_RMAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_rmat);
 2202              		.loc 1 466 0 discriminator 6
 2203 04f8 6066     		str	r0, [r4, #100]
 2204              	.LBE166:
 2205              		.loc 1 468 0 discriminator 6
 2206 04fa D5F8A000 		ldr	r0, [r5, #160]
 2207 04fe 226C     		ldr	r2, [r4, #64]
 2208 0500 4843     		muls	r0, r1, r0
 2209 0502 D5F89460 		ldr	r6, [r5, #148]
 2210              	.LVL211:
 2211 0506 A36C     		ldr	r3, [r4, #72]
 2212 0508 06FB0200 		mla	r0, r6, r2, r0
 2213 050c D5F8AC60 		ldr	r6, [r5, #172]
 2214 0510 06FB0300 		mla	r0, r6, r3, r0
 2215 0514 8013     		asrs	r0, r0, #14
 2216 0516 C4F88C00 		str	r0, [r4, #140]
 2217 051a D5F8A400 		ldr	r0, [r5, #164]
 2218 051e D5F89860 		ldr	r6, [r5, #152]
 2219 0522 4843     		muls	r0, r1, r0
 2220 0524 06FB0200 		mla	r0, r6, r2, r0
 2221 0528 D5F8B060 		ldr	r6, [r5, #176]
 2222 052c 06FB0300 		mla	r0, r6, r3, r0
 2223 0530 D5F8A860 		ldr	r6, [r5, #168]
 2224 0534 8013     		asrs	r0, r0, #14
 2225 0536 7143     		muls	r1, r6, r1
 2226 0538 C4F89000 		str	r0, [r4, #144]
 2227 053c D5F89C00 		ldr	r0, [r5, #156]
 2228 0540 00FB0212 		mla	r2, r0, r2, r1
 2229 0544 D5F8B410 		ldr	r1, [r5, #180]
 2230 0548 01FB0323 		mla	r3, r1, r3, r2
 2231 054c 9B13     		asrs	r3, r3, #14
 2232 054e C4F89430 		str	r3, [r4, #148]
 2233              	.LBE171:
 2234              	.LBE181:
 156:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 2235              		.loc 1 156 0 discriminator 6
 2236 0552 09B0     		add	sp, sp, #36
 2237 0554 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2238              		.cfi_endproc
 2239              	.LFE12:
 2241              		.global	__aeabi_i2d
 2242              		.global	__aeabi_d2iz
 2243              		.section	.text.ahrs_update_accel,"ax",%progbits
 2244              		.align	1
 2245              		.global	ahrs_update_accel
 2246              		.thumb
 2247              		.thumb_func
 2249              	ahrs_update_accel:
 2250              	.LFB13:
 161:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_accel(void) {
 2251              		.loc 1 161 0
 2252              		.cfi_startproc
 2253              		@ args = 0, pretend = 0, frame = 0
 2254              		@ frame_needed = 0, uses_anonymous_args = 0
 2255 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, sl, lr}
 2256              	.LCFI5:
 2257              		.cfi_def_cfa_offset 32
 2258              		.cfi_offset 14, -4
 2259              		.cfi_offset 10, -8
 2260              		.cfi_offset 9, -12
 2261              		.cfi_offset 8, -16
 2262              		.cfi_offset 7, -20
 2263              		.cfi_offset 6, -24
 2264              		.cfi_offset 5, -28
 2265              		.cfi_offset 4, -32
 169:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.correct_gravity && ahrs_impl.ltp_vel_norm_valid) {
 2266              		.loc 1 169 0
 2267 0004 7648     		ldr	r0, .L79+8
 164:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 c2 = { RMAT_ELMT(ahrs.ltp_to_imu_rmat, 0,2),
 2268              		.loc 1 164 0
 2269 0006 774B     		ldr	r3, .L79+12
 169:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.correct_gravity && ahrs_impl.ltp_vel_norm_valid) {
 2270              		.loc 1 169 0
 2271 0008 90F84550 		ldrb	r5, [r0, #69]	@ zero_extendqisi2
 164:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   struct Int32Vect3 c2 = { RMAT_ELMT(ahrs.ltp_to_imu_rmat, 0,2),
 2272              		.loc 1 164 0
 2273 000c 5A6A     		ldr	r2, [r3, #36]
 2274              	.LVL212:
 165:subsystems/ahrs/ahrs_int_cmpl_quat.c ****                            RMAT_ELMT(ahrs.ltp_to_imu_rmat, 1,2),
 2275              		.loc 1 165 0
 2276 000e 196B     		ldr	r1, [r3, #48]
 2277              	.LVL213:
 166:subsystems/ahrs/ahrs_int_cmpl_quat.c ****                            RMAT_ELMT(ahrs.ltp_to_imu_rmat, 2,2)};
 2278              		.loc 1 166 0
 2279 0010 DC6B     		ldr	r4, [r3, #60]
 2280              	.LVL214:
 169:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.correct_gravity && ahrs_impl.ltp_vel_norm_valid) {
 2281              		.loc 1 169 0
 2282 0012 D5B3     		cbz	r5, .L62
 169:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.correct_gravity && ahrs_impl.ltp_vel_norm_valid) {
 2283              		.loc 1 169 0 is_stmt 0 discriminator 1
 2284 0014 90F84450 		ldrb	r5, [r0, #68]	@ zero_extendqisi2
 2285 0018 BDB3     		cbz	r5, .L62
 2286              	.LBB182:
 179:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const struct Int32Vect3 vel_tangential_body = {(ahrs_impl.ltp_vel_norm>>INT32_ACCEL_FRAC), 0.0,
 2287              		.loc 1 179 0 is_stmt 1 discriminator 1
 2288 001a 006C     		ldr	r0, [r0, #64]
 181:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_RATES_CROSS_VECT3(acc_c_body, ahrs.body_rate, vel_tangential_body);
 2289              		.loc 1 181 0 discriminator 1
 2290 001c D3F89060 		ldr	r6, [r3, #144]
 179:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const struct Int32Vect3 vel_tangential_body = {(ahrs_impl.ltp_vel_norm>>INT32_ACCEL_FRAC), 0.0,
 2291              		.loc 1 179 0 discriminator 1
 2292 0020 8012     		asrs	r0, r0, #10
 2293              	.LVL215:
 181:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_RATES_CROSS_VECT3(acc_c_body, ahrs.body_rate, vel_tangential_body);
 2294              		.loc 1 181 0 discriminator 1
 2295 0022 4643     		muls	r6, r0, r6
 2296 0024 D3F89450 		ldr	r5, [r3, #148]
 190:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(corrected_gravity, imu.accel, acc_c_imu);
 2297              		.loc 1 190 0 discriminator 1
 2298 0028 6F4B     		ldr	r3, .L79+16
 2299              	.LVL216:
 181:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_RATES_CROSS_VECT3(acc_c_body, ahrs.body_rate, vel_tangential_body);
 2300              		.loc 1 181 0 discriminator 1
 2301 002a 7642     		negs	r6, r6
 186:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 2302              		.loc 1 186 0 discriminator 1
 2303 002c D3F89C70 		ldr	r7, [r3, #156]
 182:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_RSHIFT(acc_c_body, acc_c_body, INT32_SPEED_FRAC+INT32_RATE_FRAC-INT32_ACCEL_FRAC-IN
 2304              		.loc 1 182 0 discriminator 1
 2305 0030 F612     		asrs	r6, r6, #11
 181:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     VECT3_RATES_CROSS_VECT3(acc_c_body, ahrs.body_rate, vel_tangential_body);
 2306              		.loc 1 181 0 discriminator 1
 2307 0032 4543     		muls	r5, r0, r5
 186:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 2308              		.loc 1 186 0 discriminator 1
 2309 0034 07FB06F8 		mul	r8, r7, r6
 2310 0038 D3F89800 		ldr	r0, [r3, #152]
 2311              	.LVL217:
 182:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_RSHIFT(acc_c_body, acc_c_body, INT32_SPEED_FRAC+INT32_RATE_FRAC-INT32_ACCEL_FRAC-IN
 2312              		.loc 1 182 0 discriminator 1
 2313 003c ED12     		asrs	r5, r5, #11
 2314              	.LVL218:
 186:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 2315              		.loc 1 186 0 discriminator 1
 2316 003e 00FB0588 		mla	r8, r0, r5, r8
 2317 0042 D3F8A870 		ldr	r7, [r3, #168]
 190:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(corrected_gravity, imu.accel, acc_c_imu);
 2318              		.loc 1 190 0 discriminator 1
 2319 0046 D868     		ldr	r0, [r3, #12]
 186:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 2320              		.loc 1 186 0 discriminator 1
 2321 0048 07FB06FC 		mul	ip, r7, r6
 190:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(corrected_gravity, imu.accel, acc_c_imu);
 2322              		.loc 1 190 0 discriminator 1
 2323 004c A0EBA838 		sub	r8, r0, r8, asr #14
 2324              	.LVL219:
 186:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 2325              		.loc 1 186 0 discriminator 1
 2326 0050 D3F8A400 		ldr	r0, [r3, #164]
 2327 0054 D3F8B070 		ldr	r7, [r3, #176]
 2328 0058 00FB05CC 		mla	ip, r0, r5, ip
 190:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(corrected_gravity, imu.accel, acc_c_imu);
 2329              		.loc 1 190 0 discriminator 1
 2330 005c 1869     		ldr	r0, [r3, #16]
 193:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_CROSS_PRODUCT(residual, corrected_gravity, c2);
 2331              		.loc 1 193 0 discriminator 1
 2332 005e 01FB08FA 		mul	sl, r1, r8
 190:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(corrected_gravity, imu.accel, acc_c_imu);
 2333              		.loc 1 190 0 discriminator 1
 2334 0062 A0EBAC3C 		sub	ip, r0, ip, asr #14
 2335              	.LVL220:
 186:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 2336              		.loc 1 186 0 discriminator 1
 2337 0066 D3F8B400 		ldr	r0, [r3, #180]
 193:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_CROSS_PRODUCT(residual, corrected_gravity, c2);
 2338              		.loc 1 193 0 discriminator 1
 2339 006a 02FB1CAA 		mls	sl, r2, ip, sl
 186:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_RMAT_VMULT(acc_c_imu, imu.body_to_imu_rmat, acc_c_body);
 2340              		.loc 1 186 0 discriminator 1
 2341 006e 4643     		muls	r6, r0, r6
 2342              	.LVL221:
 2343 0070 07FB0565 		mla	r5, r7, r5, r6
 2344              	.LVL222:
 193:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_CROSS_PRODUCT(residual, corrected_gravity, c2);
 2345              		.loc 1 193 0 discriminator 1
 2346 0074 04FB0CF6 		mul	r6, r4, ip
 190:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_DIFF(corrected_gravity, imu.accel, acc_c_imu);
 2347              		.loc 1 190 0 discriminator 1
 2348 0078 5F69     		ldr	r7, [r3, #20]
 2349 007a A7EBA535 		sub	r5, r7, r5, asr #14
 2350              	.LVL223:
 193:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_CROSS_PRODUCT(residual, corrected_gravity, c2);
 2351              		.loc 1 193 0 discriminator 1
 2352 007e 01FB1566 		mls	r6, r1, r5, r6
 2353              	.LVL224:
 2354 0082 5543     		muls	r5, r2, r5
 2355              	.LVL225:
 2356 0084 04FB1857 		mls	r7, r4, r8, r5
 2357              	.LVL226:
 2358              	.LBE182:
 169:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.correct_gravity && ahrs_impl.ltp_vel_norm_valid) {
 2359              		.loc 1 169 0 discriminator 1
 2360 0088 0DE0     		b	.L63
 2361              	.LVL227:
 2362              	.L62:
 195:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_CROSS_PRODUCT(residual, imu.accel, c2);
 2363              		.loc 1 195 0
 2364 008a 574B     		ldr	r3, .L79+16
 2365              	.LVL228:
 2366 008c 1D69     		ldr	r5, [r3, #16]
 2367 008e 5F69     		ldr	r7, [r3, #20]
 2368 0090 04FB05F6 		mul	r6, r4, r5
 2369 0094 01FB1766 		mls	r6, r1, r7, r6
 2370              	.LVL229:
 2371 0098 5743     		muls	r7, r2, r7
 2372 009a D868     		ldr	r0, [r3, #12]
 2373 009c 04FB1077 		mls	r7, r4, r0, r7
 2374              	.LVL230:
 2375 00a0 4843     		muls	r0, r1, r0
 2376 00a2 02FB150A 		mls	sl, r2, r5, r0
 2377              	.LVL231:
 2378              	.L63:
 200:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ahrs_impl.use_gravity_heuristic) {
 2379              		.loc 1 200 0
 2380 00a6 4E4B     		ldr	r3, .L79+8
 2381 00a8 93F84630 		ldrb	r3, [r3, #70]	@ zero_extendqisi2
 2382 00ac 002B     		cmp	r3, #0
 2383 00ae 4ED0     		beq	.L74
 2384              	.LBB183:
 2385              	.LBB184:
 203:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, imu.accel);
 2386              		.loc 1 203 0
 2387 00b0 4D4A     		ldr	r2, .L79+16
 2388 00b2 1169     		ldr	r1, [r2, #16]
 2389 00b4 D368     		ldr	r3, [r2, #12]
 2390 00b6 4943     		muls	r1, r1, r1
 2391 00b8 03FB0313 		mla	r3, r3, r3, r1
 2392 00bc 5269     		ldr	r2, [r2, #20]
 2393 00be 02FB0233 		mla	r3, r2, r2, r3
 2394              	.LVL232:
 2395 00c2 7BB1     		cbz	r3, .L72
 2396              	.LVL233:
 2397              	.LBB185:
 203:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, imu.accel);
 2398              		.loc 1 203 0 is_stmt 0 discriminator 2
 2399 00c4 1A46     		mov	r2, r3
 2400 00c6 2821     		movs	r1, #40
 2401 00c8 00E0     		b	.L67
 2402              	.LVL234:
 2403              	.L73:
 203:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, imu.accel);
 2404              		.loc 1 203 0
 2405 00ca 0246     		mov	r2, r0
 2406              	.LVL235:
 2407              	.L67:
 203:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, imu.accel);
 2408              		.loc 1 203 0 discriminator 3
 2409 00cc B3FBF2F0 		udiv	r0, r3, r2
 2410              	.LVL236:
 2411 00d0 8018     		adds	r0, r0, r2
 2412              	.LVL237:
 2413 00d2 4008     		lsrs	r0, r0, #1
 2414              	.LVL238:
 2415 00d4 121A     		subs	r2, r2, r0
 2416              	.LVL239:
 2417 00d6 012A     		cmp	r2, #1
 2418 00d8 05D9     		bls	.L65
 203:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, imu.accel);
 2419              		.loc 1 203 0 discriminator 4
 2420 00da 0139     		subs	r1, r1, #1
 2421 00dc C9B2     		uxtb	r1, r1
 2422 00de 0029     		cmp	r1, #0
 2423 00e0 F3D1     		bne	.L73
 2424 00e2 00E0     		b	.L65
 2425              	.LVL240:
 2426              	.L72:
 2427              	.LBE185:
 203:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT32_VECT3_NORM(acc_norm, imu.accel);
 2428              		.loc 1 203 0
 2429 00e4 1846     		mov	r0, r3
 2430              	.L65:
 2431              	.LVL241:
 2432              	.LBE184:
 204:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const int32_t acc_norm_d = ABS(ACCEL_BFP_OF_REAL(9.81)-acc_norm);
 2433              		.loc 1 204 0 is_stmt 1
 2434 00e6 FFF7FEFF 		bl	__aeabi_i2d
 2435              	.LVL242:
 2436 00ea 0246     		mov	r2, r0
 2437 00ec 0B46     		mov	r3, r1
 2438 00ee 3AA1     		adr	r1, .L79
 2439 00f0 D1E90001 		ldrd	r0, [r1]
 2440 00f4 FFF7FEFF 		bl	__aeabi_dsub
 2441 00f8 0022     		movs	r2, #0
 2442 00fa 0023     		movs	r3, #0
 2443 00fc 0446     		mov	r4, r0
 2444              	.LVL243:
 2445 00fe 0D46     		mov	r5, r1
 2446 0100 FFF7FEFF 		bl	__aeabi_dcmplt
 2447 0104 18B1     		cbz	r0, .L77
 204:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const int32_t acc_norm_d = ABS(ACCEL_BFP_OF_REAL(9.81)-acc_norm);
 2448              		.loc 1 204 0 is_stmt 0 discriminator 1
 2449 0106 2046     		mov	r0, r4
 2450 0108 05F10041 		add	r1, r5, #-2147483648
 2451 010c 01E0     		b	.L78
 2452              	.L77:
 204:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     const int32_t acc_norm_d = ABS(ACCEL_BFP_OF_REAL(9.81)-acc_norm);
 2453              		.loc 1 204 0 discriminator 2
 2454 010e 2046     		mov	r0, r4
 2455 0110 2946     		mov	r1, r5
 2456              	.L78:
 2457 0112 FFF7FEFF 		bl	__aeabi_d2iz
 2458              	.LVL244:
 205:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     inv_weight = Chop(6*acc_norm_d/ACCEL_BFP_OF_REAL(9.81), 1, 6);
 2459              		.loc 1 205 0 is_stmt 1 discriminator 2
 2460 0116 0624     		movs	r4, #6
 2461 0118 6043     		muls	r0, r4, r0
 2462              	.LVL245:
 2463 011a FFF7FEFF 		bl	__aeabi_i2d
 2464 011e 2EA3     		adr	r3, .L79
 2465 0120 D3E90023 		ldrd	r2, [r3]
 2466 0124 FFF7FEFF 		bl	__aeabi_ddiv
 2467 0128 0022     		movs	r2, #0
 2468 012a 304B     		ldr	r3, .L79+20
 2469 012c 8046     		mov	r8, r0
 2470 012e 8946     		mov	r9, r1
 2471 0130 FFF7FEFF 		bl	__aeabi_dcmplt
 2472 0134 58B9     		cbnz	r0, .L74
 2473 0136 4046     		mov	r0, r8
 2474 0138 4946     		mov	r1, r9
 2475 013a 0022     		movs	r2, #0
 2476 013c 2C4B     		ldr	r3, .L79+24
 2477 013e FFF7FEFF 		bl	__aeabi_dcmpgt
 2478 0142 30B9     		cbnz	r0, .L75
 205:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     inv_weight = Chop(6*acc_norm_d/ACCEL_BFP_OF_REAL(9.81), 1, 6);
 2479              		.loc 1 205 0 is_stmt 0 discriminator 4
 2480 0144 4046     		mov	r0, r8
 2481 0146 4946     		mov	r1, r9
 2482 0148 FFF7FEFF 		bl	__aeabi_d2iz
 2483 014c 02E0     		b	.L64
 2484              	.L74:
 205:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     inv_weight = Chop(6*acc_norm_d/ACCEL_BFP_OF_REAL(9.81), 1, 6);
 2485              		.loc 1 205 0
 2486 014e 0120     		movs	r0, #1
 2487 0150 00E0     		b	.L64
 2488              	.L75:
 2489 0152 2046     		mov	r0, r4
 2490              	.L64:
 2491              	.LVL246:
 2492              	.LBE183:
 214:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += -residual.x/82000/inv_weight;
 2493              		.loc 1 214 0 is_stmt 1
 2494 0154 2249     		ldr	r1, .L79+8
 2495 0156 274B     		ldr	r3, .L79+28
 2496 0158 CC68     		ldr	r4, [r1, #12]
 2497 015a 96FBF3F2 		sdiv	r2, r6, r3
 2498 015e 92FBF0F2 		sdiv	r2, r2, r0
 2499 0162 A218     		adds	r2, r4, r2
 2500 0164 CA60     		str	r2, [r1, #12]
 215:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += -residual.y/82000/inv_weight;
 2501              		.loc 1 215 0
 2502 0166 0C69     		ldr	r4, [r1, #16]
 2503 0168 97FBF3F2 		sdiv	r2, r7, r3
 2504 016c 92FBF0F2 		sdiv	r2, r2, r0
 2505 0170 A218     		adds	r2, r4, r2
 2506 0172 0A61     		str	r2, [r1, #16]
 216:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += -residual.z/82000/inv_weight;
 2507              		.loc 1 216 0
 2508 0174 9AFBF3F3 		sdiv	r3, sl, r3
 2509 0178 4A69     		ldr	r2, [r1, #20]
 2510 017a 93FBF0F3 		sdiv	r3, r3, r0
 226:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p += residual.x/inv_weight;
 2511              		.loc 1 226 0
 2512 017e 96FBF0F6 		sdiv	r6, r6, r0
 2513              	.LVL247:
 216:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += -residual.z/82000/inv_weight;
 2514              		.loc 1 216 0
 2515 0182 D318     		adds	r3, r2, r3
 227:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q += residual.y/inv_weight;
 2516              		.loc 1 227 0
 2517 0184 97FBF0F7 		sdiv	r7, r7, r0
 2518              	.LVL248:
 216:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += -residual.z/82000/inv_weight;
 2519              		.loc 1 216 0
 2520 0188 4B61     		str	r3, [r1, #20]
 226:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p += residual.x/inv_weight;
 2521              		.loc 1 226 0
 2522 018a D1E90A23 		ldrd	r2, [r1, #40]
 2523 018e 12EB0608 		adds	r8, r2, r6
 2524 0192 43EBE679 		adc	r9, r3, r6, asr #31
 228:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r += residual.z/inv_weight;
 2525              		.loc 1 228 0
 2526 0196 9AFBF0F0 		sdiv	r0, sl, r0
 2527              	.LVL249:
 227:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q += residual.y/inv_weight;
 2528              		.loc 1 227 0
 2529 019a D1E90C23 		ldrd	r2, [r1, #48]
 2530 019e D419     		adds	r4, r2, r7
 2531 01a0 43EBE775 		adc	r5, r3, r7, asr #31
 228:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r += residual.z/inv_weight;
 2532              		.loc 1 228 0
 2533 01a4 D1E90E23 		ldrd	r2, [r1, #56]
 2534 01a8 1218     		adds	r2, r2, r0
 2535 01aa 43EBE073 		adc	r3, r3, r0, asr #31
 232:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2536              		.loc 1 232 0
 2537 01ae 4FEA1870 		lsr	r0, r8, #28
 2538 01b2 40EA0910 		orr	r0, r0, r9, lsl #4
 228:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r += residual.z/inv_weight;
 2539              		.loc 1 228 0
 2540 01b6 C1E90E23 		strd	r2, [r1, #56]
 232:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2541              		.loc 1 232 0
 2542 01ba 0860     		str	r0, [r1, #0]
 2543 01bc 120F     		lsrs	r2, r2, #28
 2544 01be 200F     		lsrs	r0, r4, #28
 2545 01c0 40EA0510 		orr	r0, r0, r5, lsl #4
 2546 01c4 42EA0312 		orr	r2, r2, r3, lsl #4
 226:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p += residual.x/inv_weight;
 2547              		.loc 1 226 0
 2548 01c8 C1E90A89 		strd	r8, [r1, #40]
 227:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q += residual.y/inv_weight;
 2549              		.loc 1 227 0
 2550 01cc C1E90C45 		strd	r4, [r1, #48]
 232:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2551              		.loc 1 232 0
 2552 01d0 4860     		str	r0, [r1, #4]
 2553 01d2 8A60     		str	r2, [r1, #8]
 234:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 2554              		.loc 1 234 0
 2555 01d4 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 2556              	.L80:
 2557              		.align	3
 2558              	.L79:
 2559 01d8 1F85EB51 		.word	1374389535
 2560 01dc B89EC340 		.word	1086561976
 2561 01e0 00000000 		.word	.LANCHOR0
 2562 01e4 00000000 		.word	ahrs
 2563 01e8 00000000 		.word	imu
 2564 01ec 0000F03F 		.word	1072693248
 2565 01f0 00001840 		.word	1075314688
 2566 01f4 B0BFFEFF 		.word	-82000
 2567              		.cfi_endproc
 2568              	.LFE13:
 2570              		.section	.text.ahrs_update_mag,"ax",%progbits
 2571              		.align	1
 2572              		.global	ahrs_update_mag
 2573              		.thumb
 2574              		.thumb_func
 2576              	ahrs_update_mag:
 2577              	.LFB14:
 236:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_mag(void) {
 2578              		.loc 1 236 0
 2579              		.cfi_startproc
 2580              		@ args = 0, pretend = 0, frame = 0
 2581              		@ frame_needed = 0, uses_anonymous_args = 0
 2582              	.LBB186:
 2583              	.LBB187:
 276:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ahrs.ltp_to_imu_rmat, imu.mag);
 2584              		.loc 1 276 0
 2585 0000 314B     		ldr	r3, .L82
 2586              	.LBE187:
 2587              	.LBE186:
 236:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_mag(void) {
 2588              		.loc 1 236 0
 2589 0002 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2590              	.LCFI6:
 2591              		.cfi_def_cfa_offset 28
 2592              		.cfi_offset 14, -4
 2593              		.cfi_offset 9, -8
 2594              		.cfi_offset 8, -12
 2595              		.cfi_offset 7, -16
 2596              		.cfi_offset 6, -20
 2597              		.cfi_offset 5, -24
 2598              		.cfi_offset 4, -28
 2599              	.LBB189:
 2600              	.LBB188:
 276:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ahrs.ltp_to_imu_rmat, imu.mag);
 2601              		.loc 1 276 0
 2602 0006 9969     		ldr	r1, [r3, #24]
 2603 0008 DC69     		ldr	r4, [r3, #28]
 2604 000a 1A6A     		ldr	r2, [r3, #32]
 2605              	.LVL250:
 2606 000c 2F4B     		ldr	r3, .L82+4
 2607              	.LVL251:
 2608 000e 986A     		ldr	r0, [r3, #40]
 2609 0010 DD69     		ldr	r5, [r3, #28]
 2610 0012 6043     		muls	r0, r4, r0
 2611 0014 05FB0100 		mla	r0, r5, r1, r0
 2612 0018 5D6B     		ldr	r5, [r3, #52]
 2613 001a DE6A     		ldr	r6, [r3, #44]
 2614 001c 05FB0200 		mla	r0, r5, r2, r0
 2615 0020 7443     		muls	r4, r6, r4
 281:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (measured_ltp.x * expected_ltp.y - measured_ltp.y * expected_ltp.x)/(1<<5)};
 2616              		.loc 1 281 0
 2617 0022 2725     		movs	r5, #39
 276:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ahrs.ltp_to_imu_rmat, imu.mag);
 2618              		.loc 1 276 0
 2619 0024 8013     		asrs	r0, r0, #14
 281:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (measured_ltp.x * expected_ltp.y - measured_ltp.y * expected_ltp.x)/(1<<5)};
 2620              		.loc 1 281 0
 2621 0026 6843     		muls	r0, r5, r0
 276:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ahrs.ltp_to_imu_rmat, imu.mag);
 2622              		.loc 1 276 0
 2623 0028 1D6A     		ldr	r5, [r3, #32]
 2624 002a 05FB0141 		mla	r1, r5, r1, r4
 2625 002e 9C6B     		ldr	r4, [r3, #56]
 2626 0030 04FB0212 		mla	r2, r4, r2, r1
 281:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (measured_ltp.x * expected_ltp.y - measured_ltp.y * expected_ltp.x)/(1<<5)};
 2627              		.loc 1 281 0
 2628 0034 4FF44171 		mov	r1, #772
 276:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_TRANSP_VMULT(measured_ltp, ahrs.ltp_to_imu_rmat, imu.mag);
 2629              		.loc 1 276 0
 2630 0038 9213     		asrs	r2, r2, #14
 281:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (measured_ltp.x * expected_ltp.y - measured_ltp.y * expected_ltp.x)/(1<<5)};
 2631              		.loc 1 281 0
 2632 003a 01FB1200 		mls	r0, r1, r2, r0
 2633 003e 2024     		movs	r4, #32
 284:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2634              		.loc 1 284 0
 2635 0040 5A6A     		ldr	r2, [r3, #36]
 281:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (measured_ltp.x * expected_ltp.y - measured_ltp.y * expected_ltp.x)/(1<<5)};
 2636              		.loc 1 281 0
 2637 0042 90FBF4F0 		sdiv	r0, r0, r4
 2638              	.LVL252:
 284:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2639              		.loc 1 284 0
 2640 0046 4243     		muls	r2, r0, r2
 2641 0048 1C6B     		ldr	r4, [r3, #48]
 294:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/16;
 2642              		.loc 1 294 0
 2643 004a 2149     		ldr	r1, .L82+8
 284:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2644              		.loc 1 284 0
 2645 004c 4443     		muls	r4, r0, r4
 307:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p -= residual_imu.x*1024;
 2646              		.loc 1 307 0
 2647 004e D1E90A89 		ldrd	r8, [r1, #40]
 284:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2648              		.loc 1 284 0
 2649 0052 DB6B     		ldr	r3, [r3, #60]
 294:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/16;
 2650              		.loc 1 294 0
 2651 0054 CE68     		ldr	r6, [r1, #12]
 284:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2652              		.loc 1 284 0
 2653 0056 9213     		asrs	r2, r2, #14
 2654              	.LVL253:
 2655 0058 5843     		muls	r0, r3, r0
 2656              	.LVL254:
 294:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/16;
 2657              		.loc 1 294 0
 2658 005a 1023     		movs	r3, #16
 2659 005c 92FBF3F5 		sdiv	r5, r2, r3
 2660 0060 7519     		adds	r5, r6, r5
 284:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2661              		.loc 1 284 0
 2662 0062 A413     		asrs	r4, r4, #14
 2663              	.LVL255:
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/16;
 2664              		.loc 1 295 0
 2665 0064 0E69     		ldr	r6, [r1, #16]
 294:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/16;
 2666              		.loc 1 294 0
 2667 0066 CD60     		str	r5, [r1, #12]
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/16;
 2668              		.loc 1 295 0
 2669 0068 94FBF3F5 		sdiv	r5, r4, r3
 2670 006c 7519     		adds	r5, r6, r5
 284:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2671              		.loc 1 284 0
 2672 006e 8013     		asrs	r0, r0, #14
 2673              	.LVL256:
 295:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/16;
 2674              		.loc 1 295 0
 2675 0070 0D61     		str	r5, [r1, #16]
 296:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/16;
 2676              		.loc 1 296 0
 2677 0072 4D69     		ldr	r5, [r1, #20]
 2678 0074 90FBF3F3 		sdiv	r3, r0, r3
 307:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p -= residual_imu.x*1024;
 2679              		.loc 1 307 0
 2680 0078 9202     		lsls	r2, r2, #10
 2681              	.LVL257:
 2682 007a B8EB0208 		subs	r8, r8, r2
 2683 007e 69EBE279 		sbc	r9, r9, r2, asr #31
 296:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/16;
 2684              		.loc 1 296 0
 2685 0082 EB18     		adds	r3, r5, r3
 309:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r -= residual_imu.z*1024;
 2686              		.loc 1 309 0
 2687 0084 8002     		lsls	r0, r0, #10
 2688              	.LVL258:
 308:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q -= residual_imu.y*1024;
 2689              		.loc 1 308 0
 2690 0086 A402     		lsls	r4, r4, #10
 2691              	.LVL259:
 296:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/16;
 2692              		.loc 1 296 0
 2693 0088 4B61     		str	r3, [r1, #20]
 308:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q -= residual_imu.y*1024;
 2694              		.loc 1 308 0
 2695 008a D1E90C23 		ldrd	r2, [r1, #48]
 2696 008e 161B     		subs	r6, r2, r4
 2697 0090 63EBE477 		sbc	r7, r3, r4, asr #31
 309:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r -= residual_imu.z*1024;
 2698              		.loc 1 309 0
 2699 0094 D1E90E23 		ldrd	r2, [r1, #56]
 2700 0098 121A     		subs	r2, r2, r0
 2701 009a 63EBE073 		sbc	r3, r3, r0, asr #31
 312:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2702              		.loc 1 312 0
 2703 009e 4FEA1870 		lsr	r0, r8, #28
 2704 00a2 40EA0910 		orr	r0, r0, r9, lsl #4
 309:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.r -= residual_imu.z*1024;
 2705              		.loc 1 309 0
 2706 00a6 C1E90E23 		strd	r2, [r1, #56]
 312:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2707              		.loc 1 312 0
 2708 00aa 0860     		str	r0, [r1, #0]
 2709 00ac 120F     		lsrs	r2, r2, #28
 2710 00ae 300F     		lsrs	r0, r6, #28
 2711 00b0 40EA0710 		orr	r0, r0, r7, lsl #4
 2712 00b4 42EA0312 		orr	r2, r2, r3, lsl #4
 307:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.p -= residual_imu.x*1024;
 2713              		.loc 1 307 0
 2714 00b8 C1E90A89 		strd	r8, [r1, #40]
 308:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.high_rez_bias.q -= residual_imu.y*1024;
 2715              		.loc 1 308 0
 2716 00bc C1E90C67 		strd	r6, [r1, #48]
 312:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 2717              		.loc 1 312 0
 2718 00c0 4860     		str	r0, [r1, #4]
 2719 00c2 8A60     		str	r2, [r1, #8]
 2720              	.LBE188:
 2721              	.LBE189:
 242:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 2722              		.loc 1 242 0
 2723 00c4 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2724              	.L83:
 2725              		.align	2
 2726              	.L82:
 2727 00c8 00000000 		.word	imu
 2728 00cc 00000000 		.word	ahrs
 2729 00d0 00000000 		.word	.LANCHOR0
 2730              		.cfi_endproc
 2731              	.LFE14:
 2733              		.section	.text.ahrs_update_gps,"ax",%progbits
 2734              		.align	1
 2735              		.global	ahrs_update_gps
 2736              		.thumb
 2737              		.thumb_func
 2739              	ahrs_update_gps:
 2740              	.LFB17:
 316:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_gps(void) {
 2741              		.loc 1 316 0
 2742              		.cfi_startproc
 2743              		@ args = 0, pretend = 0, frame = 0
 2744              		@ frame_needed = 0, uses_anonymous_args = 0
 2745              		@ link register save eliminated.
 346:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 2746              		.loc 1 346 0
 2747 0000 7047     		bx	lr
 2748              		.cfi_endproc
 2749              	.LFE17:
 2751              		.section	.text.ahrs_update_heading,"ax",%progbits
 2752              		.align	1
 2753              		.global	ahrs_update_heading
 2754              		.thumb
 2755              		.thumb_func
 2757              	ahrs_update_heading:
 2758              	.LFB18:
 349:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_update_heading(int32_t heading) {
 2759              		.loc 1 349 0
 2760              		.cfi_startproc
 2761              		@ args = 0, pretend = 0, frame = 0
 2762              		@ frame_needed = 0, uses_anonymous_args = 0
 2763              	.LVL260:
 2764 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2765              	.LCFI7:
 2766              		.cfi_def_cfa_offset 28
 2767              		.cfi_offset 14, -4
 2768              		.cfi_offset 9, -8
 2769              		.cfi_offset 8, -12
 2770              		.cfi_offset 7, -16
 2771              		.cfi_offset 6, -20
 2772              		.cfi_offset 5, -24
 2773              		.cfi_offset 4, -28
 351:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_ANGLE_NORMALIZE(heading);
 2774              		.loc 1 351 0
 2775 0004 43F24323 		movw	r3, #12867
 2776 0008 02E0     		b	.L86
 2777              	.L87:
 351:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_ANGLE_NORMALIZE(heading);
 2778              		.loc 1 351 0 is_stmt 0 discriminator 2
 2779 000a A0F5C940 		sub	r0, r0, #25728
 2780              	.LVL261:
 2781 000e 0738     		subs	r0, r0, #7
 2782              	.LVL262:
 2783              	.L86:
 351:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_ANGLE_NORMALIZE(heading);
 2784              		.loc 1 351 0 discriminator 1
 2785 0010 9842     		cmp	r0, r3
 2786 0012 FADC     		bgt	.L87
 2787 0014 03E0     		b	.L106
 2788              	.L89:
 351:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_ANGLE_NORMALIZE(heading);
 2789              		.loc 1 351 0 discriminator 5
 2790 0016 00F5C940 		add	r0, r0, #25728
 2791              	.LVL263:
 2792 001a 0730     		adds	r0, r0, #7
 2793              	.LVL264:
 2794 001c 00E0     		b	.L105
 2795              	.L106:
 351:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_ANGLE_NORMALIZE(heading);
 2796              		.loc 1 351 0 discriminator 4
 2797 001e 4D4B     		ldr	r3, .L107
 2798              	.L105:
 2799 0020 9842     		cmp	r0, r3
 2800 0022 F8DB     		blt	.L89
 356:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     { RMAT_ELMT(ahrs.ltp_to_body_rmat, 0, 0),
 2801              		.loc 1 356 0 is_stmt 1
 2802 0024 4C4C     		ldr	r4, .L107+4
 2803              	.LBB190:
 360:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2804              		.loc 1 360 0
 2805 0026 00F5C953 		add	r3, r0, #6432
 2806              	.LBE190:
 356:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     { RMAT_ELMT(ahrs.ltp_to_body_rmat, 0, 0),
 2807              		.loc 1 356 0
 2808 002a A66E     		ldr	r6, [r4, #104]
 2809              	.LVL265:
 357:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       RMAT_ELMT(ahrs.ltp_to_body_rmat, 0, 1) };
 2810              		.loc 1 357 0
 2811 002c E56E     		ldr	r5, [r4, #108]
 2812              	.LVL266:
 2813              	.LBB191:
 360:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2814              		.loc 1 360 0
 2815 002e 0133     		adds	r3, r3, #1
 2816              	.LVL267:
 2817 0030 43F24322 		movw	r2, #12867
 2818 0034 02E0     		b	.L90
 2819              	.L91:
 360:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2820              		.loc 1 360 0 is_stmt 0 discriminator 2
 2821 0036 A3F5C943 		sub	r3, r3, #25728
 2822              	.LVL268:
 2823 003a 073B     		subs	r3, r3, #7
 2824              	.LVL269:
 2825              	.L90:
 360:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2826              		.loc 1 360 0 discriminator 1
 2827 003c 9342     		cmp	r3, r2
 2828 003e FADC     		bgt	.L91
 360:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2829              		.loc 1 360 0
 2830 0040 41F62112 		movw	r2, #6433
 2831 0044 9342     		cmp	r3, r2
 2832 0046 454C     		ldr	r4, .L107+8
 2833              	.LVL270:
 2834 0048 03DD     		ble	.L92
 360:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2835              		.loc 1 360 0 discriminator 7
 2836 004a C3F54953 		rsb	r3, r3, #12864
 2837              	.LVL271:
 2838 004e 0333     		adds	r3, r3, #3
 2839              	.LVL272:
 2840 0050 0CE0     		b	.L93
 2841              	.L92:
 360:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2842              		.loc 1 360 0 discriminator 8
 2843 0052 6FF4C952 		mvn	r2, #6432
 2844 0056 9342     		cmp	r3, r2
 2845 0058 06DA     		bge	.L94
 360:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2846              		.loc 1 360 0 discriminator 9
 2847 005a C3F17F43 		rsb	r3, r3, #-16777216
 2848              	.LVL273:
 2849 005e 03F57F03 		add	r3, r3, #16711680
 2850 0062 03F54D43 		add	r3, r3, #52480
 2851 0066 BD33     		adds	r3, r3, #189
 2852              	.LVL274:
 2853              	.L94:
 360:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2854              		.loc 1 360 0 discriminator 10
 2855 0068 002B     		cmp	r3, #0
 2856 006a 02DB     		blt	.L95
 2857              	.L93:
 360:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2858              		.loc 1 360 0 discriminator 11
 2859 006c 34F91320 		ldrsh	r2, [r4, r3, lsl #1]
 2860              	.LVL275:
 2861 0070 03E0     		b	.L96
 2862              	.LVL276:
 2863              	.L95:
 360:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(heading_x, heading); // measured course in x-direction
 2864              		.loc 1 360 0 discriminator 12
 2865 0072 5B42     		negs	r3, r3
 2866              	.LVL277:
 2867 0074 34F91320 		ldrsh	r2, [r4, r3, lsl #1]
 2868 0078 5242     		negs	r2, r2
 2869              	.LVL278:
 2870              	.L96:
 2871              	.LBE191:
 2872              	.LBB192:
 361:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 2873              		.loc 1 361 0 is_stmt 1
 2874 007a 41F62113 		movw	r3, #6433
 2875 007e 9842     		cmp	r0, r3
 2876 0080 364C     		ldr	r4, .L107+8
 2877 0082 03DD     		ble	.L97
 361:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 2878              		.loc 1 361 0 is_stmt 0 discriminator 7
 2879 0084 C0F54950 		rsb	r0, r0, #12864
 2880              	.LVL279:
 2881 0088 C31C     		adds	r3, r0, #3
 2882              	.LVL280:
 2883 008a 09E0     		b	.L98
 2884              	.LVL281:
 2885              	.L97:
 361:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 2886              		.loc 1 361 0 discriminator 8
 2887 008c 6FF4C953 		mvn	r3, #6432
 2888 0090 9842     		cmp	r0, r3
 2889 0092 B6BF     		itet	lt
 2890 0094 2F4B     		ldrlt	r3, .L107
 2891 0096 0346     		movge	r3, r0
 2892 0098 C0EB0303 		rsblt	r3, r0, r3
 2893              	.LVL282:
 2894 009c 002B     		cmp	r3, #0
 2895 009e 02DB     		blt	.L100
 2896              	.LVL283:
 2897              	.L98:
 361:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 2898              		.loc 1 361 0 discriminator 11
 2899 00a0 34F91310 		ldrsh	r1, [r4, r3, lsl #1]
 2900              	.LVL284:
 2901 00a4 03E0     		b	.L101
 2902              	.LVL285:
 2903              	.L100:
 361:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(heading_y, heading); // measured course in y-direction
 2904              		.loc 1 361 0 discriminator 12
 2905 00a6 5B42     		negs	r3, r3
 2906              	.LVL286:
 2907 00a8 34F91310 		ldrsh	r1, [r4, r3, lsl #1]
 2908 00ac 4942     		negs	r1, r1
 2909              	.LVL287:
 2910              	.L101:
 2911              	.LBE192:
 367:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (expected_ltp.x * heading_y - expected_ltp.y * heading_x)/(1<<INT32_ANGLE_FRAC)};
 2912              		.loc 1 367 0 is_stmt 1
 2913 00ae 01FB06F3 		mul	r3, r1, r6
 2914 00b2 02FB1533 		mls	r3, r2, r5, r3
 370:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2915              		.loc 1 370 0
 2916 00b6 284A     		ldr	r2, .L107+4
 2917              	.LVL288:
 367:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (expected_ltp.x * heading_y - expected_ltp.y * heading_x)/(1<<INT32_ANGLE_FRAC)};
 2918              		.loc 1 367 0
 2919 00b8 4FF48050 		mov	r0, #4096
 370:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2920              		.loc 1 370 0
 2921 00bc 556A     		ldr	r5, [r2, #36]
 367:subsystems/ahrs/ahrs_int_cmpl_quat.c ****       (expected_ltp.x * heading_y - expected_ltp.y * heading_x)/(1<<INT32_ANGLE_FRAC)};
 2922              		.loc 1 367 0
 2923 00be 93FBF0F3 		sdiv	r3, r3, r0
 2924              	.LVL289:
 370:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2925              		.loc 1 370 0
 2926 00c2 5D43     		muls	r5, r3, r5
 2927 00c4 146B     		ldr	r4, [r2, #48]
 376:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/4;
 2928              		.loc 1 376 0
 2929 00c6 2649     		ldr	r1, .L107+12
 2930              	.LVL290:
 370:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2931              		.loc 1 370 0
 2932 00c8 5C43     		muls	r4, r3, r4
 2933 00ca D06B     		ldr	r0, [r2, #60]
 376:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/4;
 2934              		.loc 1 376 0
 2935 00cc CF68     		ldr	r7, [r1, #12]
 2936 00ce 0422     		movs	r2, #4
 2937              	.LVL291:
 370:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2938              		.loc 1 370 0
 2939 00d0 AD13     		asrs	r5, r5, #14
 2940              	.LVL292:
 2941 00d2 5843     		muls	r0, r3, r0
 376:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/4;
 2942              		.loc 1 376 0
 2943 00d4 95FBF2F6 		sdiv	r6, r5, r2
 2944 00d8 BE19     		adds	r6, r7, r6
 370:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2945              		.loc 1 370 0
 2946 00da A413     		asrs	r4, r4, #14
 2947              	.LVL293:
 377:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/4;
 2948              		.loc 1 377 0
 2949 00dc 0F69     		ldr	r7, [r1, #16]
 376:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.p += residual_imu.x/4;
 2950              		.loc 1 376 0
 2951 00de CE60     		str	r6, [r1, #12]
 377:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/4;
 2952              		.loc 1 377 0
 2953 00e0 94FBF2F6 		sdiv	r6, r4, r2
 2954 00e4 BE19     		adds	r6, r7, r6
 370:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_VMULT(residual_imu, ahrs.ltp_to_imu_rmat, residual_ltp);
 2955              		.loc 1 370 0
 2956 00e6 8013     		asrs	r0, r0, #14
 2957              	.LVL294:
 377:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.q += residual_imu.y/4;
 2958              		.loc 1 377 0
 2959 00e8 0E61     		str	r6, [r1, #16]
 378:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.rate_correction.r += residual_imu.z/4;
 2960              		.loc 1 378 0
 2961 00ea 4E69     		ldr	r6, [r1, #20]
 2962 00ec 90FBF2F2 		sdiv	r2, r0, r2
 2963 00f0 B218     		adds	r2, r6, r2
 2964 00f2 4A61     		str	r2, [r1, #20]
 2965              	.LVL295:
 2966              	.LBB193:
 388:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(sin_max_angle_deviation, TRIG_BFP_OF_REAL(RadOfDeg(5.)));
 2967              		.loc 1 388 0
 2968 00f4 194A     		ldr	r2, .L107+8
 2969              	.LBE193:
 389:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ABS(residual_ltp.z) < sin_max_angle_deviation)
 2970              		.loc 1 389 0
 2971 00f6 002B     		cmp	r3, #0
 2972 00f8 B8BF     		it	lt
 2973 00fa 5B42     		rsblt	r3, r3, #0
 2974              	.LVL296:
 2975              	.LBB194:
 388:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(sin_max_angle_deviation, TRIG_BFP_OF_REAL(RadOfDeg(5.)));
 2976              		.loc 1 388 0
 2977 00fc B2F92A2B 		ldrsh	r2, [r2, #2858]
 2978              	.LBE194:
 389:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   if (ABS(residual_ltp.z) < sin_max_angle_deviation)
 2979              		.loc 1 389 0
 2980 0100 9342     		cmp	r3, r2
 2981 0102 25DA     		bge	.L85
 394:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.p -= residual_imu.x*(1<<INT32_ANGLE_FRAC);
 2982              		.loc 1 394 0
 2983 0104 2D03     		lsls	r5, r5, #12
 2984              	.LVL297:
 2985 0106 D1E90A89 		ldrd	r8, [r1, #40]
 396:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.r -= residual_imu.z*(1<<INT32_ANGLE_FRAC);
 2986              		.loc 1 396 0
 2987 010a 0003     		lsls	r0, r0, #12
 2988              	.LVL298:
 394:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.p -= residual_imu.x*(1<<INT32_ANGLE_FRAC);
 2989              		.loc 1 394 0
 2990 010c B8EB0508 		subs	r8, r8, r5
 2991 0110 69EBE579 		sbc	r9, r9, r5, asr #31
 395:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.q -= residual_imu.y*(1<<INT32_ANGLE_FRAC);
 2992              		.loc 1 395 0
 2993 0114 2403     		lsls	r4, r4, #12
 2994              	.LVL299:
 2995 0116 D1E90C23 		ldrd	r2, [r1, #48]
 2996 011a 161B     		subs	r6, r2, r4
 2997 011c 63EBE477 		sbc	r7, r3, r4, asr #31
 396:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.r -= residual_imu.z*(1<<INT32_ANGLE_FRAC);
 2998              		.loc 1 396 0
 2999 0120 D1E90E23 		ldrd	r2, [r1, #56]
 3000 0124 121A     		subs	r2, r2, r0
 3001 0126 63EBE073 		sbc	r3, r3, r0, asr #31
 398:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 3002              		.loc 1 398 0
 3003 012a 4FEA1870 		lsr	r0, r8, #28
 3004 012e 40EA0910 		orr	r0, r0, r9, lsl #4
 396:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.r -= residual_imu.z*(1<<INT32_ANGLE_FRAC);
 3005              		.loc 1 396 0
 3006 0132 C1E90E23 		strd	r2, [r1, #56]
 398:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 3007              		.loc 1 398 0
 3008 0136 0860     		str	r0, [r1, #0]
 3009 0138 120F     		lsrs	r2, r2, #28
 3010 013a 300F     		lsrs	r0, r6, #28
 394:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.p -= residual_imu.x*(1<<INT32_ANGLE_FRAC);
 3011              		.loc 1 394 0
 3012 013c C1E90A89 		strd	r8, [r1, #40]
 395:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     ahrs_impl.high_rez_bias.q -= residual_imu.y*(1<<INT32_ANGLE_FRAC);
 3013              		.loc 1 395 0
 3014 0140 C1E90C67 		strd	r6, [r1, #48]
 398:subsystems/ahrs/ahrs_int_cmpl_quat.c ****     INT_RATES_RSHIFT(ahrs_impl.gyro_bias, ahrs_impl.high_rez_bias, 28);
 3015              		.loc 1 398 0
 3016 0144 40EA0710 		orr	r0, r0, r7, lsl #4
 3017 0148 42EA0312 		orr	r2, r2, r3, lsl #4
 3018 014c 4860     		str	r0, [r1, #4]
 3019 014e 8A60     		str	r2, [r1, #8]
 3020              	.L85:
 3021 0150 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 3022              	.L108:
 3023              		.align	2
 3024              	.L107:
 3025 0154 BDCDFFFF 		.word	-12867
 3026 0158 00000000 		.word	ahrs
 3027 015c 00000000 		.word	pprz_trig_int
 3028 0160 00000000 		.word	.LANCHOR0
 3029              		.cfi_endproc
 3030              	.LFE18:
 3032              		.section	.text.ahrs_realign_heading,"ax",%progbits
 3033              		.align	1
 3034              		.global	ahrs_realign_heading
 3035              		.thumb
 3036              		.thumb_func
 3038              	ahrs_realign_heading:
 3039              	.LFB19:
 402:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_realign_heading(int32_t heading) {
 3040              		.loc 1 402 0
 3041              		.cfi_startproc
 3042              		@ args = 0, pretend = 0, frame = 24
 3043              		@ frame_needed = 0, uses_anonymous_args = 0
 3044              	.LVL300:
 3045 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 3046              	.LCFI8:
 3047              		.cfi_def_cfa_offset 36
 3048              		.cfi_offset 14, -4
 3049              		.cfi_offset 11, -8
 3050              		.cfi_offset 10, -12
 3051              		.cfi_offset 9, -16
 3052              		.cfi_offset 8, -20
 3053              		.cfi_offset 7, -24
 3054              		.cfi_offset 6, -28
 3055              		.cfi_offset 5, -32
 3056              		.cfi_offset 4, -36
 3057              	.LBB195:
 408:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3058              		.loc 1 408 0
 3059 0004 0223     		movs	r3, #2
 3060 0006 90FBF3F3 		sdiv	r3, r0, r3
 3061              	.LVL301:
 3062              	.LBE195:
 402:subsystems/ahrs/ahrs_int_cmpl_quat.c **** void ahrs_realign_heading(int32_t heading) {
 3063              		.loc 1 402 0
 3064 000a 87B0     		sub	sp, sp, #28
 3065              	.LCFI9:
 3066              		.cfi_def_cfa_offset 64
 3067              	.LBB196:
 408:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3068              		.loc 1 408 0
 3069 000c 1A46     		mov	r2, r3
 3070 000e 43F24321 		movw	r1, #12867
 3071 0012 02E0     		b	.L110
 3072              	.LVL302:
 3073              	.L111:
 408:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3074              		.loc 1 408 0 is_stmt 0 discriminator 2
 3075 0014 A2F5C942 		sub	r2, r2, #25728
 3076              	.LVL303:
 3077 0018 073A     		subs	r2, r2, #7
 3078              	.LVL304:
 3079              	.L110:
 408:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3080              		.loc 1 408 0 discriminator 1
 3081 001a 8A42     		cmp	r2, r1
 3082 001c FADC     		bgt	.L111
 3083 001e 03E0     		b	.L149
 3084              	.L113:
 408:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3085              		.loc 1 408 0 discriminator 5
 3086 0020 02F5C942 		add	r2, r2, #25728
 3087              	.LVL305:
 3088 0024 0732     		adds	r2, r2, #7
 3089              	.LVL306:
 3090 0026 00E0     		b	.L146
 3091              	.L149:
 408:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3092              		.loc 1 408 0 discriminator 4
 3093 0028 6549     		ldr	r1, .L151
 3094              	.L146:
 3095 002a 8A42     		cmp	r2, r1
 3096 002c F8DB     		blt	.L113
 408:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3097              		.loc 1 408 0
 3098 002e 41F62111 		movw	r1, #6433
 3099 0032 8A42     		cmp	r2, r1
 3100 0034 6349     		ldr	r1, .L151+4
 3101 0036 03DD     		ble	.L114
 408:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3102              		.loc 1 408 0 discriminator 7
 3103 0038 C2F54952 		rsb	r2, r2, #12864
 3104              	.LVL307:
 3105 003c 0332     		adds	r2, r2, #3
 3106              	.LVL308:
 3107 003e 0CE0     		b	.L115
 3108              	.L114:
 408:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3109              		.loc 1 408 0 discriminator 8
 3110 0040 6FF4C950 		mvn	r0, #6432
 3111              	.LVL309:
 3112 0044 8242     		cmp	r2, r0
 3113 0046 06DA     		bge	.L116
 408:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3114              		.loc 1 408 0 discriminator 9
 3115 0048 C2F17F42 		rsb	r2, r2, #-16777216
 3116              	.LVL310:
 3117 004c 02F57F02 		add	r2, r2, #16711680
 3118 0050 02F54D42 		add	r2, r2, #52480
 3119 0054 BD32     		adds	r2, r2, #189
 3120              	.LVL311:
 3121              	.L116:
 408:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3122              		.loc 1 408 0 discriminator 10
 3123 0056 002A     		cmp	r2, #0
 3124 0058 02DB     		blt	.L117
 3125              	.L115:
 408:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3126              		.loc 1 408 0 discriminator 11
 3127 005a 31F91260 		ldrsh	r6, [r1, r2, lsl #1]
 3128              	.LVL312:
 3129 005e 03E0     		b	.L118
 3130              	.LVL313:
 3131              	.L117:
 408:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_SIN(q_h_new.qz, heading/2);
 3132              		.loc 1 408 0 discriminator 12
 3133 0060 5242     		negs	r2, r2
 3134              	.LVL314:
 3135 0062 31F91260 		ldrsh	r6, [r1, r2, lsl #1]
 3136 0066 7642     		negs	r6, r6
 3137              	.LVL315:
 3138              	.L118:
 3139              	.LBE196:
 3140              	.LBB197:
 409:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3141              		.loc 1 409 0 is_stmt 1
 3142 0068 03F5C953 		add	r3, r3, #6432
 3143 006c 0133     		adds	r3, r3, #1
 3144              	.LVL316:
 3145 006e 43F24322 		movw	r2, #12867
 3146 0072 02E0     		b	.L119
 3147              	.L120:
 409:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3148              		.loc 1 409 0 is_stmt 0 discriminator 2
 3149 0074 A3F5C943 		sub	r3, r3, #25728
 3150              	.LVL317:
 3151 0078 073B     		subs	r3, r3, #7
 3152              	.LVL318:
 3153              	.L119:
 409:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3154              		.loc 1 409 0 discriminator 1
 3155 007a 9342     		cmp	r3, r2
 3156 007c FADC     		bgt	.L120
 3157 007e 03E0     		b	.L150
 3158              	.L122:
 409:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3159              		.loc 1 409 0 discriminator 5
 3160 0080 03F5C943 		add	r3, r3, #25728
 3161              	.LVL319:
 3162 0084 0733     		adds	r3, r3, #7
 3163              	.LVL320:
 3164 0086 00E0     		b	.L148
 3165              	.L150:
 409:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3166              		.loc 1 409 0 discriminator 4
 3167 0088 4D4A     		ldr	r2, .L151
 3168              	.L148:
 3169 008a 9342     		cmp	r3, r2
 3170 008c F8DB     		blt	.L122
 409:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3171              		.loc 1 409 0
 3172 008e 41F62112 		movw	r2, #6433
 3173 0092 9342     		cmp	r3, r2
 3174 0094 4B4A     		ldr	r2, .L151+4
 3175 0096 03DD     		ble	.L123
 409:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3176              		.loc 1 409 0 discriminator 7
 3177 0098 C3F54953 		rsb	r3, r3, #12864
 3178              	.LVL321:
 3179 009c 0333     		adds	r3, r3, #3
 3180              	.LVL322:
 3181 009e 0CE0     		b	.L124
 3182              	.L123:
 409:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3183              		.loc 1 409 0 discriminator 8
 3184 00a0 6FF4C951 		mvn	r1, #6432
 3185 00a4 8B42     		cmp	r3, r1
 3186 00a6 06DA     		bge	.L125
 409:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3187              		.loc 1 409 0 discriminator 9
 3188 00a8 C3F17F43 		rsb	r3, r3, #-16777216
 3189              	.LVL323:
 3190 00ac 03F57F03 		add	r3, r3, #16711680
 3191 00b0 03F54D43 		add	r3, r3, #52480
 3192 00b4 BD33     		adds	r3, r3, #189
 3193              	.LVL324:
 3194              	.L125:
 409:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3195              		.loc 1 409 0 discriminator 10
 3196 00b6 002B     		cmp	r3, #0
 3197 00b8 02DB     		blt	.L126
 3198              	.L124:
 409:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3199              		.loc 1 409 0 discriminator 11
 3200 00ba 32F91350 		ldrsh	r5, [r2, r3, lsl #1]
 3201              	.LVL325:
 3202 00be 03E0     		b	.L127
 3203              	.LVL326:
 3204              	.L126:
 409:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   PPRZ_ITRIG_COS(q_h_new.qi, heading/2);
 3205              		.loc 1 409 0 discriminator 12
 3206 00c0 5B42     		negs	r3, r3
 3207              	.LVL327:
 3208 00c2 32F91350 		ldrsh	r5, [r2, r3, lsl #1]
 3209 00c6 6D42     		negs	r5, r5
 3210              	.LVL328:
 3211              	.L127:
 3212              	.LBE197:
 413:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(q_h, ahrs.ltp_to_body_quat);
 3213              		.loc 1 413 0 is_stmt 1
 3214 00c8 3F4B     		ldr	r3, .L151+8
 3215 00ca 9A6D     		ldr	r2, [r3, #88]
 3216 00cc D96C     		ldr	r1, [r3, #76]
 3217              	.LVL329:
 3218              	.LBB198:
 3219              	.LBB199:
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3220              		.loc 1 416 0
 3221 00ce 02FB02F3 		mul	r3, r2, r2
 3222              	.LVL330:
 3223 00d2 01FB0133 		mla	r3, r1, r1, r3
 3224              	.LVL331:
 3225 00d6 7BB1     		cbz	r3, .L128
 3226              	.LVL332:
 3227              	.LBB200:
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3228              		.loc 1 416 0 is_stmt 0 discriminator 2
 3229 00d8 1C46     		mov	r4, r3
 3230 00da 2827     		movs	r7, #40
 3231 00dc 00E0     		b	.L130
 3232              	.LVL333:
 3233              	.L140:
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3234              		.loc 1 416 0
 3235 00de 0446     		mov	r4, r0
 3236              	.LVL334:
 3237              	.L130:
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3238              		.loc 1 416 0 discriminator 3
 3239 00e0 B3FBF4F0 		udiv	r0, r3, r4
 3240              	.LVL335:
 3241 00e4 0019     		adds	r0, r0, r4
 3242              	.LVL336:
 3243 00e6 4008     		lsrs	r0, r0, #1
 3244              	.LVL337:
 3245 00e8 241A     		subs	r4, r4, r0
 3246              	.LVL338:
 3247 00ea 012C     		cmp	r4, #1
 3248 00ec 03D9     		bls	.L129
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3249              		.loc 1 416 0 discriminator 4
 3250 00ee 013F     		subs	r7, r7, #1
 3251 00f0 FFB2     		uxtb	r7, r7
 3252 00f2 002F     		cmp	r7, #0
 3253 00f4 F3D1     		bne	.L140
 3254              	.L129:
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3255              		.loc 1 416 0 discriminator 5
 3256 00f6 0346     		mov	r3, r0
 3257              	.LVL339:
 3258              	.L128:
 3259              	.LBE200:
 3260              	.LBE199:
 416:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_NORMALIZE(q_h);
 3261              		.loc 1 416 0 discriminator 6
 3262 00f8 D403     		lsls	r4, r2, #15
 3263 00fa C803     		lsls	r0, r1, #15
 3264 00fc 90FBF3F0 		sdiv	r0, r0, r3
 3265              	.LVL340:
 3266 0100 94FBF3F3 		sdiv	r3, r4, r3
 3267              	.LVL341:
 3268              	.LBE198:
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3269              		.loc 1 420 0 is_stmt 1 discriminator 6
 3270 0104 06FB03F4 		mul	r4, r6, r3
 3271 0108 05FB0044 		mla	r4, r5, r0, r4
 3272              	.LVL342:
 3273 010c 7043     		muls	r0, r6, r0
 3274              	.LVL343:
 3275 010e 05FB1300 		mls	r0, r5, r3, r0
 3276 0112 C013     		asrs	r0, r0, #15
 3277              	.LVL344:
 3278 0114 E413     		asrs	r4, r4, #15
 3279              	.LVL345:
 3280 0116 01D5     		bpl	.L131
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3281              		.loc 1 420 0 is_stmt 0 discriminator 1
 3282 0118 6442     		negs	r4, r4
 3283              	.LVL346:
 3284 011a 4042     		negs	r0, r0
 3285              	.LVL347:
 3286              	.L131:
 3287              	.LBB201:
 3288              	.LBB202:
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3289              		.loc 1 420 0 discriminator 2
 3290 011c 00FB00F3 		mul	r3, r0, r0
 3291              	.LVL348:
 3292 0120 04FB0433 		mla	r3, r4, r4, r3
 3293              	.LVL349:
 3294 0124 7BB1     		cbz	r3, .L132
 3295              	.LVL350:
 3296              	.LBB203:
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3297              		.loc 1 420 0 discriminator 4
 3298 0126 1D46     		mov	r5, r3
 3299              	.LVL351:
 3300 0128 2827     		movs	r7, #40
 3301 012a 00E0     		b	.L134
 3302              	.LVL352:
 3303              	.L142:
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3304              		.loc 1 420 0
 3305 012c 3546     		mov	r5, r6
 3306              	.LVL353:
 3307              	.L134:
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3308              		.loc 1 420 0 discriminator 5
 3309 012e B3FBF5F6 		udiv	r6, r3, r5
 3310              	.LVL354:
 3311 0132 7619     		adds	r6, r6, r5
 3312              	.LVL355:
 3313 0134 7608     		lsrs	r6, r6, #1
 3314              	.LVL356:
 3315 0136 AD1B     		subs	r5, r5, r6
 3316              	.LVL357:
 3317 0138 012D     		cmp	r5, #1
 3318 013a 03D9     		bls	.L133
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3319              		.loc 1 420 0 discriminator 6
 3320 013c 013F     		subs	r7, r7, #1
 3321 013e FFB2     		uxtb	r7, r7
 3322 0140 002F     		cmp	r7, #0
 3323 0142 F3D1     		bne	.L142
 3324              	.L133:
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3325              		.loc 1 420 0 discriminator 7
 3326 0144 3346     		mov	r3, r6
 3327              	.LVL358:
 3328              	.L132:
 3329              	.LBE203:
 3330              	.LBE202:
 420:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_INV_COMP_NORM_SHORTEST(q_c, q_h, q_h_new);
 3331              		.loc 1 420 0 discriminator 8
 3332 0146 E403     		lsls	r4, r4, #15
 3333              	.LVL359:
 3334 0148 C003     		lsls	r0, r0, #15
 3335              	.LVL360:
 3336 014a 94FBF3F4 		sdiv	r4, r4, r3
 3337              	.LVL361:
 3338 014e 90FBF3F0 		sdiv	r0, r0, r3
 3339              	.LVL362:
 3340              	.LBE201:
 424:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3341              		.loc 1 424 0 is_stmt 1 discriminator 8
 3342 0152 1D4B     		ldr	r3, .L151+8
 3343              	.LVL363:
 3344 0154 01FB04F8 		mul	r8, r1, r4
 3345 0158 1F6D     		ldr	r7, [r3, #80]
 3346 015a 5B6D     		ldr	r3, [r3, #84]
 3347 015c 07FB04F6 		mul	r6, r7, r4
 3348 0160 4743     		muls	r7, r0, r7
 3349 0162 03FB1066 		mls	r6, r3, r0, r6
 3350 0166 03FB0477 		mla	r7, r3, r4, r7
 3351 016a 01FB00F3 		mul	r3, r1, r0
 3352 016e 02FB1088 		mls	r8, r2, r0, r8
 3353              	.LVL364:
 3354 0172 02FB0433 		mla	r3, r2, r4, r3
 3355 0176 F613     		asrs	r6, r6, #15
 3356              	.LVL365:
 3357 0178 FF13     		asrs	r7, r7, #15
 3358              	.LVL366:
 3359 017a DB13     		asrs	r3, r3, #15
 3360              	.LVL367:
 3361 017c 5FEAE838 		asrs	r8, r8, #15
 3362              	.LVL368:
 3363 0180 04D5     		bpl	.L135
 424:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3364              		.loc 1 424 0 is_stmt 0 discriminator 1
 3365 0182 C8F10008 		rsb	r8, r8, #0
 3366              	.LVL369:
 3367 0186 7642     		negs	r6, r6
 3368              	.LVL370:
 3369 0188 7F42     		negs	r7, r7
 3370              	.LVL371:
 3371 018a 5B42     		negs	r3, r3
 3372              	.LVL372:
 3373              	.L135:
 3374              	.LBB204:
 3375              	.LBB205:
 424:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3376              		.loc 1 424 0 discriminator 2
 3377 018c 06FB06F1 		mul	r1, r6, r6
 3378 0190 07FB07F2 		mul	r2, r7, r7
 3379 0194 08FB0811 		mla	r1, r8, r8, r1
 3380 0198 03FB0322 		mla	r2, r3, r3, r2
 3381              	.LVL373:
 3382 019c 8918     		adds	r1, r1, r2
 3383              	.LVL374:
 3384 019e 15D0     		beq	.L143
 3385              	.LVL375:
 3386              	.LBB206:
 424:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3387              		.loc 1 424 0 discriminator 4
 3388 01a0 0A46     		mov	r2, r1
 3389 01a2 2820     		movs	r0, #40
 3390              	.LVL376:
 3391 01a4 00E0     		b	.L138
 3392              	.LVL377:
 3393              	.L144:
 424:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3394              		.loc 1 424 0
 3395 01a6 2A46     		mov	r2, r5
 3396              	.LVL378:
 3397              	.L138:
 424:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3398              		.loc 1 424 0 discriminator 5
 3399 01a8 B1FBF2F5 		udiv	r5, r1, r2
 3400              	.LVL379:
 3401 01ac AD18     		adds	r5, r5, r2
 3402              	.LVL380:
 3403 01ae 6D08     		lsrs	r5, r5, #1
 3404              	.LVL381:
 3405 01b0 521B     		subs	r2, r2, r5
 3406              	.LVL382:
 3407 01b2 012A     		cmp	r2, #1
 3408 01b4 0BD9     		bls	.L136
 424:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3409              		.loc 1 424 0 discriminator 6
 3410 01b6 0138     		subs	r0, r0, #1
 3411 01b8 C0B2     		uxtb	r0, r0
 3412 01ba 0028     		cmp	r0, #0
 3413 01bc F3D1     		bne	.L144
 3414 01be 06E0     		b	.L136
 3415              	.L152:
 3416              		.align	2
 3417              	.L151:
 3418 01c0 BDCDFFFF 		.word	-12867
 3419 01c4 00000000 		.word	pprz_trig_int
 3420 01c8 00000000 		.word	ahrs
 3421              	.LVL383:
 3422              	.L143:
 3423              	.LBE206:
 424:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3424              		.loc 1 424 0
 3425 01cc 0D46     		mov	r5, r1
 3426              	.LVL384:
 3427              	.L136:
 3428              	.LBE205:
 424:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3429              		.loc 1 424 0 discriminator 8
 3430 01ce F603     		lsls	r6, r6, #15
 3431              	.LVL385:
 3432 01d0 4FEAC838 		lsl	r8, r8, #15
 3433              	.LVL386:
 3434 01d4 96FBF5F6 		sdiv	r6, r6, r5
 3435 01d8 98FBF5F8 		sdiv	r8, r8, r5
 3436              	.LVL387:
 3437 01dc DB03     		lsls	r3, r3, #15
 3438              	.LVL388:
 3439 01de FF03     		lsls	r7, r7, #15
 3440              	.LVL389:
 3441 01e0 97FBF5F7 		sdiv	r7, r7, r5
 3442              	.LVL390:
 3443              	.LBE204:
 3444              	.LBB207:
 3445              	.LBB208:
 453:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_quat);
 3446              		.loc 1 453 0 is_stmt 1 discriminator 8
 3447 01e4 06FB08F0 		mul	r0, r6, r8
 3448              	.LBE208:
 3449              	.LBE207:
 3450              	.LBB223:
 424:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP_NORM_SHORTEST(q, q_c, ahrs.ltp_to_body_quat);
 3451              		.loc 1 424 0 discriminator 8
 3452 01e8 93FBF5F5 		sdiv	r5, r3, r5
 3453              	.LVL391:
 3454              	.LBE223:
 3455              	.LBB224:
 3456              	.LBB209:
 453:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_quat);
 3457              		.loc 1 453 0 discriminator 8
 3458 01ec 05FB07F3 		mul	r3, r5, r7
 3459              	.LBE209:
 3460              	.LBE224:
 425:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(ahrs.ltp_to_body_quat, q);
 3461              		.loc 1 425 0 discriminator 8
 3462 01f0 DB4C     		ldr	r4, .L153
 3463              	.LVL392:
 3464              	.LBB225:
 3465              	.LBB210:
 453:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_quat);
 3466              		.loc 1 453 0 discriminator 8
 3467 01f2 C013     		asrs	r0, r0, #15
 3468 01f4 00EBE330 		add	r0, r0, r3, asr #15
 3469              	.LBE210:
 3470              	.LBE225:
 425:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   QUAT_COPY(ahrs.ltp_to_body_quat, q);
 3471              		.loc 1 425 0 discriminator 8
 3472 01f8 C4F84C80 		str	r8, [r4, #76]
 3473 01fc 2665     		str	r6, [r4, #80]
 3474 01fe 6765     		str	r7, [r4, #84]
 3475 0200 A565     		str	r5, [r4, #88]
 3476              	.LVL393:
 3477              	.LBB226:
 3478              	.LBB211:
 453:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_quat);
 3479              		.loc 1 453 0 discriminator 8
 3480 0202 40F31000 		sbfx	r0, r0, #0, #17
 3481 0206 FFF7FEFF 		bl	__aeabi_i2f
 3482              	.LVL394:
 3483 020a 4FF06251 		mov	r1, #947912704
 3484 020e FFF7FEFF 		bl	__aeabi_fmul
 3485 0212 07FB07F9 		mul	r9, r7, r7
 3486 0216 8246     		mov	sl, r0
 3487 0218 06FB06F0 		mul	r0, r6, r6
 3488 021c 4FEAE939 		asr	r9, r9, #15
 3489              	.LVL395:
 3490 0220 09EBE030 		add	r0, r9, r0, asr #15
 3491 0224 40F31000 		sbfx	r0, r0, #0, #17
 3492 0228 C0F58040 		rsb	r0, r0, #16384
 3493 022c FFF7FEFF 		bl	__aeabi_i2f
 3494 0230 4FF06251 		mov	r1, #947912704
 3495 0234 FFF7FEFF 		bl	__aeabi_fmul
 3496 0238 0146     		mov	r1, r0
 3497 023a 5046     		mov	r0, sl
 3498 023c FFF7FEFF 		bl	atan2f
 3499 0240 8346     		mov	fp, r0
 3500              	.LVL396:
 3501 0242 07FB08F0 		mul	r0, r7, r8
 3502              	.LVL397:
 3503 0246 05FB06F3 		mul	r3, r5, r6
 3504 024a C013     		asrs	r0, r0, #15
 3505 024c C0EBE330 		rsb	r0, r0, r3, asr #15
 3506 0250 40F31000 		sbfx	r0, r0, #0, #17
 3507 0254 FFF7FEFF 		bl	__aeabi_i2f
 3508 0258 4FF06251 		mov	r1, #947912704
 3509 025c FFF7FEFF 		bl	__aeabi_fmul
 3510 0260 FFF7FEFF 		bl	asinf
 3511 0264 05FB08F8 		mul	r8, r5, r8
 3512              	.LVL398:
 3513 0268 7E43     		muls	r6, r7, r6
 3514              	.LVL399:
 3515 026a 4FEAE838 		asr	r8, r8, #15
 3516              	.LVL400:
 3517 026e 8246     		mov	sl, r0
 3518              	.LVL401:
 3519 0270 08EBE630 		add	r0, r8, r6, asr #15
 3520              	.LVL402:
 3521 0274 40F31000 		sbfx	r0, r0, #0, #17
 3522 0278 FFF7FEFF 		bl	__aeabi_i2f
 3523 027c 4FF06251 		mov	r1, #947912704
 3524 0280 FFF7FEFF 		bl	__aeabi_fmul
 3525 0284 6D43     		muls	r5, r5, r5
 3526              	.LVL403:
 3527 0286 09EBE539 		add	r9, r9, r5, asr #15
 3528              	.LVL404:
 3529 028a 0646     		mov	r6, r0
 3530 028c 49F31000 		sbfx	r0, r9, #0, #17
 3531 0290 C0F58040 		rsb	r0, r0, #16384
 3532 0294 FFF7FEFF 		bl	__aeabi_i2f
 3533 0298 4FF06251 		mov	r1, #947912704
 3534 029c FFF7FEFF 		bl	__aeabi_fmul
 3535 02a0 0146     		mov	r1, r0
 3536 02a2 3046     		mov	r0, r6
 3537 02a4 FFF7FEFF 		bl	atan2f
 3538 02a8 4FF08B41 		mov	r1, #1166016512
 3539 02ac 0546     		mov	r5, r0
 3540              	.LVL405:
 3541 02ae 5846     		mov	r0, fp
 3542              	.LVL406:
 3543 02b0 FFF7FEFF 		bl	__aeabi_fmul
 3544 02b4 FFF7FEFF 		bl	__aeabi_f2iz
 3545 02b8 4FF08B41 		mov	r1, #1166016512
 3546 02bc E065     		str	r0, [r4, #92]
 3547 02be 0AF10040 		add	r0, sl, #-2147483648
 3548 02c2 FFF7FEFF 		bl	__aeabi_fmul
 3549 02c6 FFF7FEFF 		bl	__aeabi_f2iz
 3550 02ca 4FF08B41 		mov	r1, #1166016512
 3551 02ce 2066     		str	r0, [r4, #96]
 3552 02d0 2846     		mov	r0, r5
 3553 02d2 FFF7FEFF 		bl	__aeabi_fmul
 3554 02d6 FFF7FEFF 		bl	__aeabi_f2iz
 3555              	.LBE211:
 3556              	.LBB212:
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3557              		.loc 1 455 0 discriminator 8
 3558 02da E16C     		ldr	r1, [r4, #76]
 3559 02dc 266D     		ldr	r6, [r4, #80]
 3560 02de 636D     		ldr	r3, [r4, #84]
 3561 02e0 A26D     		ldr	r2, [r4, #88]
 3562 02e2 01FB01FE 		mul	lr, r1, r1
 3563              	.LBE212:
 3564              	.LBB213:
 453:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_QUAT(ahrs.ltp_to_body_euler, ahrs.ltp_to_body_quat);
 3565              		.loc 1 453 0 discriminator 8
 3566 02e6 6066     		str	r0, [r4, #100]
 3567              	.LBE213:
 3568              	.LBB214:
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3569              		.loc 1 455 0 discriminator 8
 3570 02e8 06FB01F0 		mul	r0, r6, r1
 3571 02ec 03FB01F5 		mul	r5, r3, r1
 3572              	.LVL407:
 3573 02f0 02FB06FC 		mul	ip, r2, r6
 3574 02f4 06FB06FB 		mul	fp, r6, r6
 3575              	.LVL408:
 3576 02f8 4FEAEE3E 		asr	lr, lr, #15
 3577 02fc AEF5804E 		sub	lr, lr, #16384
 3578              	.LVL409:
 3579 0300 C013     		asrs	r0, r0, #15
 3580 0302 02FB03F9 		mul	r9, r2, r3
 3581 0306 0590     		str	r0, [sp, #20]
 3582              	.LVL410:
 3583 0308 ED13     		asrs	r5, r5, #15
 3584              	.LVL411:
 3585 030a 0EEBEB30 		add	r0, lr, fp, asr #15
 3586              	.LVL412:
 3587 030e 4FEAEC3C 		asr	ip, ip, #15
 3588 0312 03FB03F8 		mul	r8, r3, r3
 3589              	.LVL413:
 3590 0316 0190     		str	r0, [sp, #4]
 3591 0318 A066     		str	r0, [r4, #104]
 3592 031a 0CEB0500 		add	r0, ip, r5
 3593 031e 0290     		str	r0, [sp, #8]
 3594 0320 C4F88000 		str	r0, [r4, #128]
 3595 0324 0598     		ldr	r0, [sp, #20]
 3596 0326 4FEAE939 		asr	r9, r9, #15
 3597 032a C0EB0900 		rsb	r0, r0, r9
 3598 032e 0390     		str	r0, [sp, #12]
 3599 0330 C4F88400 		str	r0, [r4, #132]
 3600 0334 0EEBE830 		add	r0, lr, r8, asr #15
 3601 0338 0490     		str	r0, [sp, #16]
 3602 033a A067     		str	r0, [r4, #120]
 3603 033c 0598     		ldr	r0, [sp, #20]
 3604 033e C5EB0C0C 		rsb	ip, r5, ip
 3605 0342 8144     		add	r9, r9, r0
 3606 0344 02FB02F0 		mul	r0, r2, r2
 3607              	.LBE214:
 3608              	.LBE226:
 3609              	.LBB227:
 3610              	.LBB228:
 469:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 470:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 471:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 472:subsystems/ahrs/ahrs_int_cmpl_quat.c **** __attribute__ ((always_inline)) static inline void compute_imu_orientation(void) {
 473:subsystems/ahrs/ahrs_int_cmpl_quat.c **** 
 474:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute LTP to IMU quaternion */
 475:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP(ahrs.ltp_to_imu_quat, ahrs.ltp_to_body_quat, imu.body_to_imu_quat);
 3611              		.loc 1 475 0 discriminator 8
 3612 0348 864D     		ldr	r5, .L153+4
 3613              	.LVL414:
 3614              	.LBE228:
 3615              	.LBE227:
 3616              	.LBB239:
 3617              	.LBB215:
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3618              		.loc 1 455 0 discriminator 8
 3619 034a 0EEBE03E 		add	lr, lr, r0, asr #15
 3620              	.LVL415:
 3621              	.LBE215:
 3622              	.LBE239:
 3623              	.LBB240:
 3624              	.LBB231:
 3625              		.loc 1 475 0 discriminator 8
 3626 034e D5F88400 		ldr	r0, [r5, #132]
 3627              	.LBE231:
 3628              	.LBE240:
 3629              	.LBB241:
 3630              	.LBB216:
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3631              		.loc 1 455 0 discriminator 8
 3632 0352 02FB01F7 		mul	r7, r2, r1
 3633              	.LVL416:
 3634              	.LBE216:
 3635              	.LBE241:
 3636              	.LBB242:
 3637              	.LBB232:
 3638              		.loc 1 475 0 discriminator 8
 3639 0356 00FB01F8 		mul	r8, r0, r1
 3640              	.LBE232:
 3641              	.LBE242:
 3642              	.LBB243:
 3643              	.LBB217:
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3644              		.loc 1 455 0 discriminator 8
 3645 035a 03FB06FA 		mul	sl, r3, r6
 3646              	.LVL417:
 3647              	.LBE217:
 3648              	.LBE243:
 3649              	.LBB244:
 3650              	.LBB233:
 3651              		.loc 1 475 0 discriminator 8
 3652 035e D5F88800 		ldr	r0, [r5, #136]
 3653              	.LBE233:
 3654              	.LBE244:
 3655              	.LBB245:
 3656              	.LBB218:
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3657              		.loc 1 455 0 discriminator 8
 3658 0362 FF13     		asrs	r7, r7, #15
 3659              	.LVL418:
 3660              	.LBE218:
 3661              	.LBE245:
 3662              	.LBB246:
 3663              	.LBB234:
 3664              		.loc 1 475 0 discriminator 8
 3665 0364 00FB1688 		mls	r8, r0, r6, r8
 3666              	.LBE234:
 3667              	.LBE246:
 3668              	.LBB247:
 3669              	.LBB219:
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3670              		.loc 1 455 0 discriminator 8
 3671 0368 4FEAEA3A 		asr	sl, sl, #15
 3672 036c C7EB0A0B 		rsb	fp, r7, sl
 3673 0370 BA44     		add	sl, sl, r7
 3674              	.LBE219:
 3675              	.LBE247:
 3676              	.LBB248:
 3677              	.LBB235:
 3678              		.loc 1 475 0 discriminator 8
 3679 0372 D5F88C70 		ldr	r7, [r5, #140]
 3680              	.LVL419:
 3681 0376 D5F89000 		ldr	r0, [r5, #144]
 3682 037a 07FB1388 		mls	r8, r7, r3, r8
 3683 037e 00FB1288 		mls	r8, r0, r2, r8
 3684 0382 D5F88400 		ldr	r0, [r5, #132]
 3685 0386 4FEAE838 		asr	r8, r8, #15
 3686 038a C4F80080 		str	r8, [r4, #0]
 3687 038e 00FB06F8 		mul	r8, r0, r6
 3688 0392 D5F88800 		ldr	r0, [r5, #136]
 3689              	.LBE235:
 3690              	.LBE248:
 3691              	.LBB249:
 3692              	.LBB220:
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3693              		.loc 1 455 0 discriminator 8
 3694 0396 C4F874B0 		str	fp, [r4, #116]
 3695              	.LBE220:
 3696              	.LBE249:
 3697              	.LBB250:
 3698              	.LBB236:
 3699              		.loc 1 475 0 discriminator 8
 3700 039a 00FB0188 		mla	r8, r0, r1, r8
 3701 039e D5F89000 		ldr	r0, [r5, #144]
 3702              	.LBE236:
 3703              	.LBE250:
 3704              	.LBB251:
 3705              	.LBB221:
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3706              		.loc 1 455 0 discriminator 8
 3707 03a2 C4F86CA0 		str	sl, [r4, #108]
 3708              	.LBE221:
 3709              	.LBE251:
 3710              	.LBB252:
 3711              	.LBB237:
 3712              		.loc 1 475 0 discriminator 8
 3713 03a6 00FB0388 		mla	r8, r0, r3, r8
 3714 03aa 07FB1288 		mls	r8, r7, r2, r8
 3715 03ae 4FEAE838 		asr	r8, r8, #15
 3716              	.LBE237:
 3717              	.LBE252:
 3718              	.LBB253:
 3719              	.LBB222:
 455:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_OF_QUAT(ahrs.ltp_to_body_rmat, ahrs.ltp_to_body_quat);
 3720              		.loc 1 455 0 discriminator 8
 3721 03b2 C4F870C0 		str	ip, [r4, #112]
 3722 03b6 C4F87C90 		str	r9, [r4, #124]
 3723 03ba C4F888E0 		str	lr, [r4, #136]
 3724              	.LBE222:
 3725              	.LBE253:
 3726              	.LBB254:
 3727              	.LBB238:
 3728              		.loc 1 475 0 discriminator 8
 3729 03be C4F80480 		str	r8, [r4, #4]
 3730 03c2 07FB01F8 		mul	r8, r7, r1
 3731 03c6 00FB1688 		mls	r8, r0, r6, r8
 3732 03ca D5F88400 		ldr	r0, [r5, #132]
 3733 03ce CDF81480 		str	r8, [sp, #20]
 3734 03d2 00FB03F8 		mul	r8, r0, r3
 3735 03d6 D5F88800 		ldr	r0, [r5, #136]
 3736 03da 7E43     		muls	r6, r7, r6
 3737 03dc 00FB0288 		mla	r8, r0, r2, r8
 3738 03e0 0598     		ldr	r0, [sp, #20]
 3739 03e2 8044     		add	r8, r0, r8
 3740 03e4 D5F89000 		ldr	r0, [r5, #144]
 3741 03e8 4FEAE838 		asr	r8, r8, #15
 3742 03ec 00FB0166 		mla	r6, r0, r1, r6
 3743 03f0 D5F88410 		ldr	r1, [r5, #132]
 3744 03f4 D5F88800 		ldr	r0, [r5, #136]
 3745 03f8 4A43     		muls	r2, r1, r2
 3746 03fa 00FB1322 		mls	r2, r0, r3, r2
 476:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* Compute LTP to IMU rotation matrix */
 477:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_COMP(ahrs.ltp_to_imu_rmat, ahrs.ltp_to_body_rmat, imu.body_to_imu_rmat);
 3747              		.loc 1 477 0 discriminator 8
 3748 03fe D5F89810 		ldr	r1, [r5, #152]
 475:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP(ahrs.ltp_to_imu_quat, ahrs.ltp_to_body_quat, imu.body_to_imu_quat);
 3749              		.loc 1 475 0 discriminator 8
 3750 0402 B618     		adds	r6, r6, r2
 3751 0404 F613     		asrs	r6, r6, #15
 3752 0406 E660     		str	r6, [r4, #12]
 3753              		.loc 1 477 0 discriminator 8
 3754 0408 0BFB01F6 		mul	r6, fp, r1
 3755 040c D5F89420 		ldr	r2, [r5, #148]
 3756 0410 0198     		ldr	r0, [sp, #4]
 3757 0412 D5F89C30 		ldr	r3, [r5, #156]
 3758 0416 00FB0266 		mla	r6, r0, r2, r6
 3759 041a 0298     		ldr	r0, [sp, #8]
 475:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_QUAT_COMP(ahrs.ltp_to_imu_quat, ahrs.ltp_to_body_quat, imu.body_to_imu_quat);
 3760              		.loc 1 475 0 discriminator 8
 3761 041c C4F80880 		str	r8, [r4, #8]
 3762              		.loc 1 477 0 discriminator 8
 3763 0420 00FB0366 		mla	r6, r0, r3, r6
 3764 0424 B613     		asrs	r6, r6, #14
 3765 0426 0596     		str	r6, [sp, #20]
 3766 0428 E661     		str	r6, [r4, #28]
 3767 042a 049E     		ldr	r6, [sp, #16]
 3768 042c 0398     		ldr	r0, [sp, #12]
 3769 042e 06FB01F7 		mul	r7, r6, r1
 3770 0432 09FB01F1 		mul	r1, r9, r1
 3771 0436 0CFB0211 		mla	r1, ip, r2, r1
 3772 043a 0EFB0311 		mla	r1, lr, r3, r1
 3773 043e 0AFB0277 		mla	r7, sl, r2, r7
 3774 0442 4FEAA138 		asr	r8, r1, #14
 3775 0446 D5F8A410 		ldr	r1, [r5, #164]
 3776 044a D5F8A020 		ldr	r2, [r5, #160]
 3777 044e 0BFB01F6 		mul	r6, fp, r1
 3778 0452 00FB0377 		mla	r7, r0, r3, r7
 3779 0456 0198     		ldr	r0, [sp, #4]
 3780 0458 D5F8A830 		ldr	r3, [r5, #168]
 3781 045c 00FB0266 		mla	r6, r0, r2, r6
 3782 0460 0298     		ldr	r0, [sp, #8]
 3783 0462 BF13     		asrs	r7, r7, #14
 3784 0464 00FB0366 		mla	r6, r0, r3, r6
 3785 0468 B013     		asrs	r0, r6, #14
 3786 046a A062     		str	r0, [r4, #40]
 3787 046c 0498     		ldr	r0, [sp, #16]
 3788 046e 2762     		str	r7, [r4, #32]
 3789 0470 00FB01F6 		mul	r6, r0, r1
 3790 0474 09FB01F1 		mul	r1, r9, r1
 3791 0478 0AFB0266 		mla	r6, sl, r2, r6
 3792 047c 0CFB0211 		mla	r1, ip, r2, r1
 3793 0480 0398     		ldr	r0, [sp, #12]
 3794 0482 0EFB0311 		mla	r1, lr, r3, r1
 3795 0486 00FB0366 		mla	r6, r0, r3, r6
 3796 048a B013     		asrs	r0, r6, #14
 3797 048c E062     		str	r0, [r4, #44]
 3798 048e 8813     		asrs	r0, r1, #14
 3799 0490 D5F8B010 		ldr	r1, [r5, #176]
 3800 0494 D5F8AC20 		ldr	r2, [r5, #172]
 3801 0498 0BFB01FB 		mul	fp, fp, r1
 3802 049c 019E     		ldr	r6, [sp, #4]
 3803 049e D5F8B430 		ldr	r3, [r5, #180]
 3804 04a2 06FB02BB 		mla	fp, r6, r2, fp
 3805 04a6 029E     		ldr	r6, [sp, #8]
 3806 04a8 C4F82480 		str	r8, [r4, #36]
 3807 04ac 06FB03BB 		mla	fp, r6, r3, fp
 3808 04b0 4FEAAB3B 		asr	fp, fp, #14
 3809 04b4 2063     		str	r0, [r4, #48]
 3810 04b6 C4F834B0 		str	fp, [r4, #52]
 3811 04ba 049E     		ldr	r6, [sp, #16]
 3812 04bc 09FB01F9 		mul	r9, r9, r1
 3813 04c0 06FB01FB 		mul	fp, r6, r1
 3814 04c4 0CFB029C 		mla	ip, ip, r2, r9
 3815 04c8 0AFB02BA 		mla	sl, sl, r2, fp
 3816 04cc 039E     		ldr	r6, [sp, #12]
 3817 04ce 0EFB03CE 		mla	lr, lr, r3, ip
 3818 04d2 06FB03AA 		mla	sl, r6, r3, sl
 3819 04d6 4FEAAE39 		asr	r9, lr, #14
 3820 04da 4FEAAA3A 		asr	sl, sl, #14
 3821 04de C4F838A0 		str	sl, [r4, #56]
 3822 04e2 C4F83C90 		str	r9, [r4, #60]
 3823              	.LVL420:
 3824              	.LBB229:
 478:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* compute LTP to IMU eulers */
 479:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_RMAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_rmat);
 3825              		.loc 1 479 0 discriminator 8
 3826 04e6 FFF7FEFF 		bl	__aeabi_i2f
 3827              	.LVL421:
 3828 04ea 4FF06251 		mov	r1, #947912704
 3829 04ee FFF7FEFF 		bl	__aeabi_fmul
 3830 04f2 8246     		mov	sl, r0
 3831 04f4 4846     		mov	r0, r9
 3832 04f6 FFF7FEFF 		bl	__aeabi_i2f
 3833 04fa 4FF06251 		mov	r1, #947912704
 3834 04fe FFF7FEFF 		bl	__aeabi_fmul
 3835 0502 0146     		mov	r1, r0
 3836 0504 5046     		mov	r0, sl
 3837 0506 FFF7FEFF 		bl	atan2f
 3838 050a 8146     		mov	r9, r0
 3839              	.LVL422:
 3840 050c 4046     		mov	r0, r8
 3841              	.LVL423:
 3842 050e FFF7FEFF 		bl	__aeabi_i2f
 3843 0512 4FF06251 		mov	r1, #947912704
 3844 0516 FFF7FEFF 		bl	__aeabi_fmul
 3845 051a FFF7FEFF 		bl	asinf
 3846 051e 8046     		mov	r8, r0
 3847              	.LVL424:
 3848 0520 3846     		mov	r0, r7
 3849              	.LVL425:
 3850 0522 FFF7FEFF 		bl	__aeabi_i2f
 3851 0526 4FF06251 		mov	r1, #947912704
 3852 052a FFF7FEFF 		bl	__aeabi_fmul
 3853 052e 0746     		mov	r7, r0
 3854              	.LVL426:
 3855 0530 0598     		ldr	r0, [sp, #20]
 3856 0532 FFF7FEFF 		bl	__aeabi_i2f
 3857 0536 4FF06251 		mov	r1, #947912704
 3858 053a FFF7FEFF 		bl	__aeabi_fmul
 3859 053e 0146     		mov	r1, r0
 3860 0540 3846     		mov	r0, r7
 3861 0542 FFF7FEFF 		bl	atan2f
 3862 0546 4FF08B41 		mov	r1, #1166016512
 3863 054a 0646     		mov	r6, r0
 3864              	.LVL427:
 3865 054c 4846     		mov	r0, r9
 3866              	.LVL428:
 3867 054e FFF7FEFF 		bl	__aeabi_fmul
 3868 0552 FFF7FEFF 		bl	__aeabi_f2iz
 3869 0556 4FF08B41 		mov	r1, #1166016512
 3870 055a 2061     		str	r0, [r4, #16]
 3871 055c 04E0     		b	.L154
 3872              	.L155:
 3873 055e 00BF     		.align	2
 3874              	.L153:
 3875 0560 00000000 		.word	ahrs
 3876 0564 00000000 		.word	imu
 3877              	.L154:
 3878 0568 08F10040 		add	r0, r8, #-2147483648
 3879 056c FFF7FEFF 		bl	__aeabi_fmul
 3880 0570 FFF7FEFF 		bl	__aeabi_f2iz
 3881 0574 4FF08B41 		mov	r1, #1166016512
 3882 0578 6061     		str	r0, [r4, #20]
 3883 057a 3046     		mov	r0, r6
 3884 057c FFF7FEFF 		bl	__aeabi_fmul
 3885 0580 FFF7FEFF 		bl	__aeabi_f2iz
 3886              	.LBE229:
 480:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   /* compute IMU rates */
 481:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_RMAT_RATEMULT(ahrs.imu_rate, imu.body_to_imu_rmat, ahrs.body_rate);
 3887              		.loc 1 481 0 discriminator 8
 3888 0584 D4F89010 		ldr	r1, [r4, #144]
 3889              	.LBB230:
 479:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   INT32_EULERS_OF_RMAT(ahrs.ltp_to_imu_euler, ahrs.ltp_to_imu_rmat);
 3890              		.loc 1 479 0 discriminator 8
 3891 0588 A061     		str	r0, [r4, #24]
 3892              	.LBE230:
 3893              		.loc 1 481 0 discriminator 8
 3894 058a D5F89800 		ldr	r0, [r5, #152]
 3895 058e D4F88C20 		ldr	r2, [r4, #140]
 3896 0592 4843     		muls	r0, r1, r0
 3897 0594 D5F89460 		ldr	r6, [r5, #148]
 3898              	.LVL429:
 3899 0598 D4F89430 		ldr	r3, [r4, #148]
 3900 059c 06FB0200 		mla	r0, r6, r2, r0
 3901 05a0 D5F89C60 		ldr	r6, [r5, #156]
 3902 05a4 06FB0300 		mla	r0, r6, r3, r0
 3903 05a8 8013     		asrs	r0, r0, #14
 3904 05aa 2064     		str	r0, [r4, #64]
 3905 05ac D5F8A400 		ldr	r0, [r5, #164]
 3906 05b0 D5F8A060 		ldr	r6, [r5, #160]
 3907 05b4 4843     		muls	r0, r1, r0
 3908 05b6 06FB0200 		mla	r0, r6, r2, r0
 3909 05ba D5F8A860 		ldr	r6, [r5, #168]
 3910 05be 06FB0300 		mla	r0, r6, r3, r0
 3911 05c2 D5F8B060 		ldr	r6, [r5, #176]
 3912 05c6 8013     		asrs	r0, r0, #14
 3913 05c8 7143     		muls	r1, r6, r1
 3914 05ca 6064     		str	r0, [r4, #68]
 3915 05cc D5F8AC00 		ldr	r0, [r5, #172]
 3916 05d0 00FB0212 		mla	r2, r0, r2, r1
 3917 05d4 D5F8B410 		ldr	r1, [r5, #180]
 3918 05d8 01FB0323 		mla	r3, r1, r3, r2
 3919 05dc 9B13     		asrs	r3, r3, #14
 3920 05de A364     		str	r3, [r4, #72]
 3921              	.LBE238:
 3922              	.LBE254:
 433:subsystems/ahrs/ahrs_int_cmpl_quat.c ****   ahrs_impl.heading_aligned = TRUE;
 3923              		.loc 1 433 0 discriminator 8
 3924 05e0 034B     		ldr	r3, .L156
 3925 05e2 0122     		movs	r2, #1
 3926 05e4 83F84720 		strb	r2, [r3, #71]
 434:subsystems/ahrs/ahrs_int_cmpl_quat.c **** }
 3927              		.loc 1 434 0 discriminator 8
 3928 05e8 07B0     		add	sp, sp, #28
 3929 05ea BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 3930              	.L157:
 3931 05ee 00BF     		.align	2
 3932              	.L156:
 3933 05f0 00000000 		.word	.LANCHOR0
 3934              		.cfi_endproc
 3935              	.LFE19:
 3937              		.global	ahrs_impl
 3938              		.section	.bss.ahrs_impl,"aw",%nobits
 3939              		.align	3
 3940              		.set	.LANCHOR0,. + 0
 3943              	ahrs_impl:
 3944 0000 00000000 		.space	72
 3944      00000000 
 3944      00000000 
 3944      00000000 
 3944      00000000 
 3945              		.text
 3946              	.Letext0:
 3947              		.file 4 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 3948              		.file 5 "/home/uav/paparazzi/sw/include/std.h"
 3949              		.file 6 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 3950              		.file 7 "./math/pprz_algebra_int.h"
 3951              		.file 8 "./math/pprz_algebra_float.h"
 3952              		.file 9 "./subsystems/ahrs.h"
 3953              		.file 10 "./subsystems/ahrs/ahrs_int_cmpl_quat.h"
 3954              		.file 11 "./subsystems/ahrs/ahrs_aligner.h"
 3955              		.file 12 "./subsystems/imu.h"
 3956              		.file 13 "./subsystems/imu/imu_aspirin2.h"
 3957              		.file 14 "./math/pprz_trig_int.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ahrs_int_cmpl_quat.c
     /tmp/ccyy3VRC.s:21     .text.ahrs_init:0000000000000000 $t
     /tmp/ccyy3VRC.s:26     .text.ahrs_init:0000000000000000 ahrs_init
     /tmp/ccyy3VRC.s:207    .text.ahrs_init:0000000000000150 $d
     /tmp/ccyy3VRC.s:227    .text.ahrs_align:0000000000000000 $t
     /tmp/ccyy3VRC.s:232    .text.ahrs_align:0000000000000000 ahrs_align
     /tmp/ccyy3VRC.s:468    .text.ahrs_align:0000000000000180 $d
     /tmp/ccyy3VRC.s:476    .text.ahrs_align:0000000000000190 $t
     /tmp/ccyy3VRC.s:826    .text.ahrs_align:0000000000000430 $d
     /tmp/ccyy3VRC.s:839    .text.ahrs_align:0000000000000454 $t
     /tmp/ccyy3VRC.s:1393   .text.ahrs_align:0000000000000928 $d
     /tmp/ccyy3VRC.s:1397   .text.ahrs_align:0000000000000934 $t
     /tmp/ccyy3VRC.s:1531   .text.ahrs_align:0000000000000a58 $d
     /tmp/ccyy3VRC.s:1536   .text.ahrs_propagate:0000000000000000 $t
     /tmp/ccyy3VRC.s:1541   .text.ahrs_propagate:0000000000000000 ahrs_propagate
     /tmp/ccyy3VRC.s:1759   .text.ahrs_propagate:000000000000012c $d
     /tmp/ccyy3VRC.s:1766   .text.ahrs_propagate:0000000000000138 $t
     /tmp/ccyy3VRC.s:2184   .text.ahrs_propagate:00000000000004c8 $d
     /tmp/ccyy3VRC.s:2187   .text.ahrs_propagate:00000000000004d0 $t
     /tmp/ccyy3VRC.s:2244   .text.ahrs_update_accel:0000000000000000 $t
     /tmp/ccyy3VRC.s:2249   .text.ahrs_update_accel:0000000000000000 ahrs_update_accel
     /tmp/ccyy3VRC.s:2559   .text.ahrs_update_accel:00000000000001d8 $d
     /tmp/ccyy3VRC.s:2571   .text.ahrs_update_mag:0000000000000000 $t
     /tmp/ccyy3VRC.s:2576   .text.ahrs_update_mag:0000000000000000 ahrs_update_mag
     /tmp/ccyy3VRC.s:2727   .text.ahrs_update_mag:00000000000000c8 $d
     /tmp/ccyy3VRC.s:2734   .text.ahrs_update_gps:0000000000000000 $t
     /tmp/ccyy3VRC.s:2739   .text.ahrs_update_gps:0000000000000000 ahrs_update_gps
     /tmp/ccyy3VRC.s:2752   .text.ahrs_update_heading:0000000000000000 $t
     /tmp/ccyy3VRC.s:2757   .text.ahrs_update_heading:0000000000000000 ahrs_update_heading
     /tmp/ccyy3VRC.s:3025   .text.ahrs_update_heading:0000000000000154 $d
     /tmp/ccyy3VRC.s:3033   .text.ahrs_realign_heading:0000000000000000 $t
     /tmp/ccyy3VRC.s:3038   .text.ahrs_realign_heading:0000000000000000 ahrs_realign_heading
     /tmp/ccyy3VRC.s:3418   .text.ahrs_realign_heading:00000000000001c0 $d
     /tmp/ccyy3VRC.s:3425   .text.ahrs_realign_heading:00000000000001cc $t
     /tmp/ccyy3VRC.s:3875   .text.ahrs_realign_heading:0000000000000560 $d
     /tmp/ccyy3VRC.s:3878   .text.ahrs_realign_heading:0000000000000568 $t
     /tmp/ccyy3VRC.s:3933   .text.ahrs_realign_heading:00000000000005f0 $d
     /tmp/ccyy3VRC.s:3943   .bss.ahrs_impl:0000000000000000 ahrs_impl
     /tmp/ccyy3VRC.s:3939   .bss.ahrs_impl:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
     /tmp/ccyy3VRC.s:1535   .text.ahrs_align:0000000000000a5c $t

UNDEFINED SYMBOLS
__aeabi_i2f
__aeabi_fmul
__aeabi_f2iz
atan2f
asinf
ahrs
imu
__aeabi_fadd
__aeabi_f2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2f
__aeabi_dsub
__aeabi_dcmplt
__aeabi_dcmpgt
__aeabi_fsub
__aeabi_fcmpgt
__aeabi_fdiv
__aeabi_dadd
__aeabi_fcmplt
sqrtf
ahrs_aligner
ldiv
__aeabi_i2d
__aeabi_d2iz
pprz_trig_int
