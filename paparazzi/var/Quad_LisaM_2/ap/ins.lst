   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"ins.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ins_init,"ax",%progbits
  18              		.align	1
  19              		.global	ins_init
  20              		.thumb
  21              		.thumb_func
  23              	ins_init:
  24              	.LFB32:
  25              		.file 1 "subsystems/ins.c"
   1:subsystems/ins.c **** /*
   2:subsystems/ins.c ****  * Copyright (C) 2008-2010 The Paparazzi Team
   3:subsystems/ins.c ****  *
   4:subsystems/ins.c ****  * This file is part of paparazzi.
   5:subsystems/ins.c ****  *
   6:subsystems/ins.c ****  * paparazzi is free software; you can redistribute it and/or modify
   7:subsystems/ins.c ****  * it under the terms of the GNU General Public License as published by
   8:subsystems/ins.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:subsystems/ins.c ****  * any later version.
  10:subsystems/ins.c ****  *
  11:subsystems/ins.c ****  * paparazzi is distributed in the hope that it will be useful,
  12:subsystems/ins.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:subsystems/ins.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:subsystems/ins.c ****  * GNU General Public License for more details.
  15:subsystems/ins.c ****  *
  16:subsystems/ins.c ****  * You should have received a copy of the GNU General Public License
  17:subsystems/ins.c ****  * along with paparazzi; see the file COPYING.  If not, write to
  18:subsystems/ins.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  19:subsystems/ins.c ****  * Boston, MA 02111-1307, USA.
  20:subsystems/ins.c ****  */
  21:subsystems/ins.c **** 
  22:subsystems/ins.c **** #include "subsystems/ins.h"
  23:subsystems/ins.c **** 
  24:subsystems/ins.c **** #include "subsystems/imu.h"
  25:subsystems/ins.c **** #include "subsystems/sensors/baro.h"
  26:subsystems/ins.c **** #include "subsystems/gps.h"
  27:subsystems/ins.c **** 
  28:subsystems/ins.c **** #include "generated/airframe.h"
  29:subsystems/ins.c **** #include "math/pprz_algebra_int.h"
  30:subsystems/ins.c **** #include "math/pprz_algebra_float.h"
  31:subsystems/ins.c **** 
  32:subsystems/ins.c **** #include "subsystems/ahrs.h"
  33:subsystems/ins.c **** 
  34:subsystems/ins.c **** #if USE_VFF
  35:subsystems/ins.c **** #include "subsystems/ins/vf_float.h"
  36:subsystems/ins.c **** #endif
  37:subsystems/ins.c **** 
  38:subsystems/ins.c **** #if USE_HFF
  39:subsystems/ins.c **** #include "subsystems/ins/hf_float.h"
  40:subsystems/ins.c **** #endif
  41:subsystems/ins.c **** 
  42:subsystems/ins.c **** #ifdef SITL
  43:subsystems/ins.c **** #include "nps_fdm.h"
  44:subsystems/ins.c **** #include <stdio.h>
  45:subsystems/ins.c **** #endif
  46:subsystems/ins.c **** 
  47:subsystems/ins.c **** 
  48:subsystems/ins.c **** #include "math/pprz_geodetic_int.h"
  49:subsystems/ins.c **** 
  50:subsystems/ins.c **** #include "generated/flight_plan.h"
  51:subsystems/ins.c **** 
  52:subsystems/ins.c **** /* gps transformed to LTP-NED  */
  53:subsystems/ins.c **** struct LtpDef_i  ins_ltp_def;
  54:subsystems/ins.c ****          bool_t  ins_ltp_initialised;
  55:subsystems/ins.c **** struct NedCoor_i ins_gps_pos_cm_ned;
  56:subsystems/ins.c **** struct NedCoor_i ins_gps_speed_cm_s_ned;
  57:subsystems/ins.c **** #if USE_HFF
  58:subsystems/ins.c **** /* horizontal gps transformed to NED in meters as float */
  59:subsystems/ins.c **** struct FloatVect2 ins_gps_pos_m_ned;
  60:subsystems/ins.c **** struct FloatVect2 ins_gps_speed_m_s_ned;
  61:subsystems/ins.c **** #endif
  62:subsystems/ins.c **** bool_t ins_hf_realign;
  63:subsystems/ins.c **** 
  64:subsystems/ins.c **** /* barometer                   */
  65:subsystems/ins.c **** #if USE_VFF
  66:subsystems/ins.c **** int32_t ins_qfe;
  67:subsystems/ins.c **** bool_t  ins_baro_initialised;
  68:subsystems/ins.c **** int32_t ins_baro_alt;
  69:subsystems/ins.c **** #if USE_SONAR
  70:subsystems/ins.c **** bool_t  ins_update_on_agl;
  71:subsystems/ins.c **** int32_t ins_sonar_offset;
  72:subsystems/ins.c **** #endif
  73:subsystems/ins.c **** #endif
  74:subsystems/ins.c **** bool_t  ins_vf_realign;
  75:subsystems/ins.c **** 
  76:subsystems/ins.c **** /* output                      */
  77:subsystems/ins.c **** struct NedCoor_i ins_ltp_pos;
  78:subsystems/ins.c **** struct NedCoor_i ins_ltp_speed;
  79:subsystems/ins.c **** struct NedCoor_i ins_ltp_accel;
  80:subsystems/ins.c **** struct EnuCoor_i ins_enu_pos;
  81:subsystems/ins.c **** struct EnuCoor_i ins_enu_speed;
  82:subsystems/ins.c **** struct EnuCoor_i ins_enu_accel;
  83:subsystems/ins.c **** 
  84:subsystems/ins.c **** 
  85:subsystems/ins.c **** void ins_init() {
  26              		.loc 1 85 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  86:subsystems/ins.c **** #if USE_INS_NAV_INIT
  87:subsystems/ins.c ****   ins_ltp_initialised = TRUE;
  88:subsystems/ins.c **** 
  89:subsystems/ins.c ****   /** FIXME: should use the same code than MOVE_WP in firmwares/rotorcraft/datalink.c */
  90:subsystems/ins.c ****   struct LlaCoor_i llh_nav0; /* Height above the ellipsoid */
  91:subsystems/ins.c ****   llh_nav0.lat = INT32_RAD_OF_DEG(NAV_LAT0);
  92:subsystems/ins.c ****   llh_nav0.lon = INT32_RAD_OF_DEG(NAV_LON0);
  93:subsystems/ins.c ****   /* NAV_ALT0 = ground alt above msl, NAV_MSL0 = geoid-height (msl) over ellipsoid */
  94:subsystems/ins.c ****   llh_nav0.alt = NAV_ALT0 + NAV_MSL0;
  95:subsystems/ins.c **** 
  96:subsystems/ins.c ****   struct EcefCoor_i ecef_nav0;
  97:subsystems/ins.c ****   ecef_of_lla_i(&ecef_nav0, &llh_nav0);
  98:subsystems/ins.c **** 
  99:subsystems/ins.c ****   ltp_def_from_ecef_i(&ins_ltp_def, &ecef_nav0);
 100:subsystems/ins.c ****   ins_ltp_def.hmsl = NAV_ALT0;
 101:subsystems/ins.c **** #else
 102:subsystems/ins.c ****   ins_ltp_initialised  = FALSE;
  30              		.loc 1 102 0
  31 0000 134B     		ldr	r3, .L2
  85:subsystems/ins.c **** void ins_init() {
  32              		.loc 1 85 0
  33 0002 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 14, -4
  37              		.cfi_offset 4, -8
  38              		.loc 1 102 0
  39 0004 0024     		movs	r4, #0
  40 0006 1C70     		strb	r4, [r3, #0]
 103:subsystems/ins.c **** #endif
 104:subsystems/ins.c **** #if USE_VFF
 105:subsystems/ins.c ****   ins_baro_initialised = FALSE;
  41              		.loc 1 105 0
  42 0008 124B     		ldr	r3, .L2+4
 106:subsystems/ins.c **** #if USE_SONAR
 107:subsystems/ins.c ****   ins_update_on_agl = FALSE;
 108:subsystems/ins.c **** #endif
 109:subsystems/ins.c ****   vff_init(0., 0., 0.);
  43              		.loc 1 109 0
  44 000a 0020     		movs	r0, #0
 105:subsystems/ins.c ****   ins_baro_initialised = FALSE;
  45              		.loc 1 105 0
  46 000c 1C70     		strb	r4, [r3, #0]
  47              		.loc 1 109 0
  48 000e 0146     		mov	r1, r0
  49 0010 0246     		mov	r2, r0
  50 0012 FFF7FEFF 		bl	vff_init
 110:subsystems/ins.c **** #endif
 111:subsystems/ins.c ****   ins_vf_realign = FALSE;
  51              		.loc 1 111 0
  52 0016 104B     		ldr	r3, .L2+8
  53 0018 1C70     		strb	r4, [r3, #0]
 112:subsystems/ins.c ****   ins_hf_realign = FALSE;
  54              		.loc 1 112 0
  55 001a 104B     		ldr	r3, .L2+12
  56 001c 1C70     		strb	r4, [r3, #0]
 113:subsystems/ins.c **** #if USE_HFF
 114:subsystems/ins.c ****   b2_hff_init(0., 0., 0., 0.);
 115:subsystems/ins.c **** #endif
 116:subsystems/ins.c ****   INT32_VECT3_ZERO(ins_ltp_pos);
  57              		.loc 1 116 0
  58 001e 104B     		ldr	r3, .L2+16
  59 0020 1C60     		str	r4, [r3, #0]
  60 0022 5C60     		str	r4, [r3, #4]
  61 0024 9C60     		str	r4, [r3, #8]
 117:subsystems/ins.c ****   INT32_VECT3_ZERO(ins_ltp_speed);
  62              		.loc 1 117 0
  63 0026 0F4B     		ldr	r3, .L2+20
  64 0028 1C60     		str	r4, [r3, #0]
  65 002a 5C60     		str	r4, [r3, #4]
  66 002c 9C60     		str	r4, [r3, #8]
 118:subsystems/ins.c ****   INT32_VECT3_ZERO(ins_ltp_accel);
  67              		.loc 1 118 0
  68 002e 0E4B     		ldr	r3, .L2+24
  69 0030 1C60     		str	r4, [r3, #0]
  70 0032 5C60     		str	r4, [r3, #4]
  71 0034 9C60     		str	r4, [r3, #8]
 119:subsystems/ins.c ****   INT32_VECT3_ZERO(ins_enu_pos);
  72              		.loc 1 119 0
  73 0036 0D4B     		ldr	r3, .L2+28
  74 0038 1C60     		str	r4, [r3, #0]
  75 003a 5C60     		str	r4, [r3, #4]
  76 003c 9C60     		str	r4, [r3, #8]
 120:subsystems/ins.c ****   INT32_VECT3_ZERO(ins_enu_speed);
  77              		.loc 1 120 0
  78 003e 0C4B     		ldr	r3, .L2+32
  79 0040 1C60     		str	r4, [r3, #0]
  80 0042 5C60     		str	r4, [r3, #4]
  81 0044 9C60     		str	r4, [r3, #8]
 121:subsystems/ins.c ****   INT32_VECT3_ZERO(ins_enu_accel);
  82              		.loc 1 121 0
  83 0046 0B4B     		ldr	r3, .L2+36
  84 0048 1C60     		str	r4, [r3, #0]
  85 004a 5C60     		str	r4, [r3, #4]
  86 004c 9C60     		str	r4, [r3, #8]
 122:subsystems/ins.c **** }
  87              		.loc 1 122 0
  88 004e 10BD     		pop	{r4, pc}
  89              	.L3:
  90              		.align	2
  91              	.L2:
  92 0050 00000000 		.word	.LANCHOR0
  93 0054 00000000 		.word	.LANCHOR1
  94 0058 00000000 		.word	.LANCHOR2
  95 005c 00000000 		.word	.LANCHOR3
  96 0060 00000000 		.word	.LANCHOR4
  97 0064 00000000 		.word	.LANCHOR5
  98 0068 00000000 		.word	.LANCHOR6
  99 006c 00000000 		.word	.LANCHOR7
 100 0070 00000000 		.word	.LANCHOR8
 101 0074 00000000 		.word	.LANCHOR9
 102              		.cfi_endproc
 103              	.LFE32:
 105              		.section	.text.ins_periodic,"ax",%progbits
 106              		.align	1
 107              		.global	ins_periodic
 108              		.thumb
 109              		.thumb_func
 111              	ins_periodic:
 112              	.LFB33:
 123:subsystems/ins.c **** 
 124:subsystems/ins.c **** void ins_periodic( void ) {
 113              		.loc 1 124 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 125:subsystems/ins.c **** }
 118              		.loc 1 125 0
 119 0000 7047     		bx	lr
 120              		.cfi_endproc
 121              	.LFE33:
 123              		.section	.text.ins_realign_h,"ax",%progbits
 124              		.align	1
 125              		.global	ins_realign_h
 126              		.thumb
 127              		.thumb_func
 129              	ins_realign_h:
 130              	.LFB34:
 126:subsystems/ins.c **** 
 127:subsystems/ins.c **** #if USE_HFF
 128:subsystems/ins.c **** void ins_realign_h(struct FloatVect2 pos, struct FloatVect2 speed) {
 129:subsystems/ins.c ****   b2_hff_realign(pos, speed);
 130:subsystems/ins.c **** }
 131:subsystems/ins.c **** #else
 132:subsystems/ins.c **** void ins_realign_h(struct FloatVect2 pos __attribute__ ((unused)), struct FloatVect2 speed __attrib
 131              		.loc 1 132 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 16
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 136              	.LCFI1:
 137              		.cfi_def_cfa_offset 24
 138              		.cfi_offset 14, -4
 139              		.cfi_offset 4, -8
 140              		.cfi_offset 3, -12
 141              		.cfi_offset 2, -16
 142              		.cfi_offset 1, -20
 143              		.cfi_offset 0, -24
 144              		.loc 1 132 0
 145 0002 04AC     		add	r4, sp, #16
 146 0004 04E90300 		stmdb	r4, {r0, r1}
 147 0008 8DE80C00 		stmia	sp, {r2, r3}
 148 000c 1FBD     		pop	{r0, r1, r2, r3, r4, pc}
 149              		.cfi_endproc
 150              	.LFE34:
 152              		.section	.text.ins_realign_v,"ax",%progbits
 153              		.align	1
 154              		.global	ins_realign_v
 155              		.thumb
 156              		.thumb_func
 158              	ins_realign_v:
 159              	.LFB35:
 133:subsystems/ins.c **** #endif /* USE_HFF */
 134:subsystems/ins.c **** 
 135:subsystems/ins.c **** 
 136:subsystems/ins.c **** void ins_realign_v(float z) {
 160              		.loc 1 136 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		@ link register save eliminated.
 165              	.LVL0:
 137:subsystems/ins.c **** #if USE_VFF
 138:subsystems/ins.c ****   vff_realign(z);
 139:subsystems/ins.c **** #endif
 140:subsystems/ins.c **** }
 166              		.loc 1 140 0
 138:subsystems/ins.c ****   vff_realign(z);
 167              		.loc 1 138 0
 168 0000 FFF7FEBF 		b	vff_realign
 169              	.LVL1:
 170              		.cfi_endproc
 171              	.LFE35:
 173              		.global	__aeabi_i2f
 174              		.global	__aeabi_fmul
 175              		.global	__aeabi_f2iz
 176              		.global	__aeabi_i2d
 177              		.global	__aeabi_dadd
 178              		.global	__aeabi_d2iz
 179              		.section	.text.ins_propagate,"ax",%progbits
 180              		.align	1
 181              		.global	ins_propagate
 182              		.thumb
 183              		.thumb_func
 185              	ins_propagate:
 186              	.LFB36:
 141:subsystems/ins.c **** 
 142:subsystems/ins.c **** void ins_propagate() {
 187              		.loc 1 142 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 192              	.LCFI2:
 193              		.cfi_def_cfa_offset 24
 194              		.cfi_offset 14, -4
 195              		.cfi_offset 7, -8
 196              		.cfi_offset 6, -12
 197              		.cfi_offset 5, -16
 198              		.cfi_offset 4, -20
 199              		.cfi_offset 3, -24
 143:subsystems/ins.c ****   /* untilt accels */
 144:subsystems/ins.c ****   struct Int32Vect3 accel_meas_body;
 145:subsystems/ins.c ****   INT32_RMAT_TRANSP_VMULT(accel_meas_body, imu.body_to_imu_rmat, imu.accel);
 200              		.loc 1 145 0
 201 0002 4F4B     		ldr	r3, .L11+8
 202 0004 1D69     		ldr	r5, [r3, #16]
 203 0006 D3F8A010 		ldr	r1, [r3, #160]
 204 000a DC68     		ldr	r4, [r3, #12]
 205 000c 6943     		muls	r1, r5, r1
 206 000e D3F89420 		ldr	r2, [r3, #148]
 207 0012 D3F8A460 		ldr	r6, [r3, #164]
 208 0016 02FB0411 		mla	r1, r2, r4, r1
 209 001a 5869     		ldr	r0, [r3, #20]
 210 001c D3F8AC20 		ldr	r2, [r3, #172]
 211 0020 6E43     		muls	r6, r5, r6
 212 0022 02FB0011 		mla	r1, r2, r0, r1
 213 0026 D3F89820 		ldr	r2, [r3, #152]
 214 002a D3F8A870 		ldr	r7, [r3, #168]
 215 002e 02FB0466 		mla	r6, r2, r4, r6
 216 0032 7D43     		muls	r5, r7, r5
 217 0034 D3F8B020 		ldr	r2, [r3, #176]
 218 0038 8913     		asrs	r1, r1, #14
 219              	.LVL2:
 220 003a 02FB0066 		mla	r6, r2, r0, r6
 221 003e D3F89C20 		ldr	r2, [r3, #156]
 222 0042 B613     		asrs	r6, r6, #14
 223              	.LVL3:
 224 0044 02FB0454 		mla	r4, r2, r4, r5
 225 0048 D3F8B420 		ldr	r2, [r3, #180]
 146:subsystems/ins.c ****   struct Int32Vect3 accel_meas_ltp;
 147:subsystems/ins.c ****   INT32_RMAT_TRANSP_VMULT(accel_meas_ltp, ahrs.ltp_to_body_rmat, accel_meas_body);
 226              		.loc 1 147 0
 227 004c 3D4B     		ldr	r3, .L11+12
 145:subsystems/ins.c ****   INT32_RMAT_TRANSP_VMULT(accel_meas_body, imu.body_to_imu_rmat, imu.accel);
 228              		.loc 1 145 0
 229 004e 02FB0042 		mla	r2, r2, r0, r4
 230              		.loc 1 147 0
 231 0052 5C6F     		ldr	r4, [r3, #116]
 232 0054 986E     		ldr	r0, [r3, #104]
 233 0056 7443     		muls	r4, r6, r4
 234 0058 9D6F     		ldr	r5, [r3, #120]
 235 005a 00FB0144 		mla	r4, r0, r1, r4
 236 005e 7543     		muls	r5, r6, r5
 237 0060 D3F88000 		ldr	r0, [r3, #128]
 145:subsystems/ins.c ****   INT32_RMAT_TRANSP_VMULT(accel_meas_body, imu.body_to_imu_rmat, imu.accel);
 238              		.loc 1 145 0
 239 0064 9213     		asrs	r2, r2, #14
 240              	.LVL4:
 241              		.loc 1 147 0
 242 0066 00FB0244 		mla	r4, r0, r2, r4
 243 006a D86E     		ldr	r0, [r3, #108]
 244 006c DF6F     		ldr	r7, [r3, #124]
 245 006e 00FB0155 		mla	r5, r0, r1, r5
 246 0072 7E43     		muls	r6, r7, r6
 247              	.LVL5:
 248 0074 D3F88400 		ldr	r0, [r3, #132]
 249 0078 A413     		asrs	r4, r4, #14
 250              	.LVL6:
 251 007a 00FB0255 		mla	r5, r0, r2, r5
 252 007e 186F     		ldr	r0, [r3, #112]
 253 0080 AD13     		asrs	r5, r5, #14
 254              	.LVL7:
 255 0082 00FB0161 		mla	r1, r0, r1, r6
 256              	.LVL8:
 257 0086 D3F88800 		ldr	r0, [r3, #136]
 148:subsystems/ins.c **** 
 149:subsystems/ins.c **** #if USE_VFF
 150:subsystems/ins.c ****   float z_accel_meas_float = ACCEL_FLOAT_OF_BFP(accel_meas_ltp.z);
 151:subsystems/ins.c ****   if (baro.status == BS_RUNNING && ins_baro_initialised) {
 258              		.loc 1 151 0
 259 008a 2F4B     		ldr	r3, .L11+16
 147:subsystems/ins.c ****   INT32_RMAT_TRANSP_VMULT(accel_meas_ltp, ahrs.ltp_to_body_rmat, accel_meas_body);
 260              		.loc 1 147 0
 261 008c 00FB0212 		mla	r2, r0, r2, r1
 262              	.LVL9:
 263              		.loc 1 151 0
 264 0090 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 147:subsystems/ins.c ****   INT32_RMAT_TRANSP_VMULT(accel_meas_ltp, ahrs.ltp_to_body_rmat, accel_meas_body);
 265              		.loc 1 147 0
 266 0092 9013     		asrs	r0, r2, #14
 267              	.LVL10:
 268              		.loc 1 151 0
 269 0094 012B     		cmp	r3, #1
 270 0096 28D1     		bne	.L8
 271              		.loc 1 151 0 is_stmt 0 discriminator 1
 272 0098 2C4B     		ldr	r3, .L11+20
 273 009a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 274 009c 2BB3     		cbz	r3, .L8
 150:subsystems/ins.c ****   float z_accel_meas_float = ACCEL_FLOAT_OF_BFP(accel_meas_ltp.z);
 275              		.loc 1 150 0 is_stmt 1
 276 009e FFF7FEFF 		bl	__aeabi_i2f
 277              	.LVL11:
 278 00a2 4FF06A51 		mov	r1, #981467136
 279 00a6 FFF7FEFF 		bl	__aeabi_fmul
 152:subsystems/ins.c ****     vff_propagate(z_accel_meas_float);
 280              		.loc 1 152 0
 281 00aa FFF7FEFF 		bl	vff_propagate
 153:subsystems/ins.c ****     ins_ltp_accel.z = ACCEL_BFP_OF_REAL(vff_zdotdot);
 282              		.loc 1 153 0
 283 00ae 284B     		ldr	r3, .L11+24
 284 00b0 4FF08941 		mov	r1, #1149239296
 285 00b4 1868     		ldr	r0, [r3, #0]	@ float
 286 00b6 FFF7FEFF 		bl	__aeabi_fmul
 287 00ba FFF7FEFF 		bl	__aeabi_f2iz
 288 00be 254B     		ldr	r3, .L11+28
 154:subsystems/ins.c ****     ins_ltp_speed.z = SPEED_BFP_OF_REAL(vff_zdot);
 289              		.loc 1 154 0
 290 00c0 4FF09241 		mov	r1, #1224736768
 153:subsystems/ins.c ****     ins_ltp_accel.z = ACCEL_BFP_OF_REAL(vff_zdotdot);
 291              		.loc 1 153 0
 292 00c4 9860     		str	r0, [r3, #8]
 293              		.loc 1 154 0
 294 00c6 244B     		ldr	r3, .L11+32
 295 00c8 1868     		ldr	r0, [r3, #0]	@ float
 296 00ca FFF7FEFF 		bl	__aeabi_fmul
 297 00ce FFF7FEFF 		bl	__aeabi_f2iz
 298 00d2 224B     		ldr	r3, .L11+36
 155:subsystems/ins.c ****     ins_ltp_pos.z   = POS_BFP_OF_REAL(vff_z);
 299              		.loc 1 155 0
 300 00d4 4FF08741 		mov	r1, #1132462080
 154:subsystems/ins.c ****     ins_ltp_speed.z = SPEED_BFP_OF_REAL(vff_zdot);
 301              		.loc 1 154 0
 302 00d8 9860     		str	r0, [r3, #8]
 303              		.loc 1 155 0
 304 00da 214B     		ldr	r3, .L11+40
 305 00dc 1868     		ldr	r0, [r3, #0]	@ float
 306 00de FFF7FEFF 		bl	__aeabi_fmul
 307 00e2 FFF7FEFF 		bl	__aeabi_f2iz
 308 00e6 1F4B     		ldr	r3, .L11+44
 309 00e8 09E0     		b	.L10
 310              	.LVL12:
 311              	.L8:
 156:subsystems/ins.c ****   }
 157:subsystems/ins.c ****   else { // feed accel from the sensors
 158:subsystems/ins.c ****     // subtract -9.81m/s2 (acceleration measured due to gravity, but vehivle not accelerating in lt
 159:subsystems/ins.c ****     ins_ltp_accel.z = accel_meas_ltp.z + ACCEL_BFP_OF_REAL(9.81);
 312              		.loc 1 159 0
 313 00ea FFF7FEFF 		bl	__aeabi_i2d
 314              	.LVL13:
 315 00ee 12A3     		adr	r3, .L11
 316 00f0 D3E90023 		ldrd	r2, [r3]
 317 00f4 FFF7FEFF 		bl	__aeabi_dadd
 318 00f8 FFF7FEFF 		bl	__aeabi_d2iz
 319 00fc 154B     		ldr	r3, .L11+28
 320              	.L10:
 160:subsystems/ins.c ****   }
 161:subsystems/ins.c **** #else
 162:subsystems/ins.c ****   ins_ltp_accel.z = accel_meas_ltp.z + ACCEL_BFP_OF_REAL(9.81);
 163:subsystems/ins.c **** #endif /* USE_VFF */
 164:subsystems/ins.c **** 
 165:subsystems/ins.c **** #if USE_HFF
 166:subsystems/ins.c ****   /* propagate horizontal filter */
 167:subsystems/ins.c ****   b2_hff_propagate();
 168:subsystems/ins.c **** #else
 169:subsystems/ins.c ****   ins_ltp_accel.x = accel_meas_ltp.x;
 170:subsystems/ins.c ****   ins_ltp_accel.y = accel_meas_ltp.y;
 171:subsystems/ins.c **** #endif /* USE_HFF */
 172:subsystems/ins.c **** 
 173:subsystems/ins.c ****   INT32_VECT3_ENU_OF_NED(ins_enu_pos, ins_ltp_pos);
 321              		.loc 1 173 0
 322 00fe 1949     		ldr	r1, .L11+44
 159:subsystems/ins.c ****     ins_ltp_accel.z = accel_meas_ltp.z + ACCEL_BFP_OF_REAL(9.81);
 323              		.loc 1 159 0
 324 0100 9860     		str	r0, [r3, #8]
 325              		.loc 1 173 0
 326 0102 4868     		ldr	r0, [r1, #4]
 327 0104 184B     		ldr	r3, .L11+48
 169:subsystems/ins.c ****   ins_ltp_accel.x = accel_meas_ltp.x;
 328              		.loc 1 169 0
 329 0106 134A     		ldr	r2, .L11+28
 330              		.loc 1 173 0
 331 0108 1860     		str	r0, [r3, #0]
 332 010a 0868     		ldr	r0, [r1, #0]
 333 010c 8968     		ldr	r1, [r1, #8]
 334 010e 5860     		str	r0, [r3, #4]
 335 0110 4942     		negs	r1, r1
 336 0112 9960     		str	r1, [r3, #8]
 174:subsystems/ins.c ****   INT32_VECT3_ENU_OF_NED(ins_enu_speed, ins_ltp_speed);
 337              		.loc 1 174 0
 338 0114 1149     		ldr	r1, .L11+36
 339 0116 154B     		ldr	r3, .L11+52
 340 0118 4868     		ldr	r0, [r1, #4]
 170:subsystems/ins.c ****   ins_ltp_accel.y = accel_meas_ltp.y;
 341              		.loc 1 170 0
 342 011a 82E83000 		stmia	r2, {r4, r5}
 343              		.loc 1 174 0
 344 011e 1860     		str	r0, [r3, #0]
 345 0120 0868     		ldr	r0, [r1, #0]
 346 0122 8968     		ldr	r1, [r1, #8]
 175:subsystems/ins.c ****   INT32_VECT3_ENU_OF_NED(ins_enu_accel, ins_ltp_accel);
 347              		.loc 1 175 0
 348 0124 9268     		ldr	r2, [r2, #8]
 174:subsystems/ins.c ****   INT32_VECT3_ENU_OF_NED(ins_enu_speed, ins_ltp_speed);
 349              		.loc 1 174 0
 350 0126 4942     		negs	r1, r1
 351 0128 5860     		str	r0, [r3, #4]
 352 012a 9960     		str	r1, [r3, #8]
 353              		.loc 1 175 0
 354 012c 104B     		ldr	r3, .L11+56
 355 012e 5242     		negs	r2, r2
 356 0130 1D60     		str	r5, [r3, #0]
 357 0132 5C60     		str	r4, [r3, #4]
 358 0134 9A60     		str	r2, [r3, #8]
 176:subsystems/ins.c **** }
 359              		.loc 1 176 0
 360 0136 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 361              	.L12:
 362              		.align	3
 363              	.L11:
 364 0138 1F85EB51 		.word	1374389535
 365 013c B89EC340 		.word	1086561976
 366 0140 00000000 		.word	imu
 367 0144 00000000 		.word	ahrs
 368 0148 00000000 		.word	baro
 369 014c 00000000 		.word	.LANCHOR1
 370 0150 00000000 		.word	vff_zdotdot
 371 0154 00000000 		.word	.LANCHOR6
 372 0158 00000000 		.word	vff_zdot
 373 015c 00000000 		.word	.LANCHOR5
 374 0160 00000000 		.word	vff_z
 375 0164 00000000 		.word	.LANCHOR4
 376 0168 00000000 		.word	.LANCHOR7
 377 016c 00000000 		.word	.LANCHOR8
 378 0170 00000000 		.word	.LANCHOR9
 379              		.cfi_endproc
 380              	.LFE36:
 382 0174 AFF30080 		.section	.text.ins_update_baro,"ax",%progbits
 383              		.align	1
 384              		.global	ins_update_baro
 385              		.thumb
 386              		.thumb_func
 388              	ins_update_baro:
 389              	.LFB37:
 177:subsystems/ins.c **** 
 178:subsystems/ins.c **** void ins_update_baro() {
 390              		.loc 1 178 0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 0, uses_anonymous_args = 0
 179:subsystems/ins.c **** #if USE_VFF
 180:subsystems/ins.c ****   if (baro.status == BS_RUNNING) {
 394              		.loc 1 180 0
 395 0000 2B4A     		ldr	r2, .L17
 178:subsystems/ins.c **** void ins_update_baro() {
 396              		.loc 1 178 0
 397 0002 38B5     		push	{r3, r4, r5, lr}
 398              	.LCFI3:
 399              		.cfi_def_cfa_offset 16
 400              		.cfi_offset 14, -4
 401              		.cfi_offset 5, -8
 402              		.cfi_offset 4, -12
 403              		.cfi_offset 3, -16
 404              		.loc 1 180 0
 405 0004 137A     		ldrb	r3, [r2, #8]	@ zero_extendqisi2
 406 0006 012B     		cmp	r3, #1
 407 0008 51D1     		bne	.L13
 181:subsystems/ins.c ****     if (!ins_baro_initialised) {
 408              		.loc 1 181 0
 409 000a 2A49     		ldr	r1, .L17+4
 410 000c 0878     		ldrb	r0, [r1, #0]	@ zero_extendqisi2
 411 000e 18B9     		cbnz	r0, .L15
 182:subsystems/ins.c ****       ins_qfe = baro.absolute;
 412              		.loc 1 182 0
 413 0010 1068     		ldr	r0, [r2, #0]
 414 0012 294A     		ldr	r2, .L17+8
 183:subsystems/ins.c ****       ins_baro_initialised = TRUE;
 415              		.loc 1 183 0
 416 0014 0B70     		strb	r3, [r1, #0]
 182:subsystems/ins.c ****       ins_qfe = baro.absolute;
 417              		.loc 1 182 0
 418 0016 1060     		str	r0, [r2, #0]
 419              	.L15:
 184:subsystems/ins.c ****     }
 185:subsystems/ins.c ****     if (ins_vf_realign) {
 420              		.loc 1 185 0
 421 0018 2849     		ldr	r1, .L17+12
 422 001a 254A     		ldr	r2, .L17
 423 001c 0878     		ldrb	r0, [r1, #0]	@ zero_extendqisi2
 424 001e 264B     		ldr	r3, .L17+8
 425 0020 0028     		cmp	r0, #0
 426 0022 30D0     		beq	.L16
 186:subsystems/ins.c ****       ins_vf_realign = FALSE;
 187:subsystems/ins.c ****       ins_qfe = baro.absolute;
 427              		.loc 1 187 0
 428 0024 1268     		ldr	r2, [r2, #0]
 186:subsystems/ins.c ****       ins_vf_realign = FALSE;
 429              		.loc 1 186 0
 430 0026 0020     		movs	r0, #0
 431              		.loc 1 187 0
 432 0028 1A60     		str	r2, [r3, #0]
 186:subsystems/ins.c ****       ins_vf_realign = FALSE;
 433              		.loc 1 186 0
 434 002a 0870     		strb	r0, [r1, #0]
 188:subsystems/ins.c **** #if USE_SONAR
 189:subsystems/ins.c ****       ins_sonar_offset = sonar_meas;
 190:subsystems/ins.c **** #endif
 191:subsystems/ins.c ****       vff_realign(0.);
 435              		.loc 1 191 0
 436 002c 0020     		movs	r0, #0
 437 002e FFF7FEFF 		bl	vff_realign
 192:subsystems/ins.c ****       ins_ltp_accel.z = ACCEL_BFP_OF_REAL(vff_zdotdot);
 438              		.loc 1 192 0
 439 0032 234B     		ldr	r3, .L17+16
 440 0034 4FF08941 		mov	r1, #1149239296
 441 0038 1868     		ldr	r0, [r3, #0]	@ float
 442 003a FFF7FEFF 		bl	__aeabi_fmul
 443 003e FFF7FEFF 		bl	__aeabi_f2iz
 444 0042 204B     		ldr	r3, .L17+20
 193:subsystems/ins.c ****       ins_ltp_speed.z = SPEED_BFP_OF_REAL(vff_zdot);
 445              		.loc 1 193 0
 446 0044 4FF09241 		mov	r1, #1224736768
 192:subsystems/ins.c ****       ins_ltp_accel.z = ACCEL_BFP_OF_REAL(vff_zdotdot);
 447              		.loc 1 192 0
 448 0048 9860     		str	r0, [r3, #8]
 449              		.loc 1 193 0
 450 004a 1F4B     		ldr	r3, .L17+24
 192:subsystems/ins.c ****       ins_ltp_accel.z = ACCEL_BFP_OF_REAL(vff_zdotdot);
 451              		.loc 1 192 0
 452 004c 0446     		mov	r4, r0
 453              		.loc 1 193 0
 454 004e 1868     		ldr	r0, [r3, #0]	@ float
 455 0050 FFF7FEFF 		bl	__aeabi_fmul
 456 0054 FFF7FEFF 		bl	__aeabi_f2iz
 457 0058 1C4B     		ldr	r3, .L17+28
 458 005a 0546     		mov	r5, r0
 459 005c 9860     		str	r0, [r3, #8]
 194:subsystems/ins.c ****       ins_ltp_pos.z   = POS_BFP_OF_REAL(vff_z);
 460              		.loc 1 194 0
 461 005e 1C4B     		ldr	r3, .L17+32
 462 0060 4FF08741 		mov	r1, #1132462080
 463 0064 1868     		ldr	r0, [r3, #0]	@ float
 464 0066 FFF7FEFF 		bl	__aeabi_fmul
 465 006a FFF7FEFF 		bl	__aeabi_f2iz
 466 006e 194B     		ldr	r3, .L17+36
 195:subsystems/ins.c ****       ins_enu_pos.z = -ins_ltp_pos.z;
 196:subsystems/ins.c ****       ins_enu_speed.z = -ins_ltp_speed.z;
 467              		.loc 1 196 0
 468 0070 6D42     		negs	r5, r5
 194:subsystems/ins.c ****       ins_ltp_pos.z   = POS_BFP_OF_REAL(vff_z);
 469              		.loc 1 194 0
 470 0072 9860     		str	r0, [r3, #8]
 195:subsystems/ins.c ****       ins_enu_pos.z = -ins_ltp_pos.z;
 471              		.loc 1 195 0
 472 0074 184B     		ldr	r3, .L17+40
 473 0076 4042     		negs	r0, r0
 474 0078 9860     		str	r0, [r3, #8]
 475              		.loc 1 196 0
 476 007a 184B     		ldr	r3, .L17+44
 197:subsystems/ins.c ****       ins_enu_accel.z = -ins_ltp_accel.z;
 477              		.loc 1 197 0
 478 007c 6442     		negs	r4, r4
 196:subsystems/ins.c ****       ins_enu_speed.z = -ins_ltp_speed.z;
 479              		.loc 1 196 0
 480 007e 9D60     		str	r5, [r3, #8]
 481              		.loc 1 197 0
 482 0080 174B     		ldr	r3, .L17+48
 483 0082 9C60     		str	r4, [r3, #8]
 484 0084 38BD     		pop	{r3, r4, r5, pc}
 485              	.L16:
 486              	.LBB2:
 198:subsystems/ins.c ****     }
 199:subsystems/ins.c ****     else { /* not realigning, so normal update with baro measurement */
 200:subsystems/ins.c ****       ins_baro_alt = ((baro.absolute - ins_qfe) * INS_BARO_SENS_NUM)/INS_BARO_SENS_DEN;
 487              		.loc 1 200 0
 488 0086 1068     		ldr	r0, [r2, #0]
 489 0088 1B68     		ldr	r3, [r3, #0]
 490 008a C01A     		subs	r0, r0, r3
 491 008c DF23     		movs	r3, #223
 492 008e 5843     		muls	r0, r3, r0
 493 0090 0A23     		movs	r3, #10
 494 0092 90FBF3F0 		sdiv	r0, r0, r3
 495 0096 134B     		ldr	r3, .L17+52
 496 0098 1860     		str	r0, [r3, #0]
 497              	.LVL14:
 201:subsystems/ins.c ****       float alt_float = POS_FLOAT_OF_BFP(ins_baro_alt);
 498              		.loc 1 201 0
 499 009a FFF7FEFF 		bl	__aeabi_i2f
 500              	.LVL15:
 501 009e 4FF06E51 		mov	r1, #998244352
 502 00a2 FFF7FEFF 		bl	__aeabi_fmul
 503              	.LBE2:
 202:subsystems/ins.c ****       vff_update(alt_float);
 203:subsystems/ins.c ****     }
 204:subsystems/ins.c ****   }
 205:subsystems/ins.c **** #endif
 206:subsystems/ins.c **** }
 504              		.loc 1 206 0
 505 00a6 BDE83840 		pop	{r3, r4, r5, lr}
 506              	.LBB3:
 202:subsystems/ins.c ****       vff_update(alt_float);
 507              		.loc 1 202 0
 508 00aa FFF7FEBF 		b	vff_update
 509              	.L13:
 510 00ae 38BD     		pop	{r3, r4, r5, pc}
 511              	.L18:
 512              		.align	2
 513              	.L17:
 514 00b0 00000000 		.word	baro
 515 00b4 00000000 		.word	.LANCHOR1
 516 00b8 00000000 		.word	.LANCHOR10
 517 00bc 00000000 		.word	.LANCHOR2
 518 00c0 00000000 		.word	vff_zdotdot
 519 00c4 00000000 		.word	.LANCHOR6
 520 00c8 00000000 		.word	vff_zdot
 521 00cc 00000000 		.word	.LANCHOR5
 522 00d0 00000000 		.word	vff_z
 523 00d4 00000000 		.word	.LANCHOR4
 524 00d8 00000000 		.word	.LANCHOR7
 525 00dc 00000000 		.word	.LANCHOR8
 526 00e0 00000000 		.word	.LANCHOR9
 527 00e4 00000000 		.word	.LANCHOR11
 528              	.LBE3:
 529              		.cfi_endproc
 530              	.LFE37:
 532              		.section	.text.ins_update_gps,"ax",%progbits
 533              		.align	1
 534              		.global	ins_update_gps
 535              		.thumb
 536              		.thumb_func
 538              	ins_update_gps:
 539              	.LFB38:
 207:subsystems/ins.c **** 
 208:subsystems/ins.c **** 
 209:subsystems/ins.c **** void ins_update_gps(void) {
 540              		.loc 1 209 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 545              	.LCFI4:
 546              		.cfi_def_cfa_offset 24
 547              		.cfi_offset 14, -4
 548              		.cfi_offset 7, -8
 549              		.cfi_offset 6, -12
 550              		.cfi_offset 5, -16
 551              		.cfi_offset 4, -20
 552              		.cfi_offset 3, -24
 210:subsystems/ins.c **** #if USE_GPS
 211:subsystems/ins.c ****   if (gps.fix == GPS_FIX_3D) {
 553              		.loc 1 211 0
 554 0002 274C     		ldr	r4, .L22
 555 0004 94F85B30 		ldrb	r3, [r4, #91]	@ zero_extendqisi2
 556 0008 032B     		cmp	r3, #3
 557 000a 48D1     		bne	.L19
 212:subsystems/ins.c ****     if (!ins_ltp_initialised) {
 558              		.loc 1 212 0
 559 000c 254E     		ldr	r6, .L22+4
 560 000e 3378     		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 561 0010 53B9     		cbnz	r3, .L21
 213:subsystems/ins.c ****       ltp_def_from_ecef_i(&ins_ltp_def, &gps.ecef_pos);
 562              		.loc 1 213 0
 563 0012 254D     		ldr	r5, .L22+8
 564 0014 2146     		mov	r1, r4
 565 0016 2846     		mov	r0, r5
 566 0018 FFF7FEFF 		bl	ltp_def_from_ecef_i
 214:subsystems/ins.c ****       ins_ltp_def.lla.alt = gps.lla_pos.alt;
 567              		.loc 1 214 0
 568 001c 6369     		ldr	r3, [r4, #20]
 569 001e 6B61     		str	r3, [r5, #20]
 215:subsystems/ins.c ****       ins_ltp_def.hmsl = gps.hmsl;
 570              		.loc 1 215 0
 571 0020 A36A     		ldr	r3, [r4, #40]
 572 0022 EB63     		str	r3, [r5, #60]
 216:subsystems/ins.c ****       ins_ltp_initialised = TRUE;
 573              		.loc 1 216 0
 574 0024 0123     		movs	r3, #1
 575 0026 3370     		strb	r3, [r6, #0]
 576              	.L21:
 217:subsystems/ins.c ****     }
 218:subsystems/ins.c ****     ned_of_ecef_point_i(&ins_gps_pos_cm_ned, &ins_ltp_def, &gps.ecef_pos);
 577              		.loc 1 218 0
 578 0028 204D     		ldr	r5, .L22+12
 219:subsystems/ins.c ****     ned_of_ecef_vect_i(&ins_gps_speed_cm_s_ned, &ins_ltp_def, &gps.ecef_vel);
 579              		.loc 1 219 0
 580 002a 214C     		ldr	r4, .L22+16
 218:subsystems/ins.c ****     ned_of_ecef_point_i(&ins_gps_pos_cm_ned, &ins_ltp_def, &gps.ecef_pos);
 581              		.loc 1 218 0
 582 002c 2846     		mov	r0, r5
 583 002e 1E49     		ldr	r1, .L22+8
 584 0030 1B4A     		ldr	r2, .L22
 585 0032 FFF7FEFF 		bl	ned_of_ecef_point_i
 586              		.loc 1 219 0
 587 0036 2046     		mov	r0, r4
 588 0038 1B49     		ldr	r1, .L22+8
 589 003a 1E4A     		ldr	r2, .L22+20
 590 003c FFF7FEFF 		bl	ned_of_ecef_vect_i
 220:subsystems/ins.c **** #if USE_HFF
 221:subsystems/ins.c ****     VECT2_ASSIGN(ins_gps_pos_m_ned, ins_gps_pos_cm_ned.x, ins_gps_pos_cm_ned.y);
 222:subsystems/ins.c ****     VECT2_SDIV(ins_gps_pos_m_ned, ins_gps_pos_m_ned, 100.);
 223:subsystems/ins.c ****     VECT2_ASSIGN(ins_gps_speed_m_s_ned, ins_gps_speed_cm_s_ned.x, ins_gps_speed_cm_s_ned.y);
 224:subsystems/ins.c ****     VECT2_SDIV(ins_gps_speed_m_s_ned, ins_gps_speed_m_s_ned, 100.);
 225:subsystems/ins.c ****     if (ins_hf_realign) {
 226:subsystems/ins.c ****       ins_hf_realign = FALSE;
 227:subsystems/ins.c **** #ifdef SITL
 228:subsystems/ins.c ****       struct FloatVect2 true_pos, true_speed;
 229:subsystems/ins.c ****       VECT2_COPY(true_pos, fdm.ltpprz_pos);
 230:subsystems/ins.c ****       VECT2_COPY(true_speed, fdm.ltpprz_ecef_vel);
 231:subsystems/ins.c ****       b2_hff_realign(true_pos, true_speed);
 232:subsystems/ins.c **** #else
 233:subsystems/ins.c ****       const struct FloatVect2 zero = {0.0, 0.0};
 234:subsystems/ins.c ****       b2_hff_realign(ins_gps_pos_m_ned, zero);
 235:subsystems/ins.c **** #endif
 236:subsystems/ins.c ****     }
 237:subsystems/ins.c ****     b2_hff_update_gps();
 238:subsystems/ins.c **** #if !USE_VFF /* vff not used */
 239:subsystems/ins.c ****     ins_ltp_pos.z =  (ins_gps_pos_cm_ned.z * INT32_POS_OF_CM_NUM) / INT32_POS_OF_CM_DEN;
 240:subsystems/ins.c ****     ins_ltp_speed.z =  (ins_gps_speed_cm_s_ned.z * INT32_SPEED_OF_CM_S_NUM) INT32_SPEED_OF_CM_S_DEN
 241:subsystems/ins.c **** #endif /* vff not used */
 242:subsystems/ins.c **** #endif /* hff used */
 243:subsystems/ins.c **** 
 244:subsystems/ins.c **** 
 245:subsystems/ins.c **** #if !USE_HFF /* hff not used */
 246:subsystems/ins.c **** #if !USE_VFF /* neither hf nor vf used */
 247:subsystems/ins.c ****     INT32_VECT3_SCALE_3(ins_ltp_pos, ins_gps_pos_cm_ned, INT32_POS_OF_CM_NUM, INT32_POS_OF_CM_DEN);
 248:subsystems/ins.c ****     INT32_VECT3_SCALE_3(ins_ltp_speed, ins_gps_speed_cm_s_ned, INT32_SPEED_OF_CM_S_NUM, INT32_SPEED
 249:subsystems/ins.c **** #else /* only vff used */
 250:subsystems/ins.c ****     INT32_VECT2_SCALE_2(ins_ltp_pos, ins_gps_pos_cm_ned, INT32_POS_OF_CM_NUM, INT32_POS_OF_CM_DEN);
 251:subsystems/ins.c ****     INT32_VECT2_SCALE_2(ins_ltp_speed, ins_gps_speed_cm_s_ned, INT32_SPEED_OF_CM_S_NUM, INT32_SPEED
 591              		.loc 1 251 0
 592 0040 2068     		ldr	r0, [r4, #0]
 593 0042 6468     		ldr	r4, [r4, #4]
 250:subsystems/ins.c ****     INT32_VECT2_SCALE_2(ins_ltp_pos, ins_gps_pos_cm_ned, INT32_POS_OF_CM_NUM, INT32_POS_OF_CM_DEN);
 594              		.loc 1 250 0
 595 0044 2E68     		ldr	r6, [r5, #0]
 596              		.loc 1 251 0
 597 0046 4AF2D737 		movw	r7, #41943
 250:subsystems/ins.c ****     INT32_VECT2_SCALE_2(ins_ltp_pos, ins_gps_pos_cm_ned, INT32_POS_OF_CM_NUM, INT32_POS_OF_CM_DEN);
 598              		.loc 1 250 0
 599 004a 6D68     		ldr	r5, [r5, #4]
 600              		.loc 1 251 0
 601 004c 7843     		muls	r0, r7, r0
 602 004e 7C43     		muls	r4, r7, r4
 250:subsystems/ins.c ****     INT32_VECT2_SCALE_2(ins_ltp_pos, ins_gps_pos_cm_ned, INT32_POS_OF_CM_NUM, INT32_POS_OF_CM_DEN);
 603              		.loc 1 250 0
 604 0050 1923     		movs	r3, #25
 605 0052 1949     		ldr	r1, .L22+24
 606 0054 B601     		lsls	r6, r6, #6
 607 0056 AD01     		lsls	r5, r5, #6
 608 0058 96FBF3F6 		sdiv	r6, r6, r3
 609 005c 95FBF3F5 		sdiv	r5, r5, r3
 610              		.loc 1 251 0
 611 0060 164A     		ldr	r2, .L22+28
 612 0062 0823     		movs	r3, #8
 250:subsystems/ins.c ****     INT32_VECT2_SCALE_2(ins_ltp_pos, ins_gps_pos_cm_ned, INT32_POS_OF_CM_NUM, INT32_POS_OF_CM_DEN);
 613              		.loc 1 250 0
 614 0064 0E60     		str	r6, [r1, #0]
 615 0066 4D60     		str	r5, [r1, #4]
 252:subsystems/ins.c **** #endif
 253:subsystems/ins.c **** 
 254:subsystems/ins.c **** #if USE_GPS_LAG_HACK
 255:subsystems/ins.c ****     VECT2_COPY(d_pos, ins_ltp_speed);
 256:subsystems/ins.c ****     INT32_VECT2_RSHIFT(d_pos, d_pos, 11);
 257:subsystems/ins.c ****     VECT2_ADD(ins_ltp_pos, d_pos);
 258:subsystems/ins.c **** #endif
 259:subsystems/ins.c **** #endif /* hff not used */
 260:subsystems/ins.c **** 
 261:subsystems/ins.c ****     INT32_VECT3_ENU_OF_NED(ins_enu_pos, ins_ltp_pos);
 616              		.loc 1 261 0
 617 0068 8968     		ldr	r1, [r1, #8]
 251:subsystems/ins.c ****     INT32_VECT2_SCALE_2(ins_ltp_speed, ins_gps_speed_cm_s_ned, INT32_SPEED_OF_CM_S_NUM, INT32_SPEED
 618              		.loc 1 251 0
 619 006a 90FBF3F0 		sdiv	r0, r0, r3
 620 006e 94FBF3F4 		sdiv	r4, r4, r3
 621              		.loc 1 261 0
 622 0072 134B     		ldr	r3, .L22+32
 251:subsystems/ins.c ****     INT32_VECT2_SCALE_2(ins_ltp_speed, ins_gps_speed_cm_s_ned, INT32_SPEED_OF_CM_S_NUM, INT32_SPEED
 623              		.loc 1 251 0
 624 0074 1060     		str	r0, [r2, #0]
 625 0076 5460     		str	r4, [r2, #4]
 626              		.loc 1 261 0
 627 0078 4942     		negs	r1, r1
 262:subsystems/ins.c ****     INT32_VECT3_ENU_OF_NED(ins_enu_speed, ins_ltp_speed);
 628              		.loc 1 262 0
 629 007a 9268     		ldr	r2, [r2, #8]
 261:subsystems/ins.c ****     INT32_VECT3_ENU_OF_NED(ins_enu_pos, ins_ltp_pos);
 630              		.loc 1 261 0
 631 007c 83E86000 		stmia	r3, {r5, r6}
 632 0080 9960     		str	r1, [r3, #8]
 633              		.loc 1 262 0
 634 0082 104B     		ldr	r3, .L22+36
 635 0084 5242     		negs	r2, r2
 636 0086 9A60     		str	r2, [r3, #8]
 263:subsystems/ins.c ****     INT32_VECT3_ENU_OF_NED(ins_enu_accel, ins_ltp_accel);
 637              		.loc 1 263 0
 638 0088 0F4A     		ldr	r2, .L22+40
 262:subsystems/ins.c ****     INT32_VECT3_ENU_OF_NED(ins_enu_speed, ins_ltp_speed);
 639              		.loc 1 262 0
 640 008a 1C60     		str	r4, [r3, #0]
 641              		.loc 1 263 0
 642 008c 5168     		ldr	r1, [r2, #4]
 262:subsystems/ins.c ****     INT32_VECT3_ENU_OF_NED(ins_enu_speed, ins_ltp_speed);
 643              		.loc 1 262 0
 644 008e 5860     		str	r0, [r3, #4]
 645              		.loc 1 263 0
 646 0090 0E4B     		ldr	r3, .L22+44
 647 0092 1960     		str	r1, [r3, #0]
 648 0094 1168     		ldr	r1, [r2, #0]
 649 0096 9268     		ldr	r2, [r2, #8]
 650 0098 5960     		str	r1, [r3, #4]
 651 009a 5242     		negs	r2, r2
 652 009c 9A60     		str	r2, [r3, #8]
 653              	.L19:
 654 009e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 655              	.L23:
 656              		.align	2
 657              	.L22:
 658 00a0 00000000 		.word	gps
 659 00a4 00000000 		.word	.LANCHOR0
 660 00a8 00000000 		.word	.LANCHOR12
 661 00ac 00000000 		.word	.LANCHOR13
 662 00b0 00000000 		.word	.LANCHOR14
 663 00b4 2C000000 		.word	gps+44
 664 00b8 00000000 		.word	.LANCHOR4
 665 00bc 00000000 		.word	.LANCHOR5
 666 00c0 00000000 		.word	.LANCHOR7
 667 00c4 00000000 		.word	.LANCHOR8
 668 00c8 00000000 		.word	.LANCHOR6
 669 00cc 00000000 		.word	.LANCHOR9
 670              		.cfi_endproc
 671              	.LFE38:
 673              		.section	.text.ins_update_sonar,"ax",%progbits
 674              		.align	1
 675              		.global	ins_update_sonar
 676              		.thumb
 677              		.thumb_func
 679              	ins_update_sonar:
 680              	.LFB39:
 264:subsystems/ins.c ****   }
 265:subsystems/ins.c **** #endif /* USE_GPS */
 266:subsystems/ins.c **** }
 267:subsystems/ins.c **** 
 268:subsystems/ins.c **** void ins_update_sonar() {
 681              		.loc 1 268 0
 682              		.cfi_startproc
 683              		@ args = 0, pretend = 0, frame = 0
 684              		@ frame_needed = 0, uses_anonymous_args = 0
 685              		@ link register save eliminated.
 269:subsystems/ins.c **** #if USE_SONAR && USE_VFF
 270:subsystems/ins.c ****   static int32_t sonar_filtered = 0;
 271:subsystems/ins.c ****   sonar_filtered = (sonar_meas + 2*sonar_filtered) / 3;
 272:subsystems/ins.c ****   /* update baro_qfe assuming a flat ground */
 273:subsystems/ins.c ****   if (ins_update_on_agl && baro.status == BS_RUNNING) {
 274:subsystems/ins.c ****     int32_t d_sonar = (((int32_t)sonar_filtered - ins_sonar_offset) * INS_SONAR_SENS_NUM) / INS_SON
 275:subsystems/ins.c ****     ins_qfe = baro.absolute + (d_sonar * (INS_BARO_SENS_DEN))/INS_BARO_SENS_NUM;
 276:subsystems/ins.c ****   }
 277:subsystems/ins.c **** #endif
 278:subsystems/ins.c **** }
 686              		.loc 1 278 0
 687 0000 7047     		bx	lr
 688              		.cfi_endproc
 689              	.LFE39:
 691              		.global	ins_enu_accel
 692              		.global	ins_enu_speed
 693              		.global	ins_enu_pos
 694              		.global	ins_ltp_accel
 695              		.global	ins_ltp_speed
 696              		.global	ins_ltp_pos
 697              		.global	ins_vf_realign
 698              		.global	ins_baro_alt
 699              		.global	ins_baro_initialised
 700              		.global	ins_qfe
 701              		.global	ins_hf_realign
 702              		.global	ins_gps_speed_cm_s_ned
 703              		.global	ins_gps_pos_cm_ned
 704              		.global	ins_ltp_initialised
 705              		.global	ins_ltp_def
 706              		.section	.bss.ins_vf_realign,"aw",%nobits
 707              		.set	.LANCHOR2,. + 0
 710              	ins_vf_realign:
 711 0000 00       		.space	1
 712              		.section	.bss.ins_baro_initialised,"aw",%nobits
 713              		.set	.LANCHOR1,. + 0
 716              	ins_baro_initialised:
 717 0000 00       		.space	1
 718              		.section	.bss.ins_ltp_pos,"aw",%nobits
 719              		.align	2
 720              		.set	.LANCHOR4,. + 0
 723              	ins_ltp_pos:
 724 0000 00000000 		.space	12
 724      00000000 
 724      00000000 
 725              		.section	.bss.ins_ltp_accel,"aw",%nobits
 726              		.align	2
 727              		.set	.LANCHOR6,. + 0
 730              	ins_ltp_accel:
 731 0000 00000000 		.space	12
 731      00000000 
 731      00000000 
 732              		.section	.bss.ins_baro_alt,"aw",%nobits
 733              		.align	2
 734              		.set	.LANCHOR11,. + 0
 737              	ins_baro_alt:
 738 0000 00000000 		.space	4
 739              		.section	.bss.ins_enu_pos,"aw",%nobits
 740              		.align	2
 741              		.set	.LANCHOR7,. + 0
 744              	ins_enu_pos:
 745 0000 00000000 		.space	12
 745      00000000 
 745      00000000 
 746              		.section	.bss.ins_hf_realign,"aw",%nobits
 747              		.set	.LANCHOR3,. + 0
 750              	ins_hf_realign:
 751 0000 00       		.space	1
 752              		.section	.bss.ins_ltp_def,"aw",%nobits
 753              		.align	2
 754              		.set	.LANCHOR12,. + 0
 757              	ins_ltp_def:
 758 0000 00000000 		.space	64
 758      00000000 
 758      00000000 
 758      00000000 
 758      00000000 
 759              		.section	.bss.ins_gps_pos_cm_ned,"aw",%nobits
 760              		.align	2
 761              		.set	.LANCHOR13,. + 0
 764              	ins_gps_pos_cm_ned:
 765 0000 00000000 		.space	12
 765      00000000 
 765      00000000 
 766              		.section	.bss.ins_qfe,"aw",%nobits
 767              		.align	2
 768              		.set	.LANCHOR10,. + 0
 771              	ins_qfe:
 772 0000 00000000 		.space	4
 773              		.section	.bss.ins_enu_speed,"aw",%nobits
 774              		.align	2
 775              		.set	.LANCHOR8,. + 0
 778              	ins_enu_speed:
 779 0000 00000000 		.space	12
 779      00000000 
 779      00000000 
 780              		.section	.bss.ins_enu_accel,"aw",%nobits
 781              		.align	2
 782              		.set	.LANCHOR9,. + 0
 785              	ins_enu_accel:
 786 0000 00000000 		.space	12
 786      00000000 
 786      00000000 
 787              		.section	.bss.ins_gps_speed_cm_s_ned,"aw",%nobits
 788              		.align	2
 789              		.set	.LANCHOR14,. + 0
 792              	ins_gps_speed_cm_s_ned:
 793 0000 00000000 		.space	12
 793      00000000 
 793      00000000 
 794              		.section	.bss.ins_ltp_speed,"aw",%nobits
 795              		.align	2
 796              		.set	.LANCHOR5,. + 0
 799              	ins_ltp_speed:
 800 0000 00000000 		.space	12
 800      00000000 
 800      00000000 
 801              		.section	.bss.ins_ltp_initialised,"aw",%nobits
 802              		.set	.LANCHOR0,. + 0
 805              	ins_ltp_initialised:
 806 0000 00       		.space	1
 807              		.text
 808              	.Letext0:
 809              		.file 2 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 810              		.file 3 "/home/uav/paparazzi/sw/include/std.h"
 811              		.file 4 "./math/pprz_algebra_int.h"
 812              		.file 5 "./math/pprz_geodetic_int.h"
 813              		.file 6 "./math/pprz_algebra_float.h"
 814              		.file 7 "./subsystems/imu.h"
 815              		.file 8 "./subsystems/imu/imu_aspirin2.h"
 816              		.file 9 "./subsystems/sensors/baro.h"
 817              		.file 10 "./mcu_periph/i2c.h"
 818              		.file 11 "boards/lisa_m/baro_board.h"
 819              		.file 12 "./subsystems/gps.h"
 820              		.file 13 "./subsystems/ahrs.h"
 821              		.file 14 "./subsystems/ins.h"
 822              		.file 15 "./subsystems/ins/vf_float.h"
 823              		.file 16 "firmwares/rotorcraft/autopilot.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ins.c
     /tmp/ccWt69Hx.s:18     .text.ins_init:0000000000000000 $t
     /tmp/ccWt69Hx.s:23     .text.ins_init:0000000000000000 ins_init
     /tmp/ccWt69Hx.s:92     .text.ins_init:0000000000000050 $d
     /tmp/ccWt69Hx.s:106    .text.ins_periodic:0000000000000000 $t
     /tmp/ccWt69Hx.s:111    .text.ins_periodic:0000000000000000 ins_periodic
     /tmp/ccWt69Hx.s:124    .text.ins_realign_h:0000000000000000 $t
     /tmp/ccWt69Hx.s:129    .text.ins_realign_h:0000000000000000 ins_realign_h
     /tmp/ccWt69Hx.s:153    .text.ins_realign_v:0000000000000000 $t
     /tmp/ccWt69Hx.s:158    .text.ins_realign_v:0000000000000000 ins_realign_v
     /tmp/ccWt69Hx.s:180    .text.ins_propagate:0000000000000000 $t
     /tmp/ccWt69Hx.s:185    .text.ins_propagate:0000000000000000 ins_propagate
     /tmp/ccWt69Hx.s:364    .text.ins_propagate:0000000000000138 $d
     /tmp/ccWt69Hx.s:383    .text.ins_update_baro:0000000000000000 $t
     /tmp/ccWt69Hx.s:388    .text.ins_update_baro:0000000000000000 ins_update_baro
     /tmp/ccWt69Hx.s:514    .text.ins_update_baro:00000000000000b0 $d
     /tmp/ccWt69Hx.s:533    .text.ins_update_gps:0000000000000000 $t
     /tmp/ccWt69Hx.s:538    .text.ins_update_gps:0000000000000000 ins_update_gps
     /tmp/ccWt69Hx.s:658    .text.ins_update_gps:00000000000000a0 $d
     /tmp/ccWt69Hx.s:674    .text.ins_update_sonar:0000000000000000 $t
     /tmp/ccWt69Hx.s:679    .text.ins_update_sonar:0000000000000000 ins_update_sonar
     /tmp/ccWt69Hx.s:785    .bss.ins_enu_accel:0000000000000000 ins_enu_accel
     /tmp/ccWt69Hx.s:778    .bss.ins_enu_speed:0000000000000000 ins_enu_speed
     /tmp/ccWt69Hx.s:744    .bss.ins_enu_pos:0000000000000000 ins_enu_pos
     /tmp/ccWt69Hx.s:730    .bss.ins_ltp_accel:0000000000000000 ins_ltp_accel
     /tmp/ccWt69Hx.s:799    .bss.ins_ltp_speed:0000000000000000 ins_ltp_speed
     /tmp/ccWt69Hx.s:723    .bss.ins_ltp_pos:0000000000000000 ins_ltp_pos
     /tmp/ccWt69Hx.s:710    .bss.ins_vf_realign:0000000000000000 ins_vf_realign
     /tmp/ccWt69Hx.s:737    .bss.ins_baro_alt:0000000000000000 ins_baro_alt
     /tmp/ccWt69Hx.s:716    .bss.ins_baro_initialised:0000000000000000 ins_baro_initialised
     /tmp/ccWt69Hx.s:771    .bss.ins_qfe:0000000000000000 ins_qfe
     /tmp/ccWt69Hx.s:750    .bss.ins_hf_realign:0000000000000000 ins_hf_realign
     /tmp/ccWt69Hx.s:792    .bss.ins_gps_speed_cm_s_ned:0000000000000000 ins_gps_speed_cm_s_ned
     /tmp/ccWt69Hx.s:764    .bss.ins_gps_pos_cm_ned:0000000000000000 ins_gps_pos_cm_ned
     /tmp/ccWt69Hx.s:805    .bss.ins_ltp_initialised:0000000000000000 ins_ltp_initialised
     /tmp/ccWt69Hx.s:757    .bss.ins_ltp_def:0000000000000000 ins_ltp_def
     /tmp/ccWt69Hx.s:711    .bss.ins_vf_realign:0000000000000000 $d
     /tmp/ccWt69Hx.s:717    .bss.ins_baro_initialised:0000000000000000 $d
     /tmp/ccWt69Hx.s:719    .bss.ins_ltp_pos:0000000000000000 $d
     /tmp/ccWt69Hx.s:726    .bss.ins_ltp_accel:0000000000000000 $d
     /tmp/ccWt69Hx.s:733    .bss.ins_baro_alt:0000000000000000 $d
     /tmp/ccWt69Hx.s:740    .bss.ins_enu_pos:0000000000000000 $d
     /tmp/ccWt69Hx.s:751    .bss.ins_hf_realign:0000000000000000 $d
     /tmp/ccWt69Hx.s:753    .bss.ins_ltp_def:0000000000000000 $d
     /tmp/ccWt69Hx.s:760    .bss.ins_gps_pos_cm_ned:0000000000000000 $d
     /tmp/ccWt69Hx.s:767    .bss.ins_qfe:0000000000000000 $d
     /tmp/ccWt69Hx.s:774    .bss.ins_enu_speed:0000000000000000 $d
     /tmp/ccWt69Hx.s:781    .bss.ins_enu_accel:0000000000000000 $d
     /tmp/ccWt69Hx.s:788    .bss.ins_gps_speed_cm_s_ned:0000000000000000 $d
     /tmp/ccWt69Hx.s:795    .bss.ins_ltp_speed:0000000000000000 $d
     /tmp/ccWt69Hx.s:806    .bss.ins_ltp_initialised:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
     /tmp/ccWt69Hx.s:382    .text.ins_propagate:0000000000000174 $t

UNDEFINED SYMBOLS
vff_init
vff_realign
__aeabi_i2f
__aeabi_fmul
__aeabi_f2iz
__aeabi_i2d
__aeabi_dadd
__aeabi_d2iz
vff_propagate
imu
ahrs
baro
vff_zdotdot
vff_zdot
vff_z
vff_update
ltp_def_from_ecef_i
ned_of_ecef_point_i
ned_of_ecef_vect_i
gps
