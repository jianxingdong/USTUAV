   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"spektrum_arch.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.DelayUs,"ax",%progbits
  18              		.align	1
  19              		.thumb
  20              		.thumb_func
  22              	DelayUs:
  23              	.LFB37:
  24              		.file 1 "arch/stm32/subsystems/radio_control/spektrum_arch.c"
   1:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /*
   2:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * $Id$
   3:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
   4:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Copyright (C) 2010 Eric Parsonage <eric@eparsonage.com>
   5:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
   6:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * This file is part of paparazzi.
   7:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
   8:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * paparazzi is free software; you can redistribute it and/or modify
   9:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * it under the terms of the GNU General Public License as published by
  10:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * the Free Software Foundation; either version 2, or (at your option)
  11:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * any later version.
  12:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
  13:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * paparazzi is distributed in the hope that it will be useful,
  14:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * GNU General Public License for more details.
  17:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
  18:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * You should have received a copy of the GNU General Public License
  19:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * along with paparazzi; see the file COPYING.  If not, write to
  20:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * the Free Software Foundation, 59 Temple Place - Suite 330,
  21:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Boston, MA 02111-1307, USA.
  22:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  */
  23:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
  24:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #include <stdint.h>
  25:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #include <stm32/gpio.h>
  26:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #include <stm32/rcc.h>
  27:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #include <stm32/tim.h>
  28:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #include <stm32/misc.h>
  29:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #include <stm32/usart.h>
  30:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #include "subsystems/radio_control.h"
  31:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #include "subsystems/radio_control/spektrum_arch.h"
  32:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #include "mcu_periph/uart.h"
  33:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #include "pprz_baudrate.h"
  34:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
  35:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
  36:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
  37:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define SPEKTRUM_CHANNELS_PER_FRAME 7
  38:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define MAX_SPEKTRUM_FRAMES 2
  39:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define MAX_SPEKTRUM_CHANNELS 16
  40:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
  41:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define MAX_DELAY   INT16_MAX
  42:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /* the frequency of the delay timer */
  43:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define DELAY_TIM_FREQUENCY 1000000
  44:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /* Number of low pulses sent to satellite receivers */
  45:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define MASTER_RECEIVER_PULSES 5
  46:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define SLAVE_RECEIVER_PULSES 6
  47:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
  48:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /* The line that is pulled low at power up to initiate the bind process */
  49:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define BIND_PIN GPIO_Pin_3
  50:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define BIND_PIN_PORT GPIOC
  51:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define BIND_PIN_PERIPH RCC_APB2Periph_GPIOC
  52:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
  53:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define TIM_FREQ_1000000 1000000
  54:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define TIM_TICS_FOR_100us 100
  55:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define MIN_FRAME_SPACE  70  // 7ms
  56:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define MAX_BYTE_SPACE  3   // .3ms
  57:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
  58:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /*
  59:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * in the makefile we set RADIO_CONTROL_SPEKTRUM_PRIMARY_PORT to be Uartx
  60:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * but in uart_hw.c the initialisation functions are
  61:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * defined as uartx these macros give us the glue
  62:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * that allows static calls at compile time
  63:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  */
  64:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
  65:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define __PrimaryUart(dev, _x) dev##_x
  66:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define _PrimaryUart(dev, _x)  __PrimaryUart(dev, _x)
  67:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define PrimaryUart(_x) _PrimaryUart(RADIO_CONTROL_SPEKTRUM_PRIMARY_PORT, _x)
  68:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
  69:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define __SecondaryUart(dev, _x) dev##_x
  70:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define _SecondaryUart(dev, _x)  __SecondaryUart(dev, _x)
  71:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define SecondaryUart(_x) _SecondaryUart(RADIO_CONTROL_SPEKTRUM_SECONDARY_PORT, _x)
  72:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
  73:arch/stm32/subsystems/radio_control/spektrum_arch.c **** struct SpektrumStateStruct {
  74:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     uint8_t ReSync;
  75:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     uint8_t SpektrumTimer;
  76:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     uint8_t Sync;
  77:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     uint8_t ChannelCnt;
  78:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     uint8_t FrameCnt;
  79:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     uint8_t HighByte;
  80:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     uint8_t SecondFrame;
  81:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     uint16_t LostFrameCnt;
  82:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     uint8_t RcAvailable;
  83:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     int16_t values[SPEKTRUM_CHANNELS_PER_FRAME*MAX_SPEKTRUM_FRAMES];
  84:arch/stm32/subsystems/radio_control/spektrum_arch.c **** };
  85:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
  86:arch/stm32/subsystems/radio_control/spektrum_arch.c **** typedef struct SpektrumStateStruct SpektrumStateType;
  87:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
  88:arch/stm32/subsystems/radio_control/spektrum_arch.c **** SpektrumStateType PrimarySpektrumState = {1,0,0,0,0,0,0,0,0};
  89:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #ifdef RADIO_CONTROL_SPEKTRUM_SECONDARY_PORT
  90:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #pragma message "Using secondary spektrum receiver."
  91:arch/stm32/subsystems/radio_control/spektrum_arch.c **** SpektrumStateType SecondarySpektrumState = {1,0,0,0,0,0,0,0,0};
  92:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #else
  93:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #pragma message "NOT using secondary spektrum receiver."
  94:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #endif
  95:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
  96:arch/stm32/subsystems/radio_control/spektrum_arch.c **** int16_t SpektrumBuf[SPEKTRUM_CHANNELS_PER_FRAME*MAX_SPEKTRUM_FRAMES];
  97:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /* the order of the channels on a spektrum is always as follows :
  98:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
  99:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Throttle   0
 100:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Aileron    1
 101:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Elevator   2
 102:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Rudder     3
 103:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Gear       4
 104:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Flap/Aux1  5
 105:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Aux2       6
 106:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Aux3       7
 107:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Aux4       8
 108:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Aux5       9
 109:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Aux6      10
 110:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Aux7      11
 111:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  */
 112:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 113:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /* reverse some channels to suit Paparazzi conventions          */
 114:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /* the maximum number of channels a Spektrum can transmit is 12 */
 115:arch/stm32/subsystems/radio_control/spektrum_arch.c **** int8_t SpektrumSigns[] = RADIO_CONTROL_SPEKTRUM_SIGNS;
 116:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 117:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /* Parser state variables */
 118:arch/stm32/subsystems/radio_control/spektrum_arch.c **** static uint8_t EncodingType = 0;
 119:arch/stm32/subsystems/radio_control/spektrum_arch.c **** static uint8_t ExpectedFrames = 0;
 120:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /* initialise the uarts used by the parser */
 121:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void SpektrumUartInit(void);
 122:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /* initialise the timer used by the parser to ensure sync */
 123:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void SpektrumTimerInit(void);
 124:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /* sets a GPIO pin as output for debugging */
 125:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void DebugInit(void);
 126:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void tim6_irq_handler(void);
 127:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /* wait busy loop, microseconds */
 128:arch/stm32/subsystems/radio_control/spektrum_arch.c **** static void DelayUs( uint16_t uSecs );
 129:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /* wait busy loop, milliseconds */
 130:arch/stm32/subsystems/radio_control/spektrum_arch.c **** static void DelayMs( uint16_t mSecs );
 131:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /* setup timer 1 for busy wait delays */
 132:arch/stm32/subsystems/radio_control/spektrum_arch.c **** static void SpektrumDelayInit( void );
 133:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 134:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 135:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  /*****************************************************************************
 136:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 137:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Initialise the timer an uarts used by the Spektrum receiver subsystem
 138:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 139:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *****************************************************************************/
 140:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void radio_control_impl_init(void) {
 141:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   SpektrumTimerInit();
 142:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   // DebugInit();
 143:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   SpektrumUartInit();
 144:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }
 145:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 146:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /*****************************************************************************
 147:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * The bind function means that the satellite receivers believe they are
 148:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * connected to a 9 channel JR-R921 24 receiver thus during the bind process
 149:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * they try to get the transmitter to transmit at the highest resolution that
 150:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * it can manage. The data is contained in 16 byte packets transmitted at
 151:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * 115200 baud. Depending on the transmitter either 1 or 2 frames are required
 152:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * to contain the data for all channels. These frames are either 11ms or 22ms
 153:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * apart.
 154:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 155:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * The format of each frame for the main receiver is as follows
 156:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 157:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte1:  frame loss data
 158:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte2:  transmitter information
 159:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte3:  and byte4:  channel data
 160:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte5:  and byte6:  channel data
 161:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte7:  and byte8:  channel data
 162:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte9:  and byte10: channel data
 163:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte11: and byte12: channel data
 164:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte13: and byte14: channel data
 165:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte15: and byte16: channel data
 166:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 167:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 168:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * The format of each frame for the secondary receiver is as follows
 169:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 170:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte1:  frame loss data
 171:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte2:  frame loss data
 172:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte3:  and byte4:  channel data
 173:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte5:  and byte6:  channel data
 174:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte7:  and byte8:  channel data
 175:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte9:  and byte10: channel data
 176:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte11: and byte12: channel data
 177:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte13: and byte14: channel data
 178:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *  byte15: and byte16: channel data
 179:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 180:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * The frame loss data bytes starts out containing 0 as long as the
 181:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * transmitter is switched on before the receivers. It then increments
 182:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * whenever frames are dropped.
 183:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 184:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Three values for the transmitter information byte have been seen thus far
 185:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 186:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * 0x01 From a Spektrum DX7eu which transmits a single frame containing all
 187:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * channel data every 22ms with 10bit resolution.
 188:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 189:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * 0x02 From a Spektrum DM9 module which transmits two frames to carry the
 190:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * data for all channels 11ms apart with 10bit resolution.
 191:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 192:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * 0x12 From a Spektrum DX7se which transmits two frames to carry the
 193:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * data for all channels 11ms apart with 11bit resolution.
 194:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 195:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * 0x12 From a JR X9503 which transmits two frames to carry the
 196:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * data for all channels 11ms apart with 11bit resolution.
 197:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 198:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * 0x01 From a Spektrum DX7 which transmits a single frame containing all
 199:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * channel data every 22ms with 10bit resolution.
 200:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 201:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * 0x12 From a JR DSX12 which transmits two frames to carry the
 202:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * data for all channels 11ms apart with 11bit resolution.
 203:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 204:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * 0x1 From a Spektru DX5e which transmits a single frame containing all
 205:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * channel data every 22ms with 10bit resolution.
 206:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 207:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * 0x01 From a Spektrum DX6i which transmits a single frame containing all
 208:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * channel data every 22ms with 10bit resolution.
 209:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 210:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Currently the assumption is that the data has the form :
 211:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 212:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * [0 0 0 R 0 0 N1 N0]
 213:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 214:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * where :
 215:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 216:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * 0 means a '0' bit
 217:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * R: 0 for 10 bit resolution 1 for 11 bit resolution channel data
 218:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * N1 to N0 is the number of frames required to receive all channel
 219:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * data.
 220:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 221:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Channels can have either 10bit or 11bit resolution. Data from a tranmitter
 222:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * with 10 bit resolution has the form:
 223:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 224:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * [F 0 C3 C2 C1 C0 D9 D8 D7 D6 D5 D4 D3 D2 D1 D0]
 225:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 226:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Data from a tranmitter with 11 bit resolution has the form
 227:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 228:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * [F C3 C2 C1 C0 D10 D9 D8 D7 D6 D5 D4 D3 D2 D1 D0]
 229:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 230:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * where :
 231:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 232:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * 0 means a '0' bit
 233:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * F: Normally 0 but set to 1 for the first channel of the 2nd frame if a
 234:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * second frame is transmitted.
 235:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 236:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * C3 to C0 is the channel number, 4 bit, matching the numbers allocated in
 237:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * the transmitter.
 238:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 239:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * D9 to D0 is the channel data (10 bit) 0xaa..0x200..0x356 for
 240:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * 100% transmitter-travel
 241:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 242:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 243:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * D10 to D0 is the channel data (11 bit) 0x154..0x400..0x6AC for
 244:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * 100% transmitter-travel
 245:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *****************************************************************************/
 246:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 247:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  /*****************************************************************************
 248:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 249:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Spektrum Parser captures frame data by using time between frames to sync on
 250:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 251:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *****************************************************************************/
 252:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 253:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #define SpektrumParser(_c, _SpektrumState, _receiver)  {                      \
 254:arch/stm32/subsystems/radio_control/spektrum_arch.c ****                                                                               \
 255:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   uint16_t ChannelData;                                                       \
 256:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   uint8_t TimedOut;                                                           \
 257:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   static uint8_t TmpEncType = 0;        /* 0 = 10bit, 1 = 11 bit        */    \
 258:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   static uint8_t TmpExpFrames = 0;      /* # of frames for channel data */    \
 259:arch/stm32/subsystems/radio_control/spektrum_arch.c ****                                                                               \
 260:arch/stm32/subsystems/radio_control/spektrum_arch.c ****    TimedOut = (!_SpektrumState.SpektrumTimer) ? 1 : 0;                        \
 261:arch/stm32/subsystems/radio_control/spektrum_arch.c ****                                                                               \
 262:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* If we have just started the resync process or */                         \
 263:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* if we have recieved a character before our    */                         \
 264:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* 7ms wait has finished                         */                         \
 265:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if ((_SpektrumState.ReSync == 1) ||                                         \
 266:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       ((_SpektrumState.Sync == 0) && (!TimedOut))) {                          \
 267:arch/stm32/subsystems/radio_control/spektrum_arch.c ****                                                                               \
 268:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.ReSync = 0;                                                \
 269:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.SpektrumTimer = MIN_FRAME_SPACE;                           \
 270:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.Sync = 0;                                                  \
 271:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.ChannelCnt = 0;                                            \
 272:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.FrameCnt = 0;                                              \
 273:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.SecondFrame = 0;                                           \
 274:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     return;                                                                   \
 275:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   }                                                                           \
 276:arch/stm32/subsystems/radio_control/spektrum_arch.c ****                                                                               \
 277:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* the first byte of a new frame. It was received */                        \
 278:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* more than 7ms after the last received byte.    */                        \
 279:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* It represents the number of lost frames so far.*/                        \
 280:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if (_SpektrumState.Sync == 0) {                                             \
 281:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       _SpektrumState.LostFrameCnt = _c;                                       \
 282:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       if(_receiver) /* secondary receiver */                                  \
 283:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         _SpektrumState.LostFrameCnt = _SpektrumState.LostFrameCnt << 8;       \
 284:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       _SpektrumState.Sync = 1;                                                \
 285:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       _SpektrumState.SpektrumTimer = MAX_BYTE_SPACE;                          \
 286:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       return;                                                                 \
 287:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   }                                                                           \
 288:arch/stm32/subsystems/radio_control/spektrum_arch.c ****                                                                               \
 289:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* all other bytes should be recieved within     */                         \
 290:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* MAX_BYTE_SPACE time of the last byte received */                         \
 291:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* otherwise something went wrong resynchronise  */                         \
 292:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if(TimedOut) {                                                              \
 293:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.ReSync = 1;                                                \
 294:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     /* next frame not expected sooner than 7ms     */                         \
 295:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.SpektrumTimer = MIN_FRAME_SPACE;                           \
 296:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     return;                                                                   \
 297:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   }                                                                           \
 298:arch/stm32/subsystems/radio_control/spektrum_arch.c ****                                                                               \
 299:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* second character determines resolution and frame rate for main */        \
 300:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* receiver or low byte of LostFrameCount for secondary receiver  */        \
 301:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if(_SpektrumState.Sync == 1) {                                              \
 302:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     if(_receiver) {                                                           \
 303:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       _SpektrumState.LostFrameCnt +=_c;                                       \
 304:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       TmpExpFrames = ExpectedFrames;                                          \
 305:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     } else {                                                                  \
 306:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       /* TODO: collect more data. I suspect that there is a low res         */\
 307:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       /* protocol that is still 10 bit but without using the full range.    */\
 308:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       TmpEncType =(_c & 0x10)>>4;      /* 0 = 10bit, 1 = 11 bit             */\
 309:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       TmpExpFrames = _c & 0x03;        /* 1 = 1 frame contains all channels */\
 310:arch/stm32/subsystems/radio_control/spektrum_arch.c ****                                        /* 2 = 2 channel data in 2 frames    */\
 311:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     }                                                                         \
 312:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.Sync = 2;                                                  \
 313:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.SpektrumTimer = MAX_BYTE_SPACE;                            \
 314:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     return;                                                                   \
 315:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   }                                                                           \
 316:arch/stm32/subsystems/radio_control/spektrum_arch.c ****                                                                               \
 317:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* high byte of channel data if this is the first byte */                   \
 318:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* of channel data and the most significant bit is set */                   \
 319:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* then this is the second frame of channel data.      */                   \
 320:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if(_SpektrumState.Sync == 2) {                                              \
 321:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.HighByte = _c;                                             \
 322:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     if (_SpektrumState.ChannelCnt == 0) {                                     \
 323:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       _SpektrumState.SecondFrame = (_SpektrumState.HighByte & 0x80) ? 1 : 0;  \
 324:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     }                                                                         \
 325:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.Sync = 3;                                                  \
 326:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.SpektrumTimer = MAX_BYTE_SPACE;                            \
 327:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     return;                                                                   \
 328:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   }                                                                           \
 329:arch/stm32/subsystems/radio_control/spektrum_arch.c ****                                                                               \
 330:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* low byte of channel data */                                              \
 331:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if(_SpektrumState.Sync == 3) {                                              \
 332:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.Sync = 2;                                                  \
 333:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.SpektrumTimer = MAX_BYTE_SPACE;                            \
 334:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     /* we overwrite the buffer now so rc data is not available now */         \
 335:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.RcAvailable = 0;                                           \
 336:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     ChannelData = ((uint16_t)_SpektrumState.HighByte << 8) | _c;              \
 337:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.values[_SpektrumState.ChannelCnt                           \
 338:arch/stm32/subsystems/radio_control/spektrum_arch.c ****                           + (_SpektrumState.SecondFrame * 7)] = ChannelData;  \
 339:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.ChannelCnt ++;                                             \
 340:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   }                                                                           \
 341:arch/stm32/subsystems/radio_control/spektrum_arch.c ****                                                                               \
 342:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* If we have a whole frame */                                              \
 343:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if(_SpektrumState.ChannelCnt >= SPEKTRUM_CHANNELS_PER_FRAME) {              \
 344:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     /* how many frames did we expect ? */                                     \
 345:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     ++_SpektrumState.FrameCnt;                                                \
 346:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     if (_SpektrumState.FrameCnt == TmpExpFrames)                              \
 347:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     {                                                                         \
 348:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       /* set the rc_available_flag */                                         \
 349:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       _SpektrumState.RcAvailable = 1;                                         \
 350:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       _SpektrumState.FrameCnt = 0;                                            \
 351:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     }                                                                         \
 352:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     if(!_receiver) { /* main receiver */                                      \
 353:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       EncodingType = TmpEncType;         /* only update on a good */          \
 354:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       ExpectedFrames = TmpExpFrames;     /* main receiver frame   */          \
 355:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     }                                                                         \
 356:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.Sync = 0;                                                  \
 357:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.ChannelCnt = 0;                                            \
 358:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.SecondFrame = 0;                                           \
 359:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     _SpektrumState.SpektrumTimer = MIN_FRAME_SPACE;                           \
 360:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   }                                                                           \
 361:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }                                                                             \
 362:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 363:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /*****************************************************************************
 364:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 365:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * RadioControlEventImp decodes channel data stored by uart irq handlers
 366:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * and calls callback funtion
 367:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 368:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *****************************************************************************/
 369:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 370:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void RadioControlEventImp(void (*frame_handler)(void)) {
 371:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   uint8_t ChannelCnt;
 372:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   uint8_t ChannelNum;
 373:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   uint16_t ChannelData;
 374:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   uint8_t MaxChannelNum = 0;
 375:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 376:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #ifdef RADIO_CONTROL_SPEKTRUM_SECONDARY_PORT
 377:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* If we have two receivers and at least one of them has new data */
 378:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   uint8_t BestReceiver;
 379:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if ((PrimarySpektrumState.RcAvailable) ||
 380:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       (SecondarySpektrumState.RcAvailable)) {
 381:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     /* if both receivers have new data select the one  */
 382:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     /* that has had the least number of frames lost    */
 383:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     if ((PrimarySpektrumState.RcAvailable) &&
 384:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         (SecondarySpektrumState.RcAvailable)) {
 385:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       BestReceiver  = (PrimarySpektrumState.LostFrameCnt
 386:arch/stm32/subsystems/radio_control/spektrum_arch.c ****                        <= SecondarySpektrumState.LostFrameCnt) ? 0 : 1;
 387:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     } else {
 388:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       /* if only one of the receivers have new data use it */
 389:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       BestReceiver  = (PrimarySpektrumState.RcAvailable) ? 0 : 1;
 390:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     }
 391:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     /* clear the data ready flags */
 392:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     PrimarySpektrumState.RcAvailable = 0;
 393:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SecondarySpektrumState.RcAvailable = 0;
 394:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 395:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #else
 396:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* if we have one receiver and it has new data */
 397:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if(PrimarySpektrumState.RcAvailable) {
 398:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     PrimarySpektrumState.RcAvailable = 0;
 399:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #endif
 400:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     ChannelCnt = 0;
 401:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     /* for every piece of channel data we have received */
 402:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     for(int i = 0; (i < SPEKTRUM_CHANNELS_PER_FRAME * ExpectedFrames); i++) {
 403:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #ifndef RADIO_CONTROL_SPEKTRUM_SECONDARY_PORT
 404:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       ChannelData = PrimarySpektrumState.values[i];
 405:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #else
 406:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       ChannelData = (!BestReceiver) ? PrimarySpektrumState.values[i] :
 407:arch/stm32/subsystems/radio_control/spektrum_arch.c ****                                  SecondarySpektrumState.values[i];
 408:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #endif
 409:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       /* find out the channel number and its value by  */
 410:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       /* using the EncodingType which is only received */
 411:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       /* from the main receiver                        */
 412:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       switch(EncodingType) {
 413:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         case(0) : /* 10 bit */
 414:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           ChannelNum = (ChannelData >> 10) & 0x0f;
 415:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           /* don't bother decoding unused channels */
 416:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           if (ChannelNum < RADIO_CONTROL_NB_CHANNEL) {
 417:arch/stm32/subsystems/radio_control/spektrum_arch.c ****            SpektrumBuf[ChannelNum] = ChannelData & 0x3ff;
 418:arch/stm32/subsystems/radio_control/spektrum_arch.c ****            SpektrumBuf[ChannelNum] -= 0x200;
 419:arch/stm32/subsystems/radio_control/spektrum_arch.c ****            SpektrumBuf[ChannelNum] *= MAX_PPRZ/0x156;
 420:arch/stm32/subsystems/radio_control/spektrum_arch.c ****            ChannelCnt++;
 421:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           }
 422:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           break;
 423:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 424:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         case(1) : /* 11 bit */
 425:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           ChannelNum = (ChannelData >> 11) & 0x0f;
 426:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           /* don't bother decoding unused channels */
 427:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           if (ChannelNum < RADIO_CONTROL_NB_CHANNEL) {
 428:arch/stm32/subsystems/radio_control/spektrum_arch.c ****             SpektrumBuf[ChannelNum] = ChannelData & 0x7ff;
 429:arch/stm32/subsystems/radio_control/spektrum_arch.c ****             SpektrumBuf[ChannelNum] -= 0x400;
 430:arch/stm32/subsystems/radio_control/spektrum_arch.c ****             SpektrumBuf[ChannelNum] *= MAX_PPRZ/0x2AC;
 431:arch/stm32/subsystems/radio_control/spektrum_arch.c ****             ChannelCnt++;
 432:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           }
 433:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           break;
 434:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 435:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         default : ChannelNum = 0x0F; break;  /* never going to get here */
 436:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       }
 437:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       /* store the value of the highest valid channel */
 438:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       if ((ChannelNum != 0x0F) && (ChannelNum > MaxChannelNum))
 439:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         MaxChannelNum = ChannelNum;
 440:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 441:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     }
 442:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 443:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     /* if we have a valid frame the pass it to the frame handler */
 444:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     if (ChannelCnt >= (MaxChannelNum + 1)) {
 445:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       radio_control.frame_cpt++;
 446:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       radio_control.time_since_last_frame = 0;
 447:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       radio_control.status = RC_OK;
 448:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       for (int i = 0; i < (MaxChannelNum + 1); i++) {
 449:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         radio_control.values[i] = SpektrumBuf[i];
 450:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         if (i == RADIO_THROTTLE ) {
 451:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           radio_control.values[i] += MAX_PPRZ;
 452:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           radio_control.values[i] /= 2;
 453:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         }
 454:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         radio_control.values[i] *= SpektrumSigns[i];
 455:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       }
 456:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       (*frame_handler)();
 457:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     }
 458:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   }
 459:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }
 460:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 461:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 462:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /*****************************************************************************
 463:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 464:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Initialise TIM6 to fire an interrupt every 100 microseconds to provide
 465:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * timebase for SpektrumParser
 466:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 467:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *****************************************************************************/
 468:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void SpektrumTimerInit( void ) {
 469:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 470:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* enable TIM6 clock */
 471:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 472:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 473:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* TIM6 configuration */
 474:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
 475:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 476:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* 100 microseconds ie 0.1 millisecond */
 477:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_Period = TIM_TICS_FOR_100us-1;
 478:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_Prescaler = ((AHB_CLK / TIM_FREQ_1000000) - 1);
 479:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 480:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
 481:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 482:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 483:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Enable TIM6 interrupts */
 484:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_InitTypeDef NVIC_InitStructure;
 485:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 486:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Enable and configure TIM6 IRQ channel */
 487:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_InitStructure.NVIC_IRQChannel = TIM6_IRQn;
 488:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 489:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 490:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 491:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_Init(&NVIC_InitStructure);
 492:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 493:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Enable TIM6 Update interrupt */
 494:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 495:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_ClearFlag(TIM6, TIM_FLAG_Update);
 496:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 497:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* TIM6 enable counter */
 498:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_Cmd(TIM6, ENABLE);
 499:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }
 500:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 501:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /*****************************************************************************
 502:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 503:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * TIM6 interrupt request handler updates times used by SpektrumParser
 504:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 505:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *****************************************************************************/
 506:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void tim6_irq_handler( void ) {
 507:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 508:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 509:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 510:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if (PrimarySpektrumState.SpektrumTimer)
 511:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     --PrimarySpektrumState.SpektrumTimer;
 512:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #ifdef RADIO_CONTROL_SPEKTRUM_SECONDARY_PORT
 513:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if (SecondarySpektrumState.SpektrumTimer)
 514:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     --SecondarySpektrumState.SpektrumTimer;
 515:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #endif
 516:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }
 517:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 518:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /*****************************************************************************
 519:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 520:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Initialise the uarts for the spektrum satellite receivers
 521:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 522:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *****************************************************************************/
 523:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void SpektrumUartInit(void) {
 524:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* init RCC */
 525:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   PrimaryUart(_remap);
 526:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   PrimaryUart(_clk)(PrimaryUart(_UartPeriph), ENABLE);;
 527:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   //RCC_APB1PeriphClockCmd(PrimaryUart(_UartPeriph), ENABLE);
 528:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 529:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Enable USART interrupts */
 530:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_InitTypeDef nvic;
 531:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannel = PrimaryUart(_IRQn);
 532:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannelPreemptionPriority = 2;
 533:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannelSubPriority = 1;
 534:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannelCmd = ENABLE;
 535:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_Init(&nvic);
 536:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Init GPIOS */
 537:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitTypeDef GPIO_InitStructure;
 538:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 539:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Primary UART Rx pin as floating input */
 540:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Pin   = PrimaryUart(_RxPin);
 541:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
 542:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(PrimaryUart(_RxPort), &GPIO_InitStructure);
 543:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Configure Primary UART */
 544:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   USART_InitTypeDef usart;
 545:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_BaudRate            = B115200;
 546:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_WordLength          = USART_WordLength_8b;
 547:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_StopBits            = USART_StopBits_1;
 548:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_Parity              = USART_Parity_No;
 549:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 550:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_Mode                = USART_Mode_Rx;
 551:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   USART_Init(PrimaryUart(_reg), &usart);
 552:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Enable Primary UART Receive interrupts */
 553:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   USART_ITConfig(PrimaryUart(_reg), USART_IT_RXNE, ENABLE);
 554:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 555:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* required to get the correct baudrate on lisa m */
 556:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   pprz_usart_set_baudrate(PrimaryUart(_reg), B115200);
 557:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Enable the Primary UART */
 558:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   USART_Cmd(PrimaryUart(_reg), ENABLE);
 559:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 560:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 561:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #ifdef RADIO_CONTROL_SPEKTRUM_SECONDARY_PORT
 562:arch/stm32/subsystems/radio_control/spektrum_arch.c ****    /* init RCC */
 563:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   SecondaryUart(_remap);
 564:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   SecondaryUart(_clk)(SecondaryUart(_UartPeriph), ENABLE);
 565:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   //RCC_APB1PeriphClockCmd(SecondaryUart(_UartPeriph), ENABLE);
 566:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Enable USART interrupts */
 567:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannel = SecondaryUart(_IRQn);
 568:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannelPreemptionPriority = 2;
 569:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannelSubPriority = 2;
 570:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannelCmd = ENABLE;
 571:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_Init(&nvic);
 572:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Init GPIOS */;
 573:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 574:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Secondary UART Rx pin as floating input */
 575:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Pin   = SecondaryUart(_RxPin);
 576:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
 577:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(SecondaryUart(_RxPort), &GPIO_InitStructure);
 578:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Configure secondary UART */
 579:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_BaudRate            = B115200;
 580:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_WordLength          = USART_WordLength_8b;
 581:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_StopBits            = USART_StopBits_1;
 582:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_Parity              = USART_Parity_No;
 583:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 584:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_Mode                = USART_Mode_Rx;
 585:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   USART_Init(SecondaryUart(_reg), &usart);
 586:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Enable Secondary UART Receive interrupts */
 587:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   USART_ITConfig(SecondaryUart(_reg), USART_IT_RXNE, ENABLE);
 588:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 589:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* required to get the correct baudrate on lisa m */
 590:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   pprz_usart_set_baudrate(SecondaryUart(_reg), B115200);
 591:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Enable the Primary UART */
 592:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   USART_Cmd(SecondaryUart(_reg), ENABLE);
 593:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #endif
 594:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 595:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }
 596:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 597:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /*****************************************************************************
 598:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 599:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * The primary receiver UART interrupt request handler which passes the
 600:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * received character to Spektrum Parser.
 601:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 602:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *****************************************************************************/
 603:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void PrimaryUart(_irq_handler)(void) {
 604:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 605:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if(USART_GetITStatus(PrimaryUart(_reg), USART_IT_TXE) != RESET) {
 606:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       USART_ITConfig(PrimaryUart(_reg), USART_IT_TXE, DISABLE);
 607:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   }
 608:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 609:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if(USART_GetITStatus(PrimaryUart(_reg), USART_IT_RXNE) != RESET) {
 610:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     uint8_t b =  USART_ReceiveData(PrimaryUart(_reg));
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 612:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   }
 613:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }
 614:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 615:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /*****************************************************************************
 616:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 617:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * The secondary receiver UART interrupt request handler which passes the
 618:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * received character to Spektrum Parser.
 619:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 620:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *****************************************************************************/
 621:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #ifdef RADIO_CONTROL_SPEKTRUM_SECONDARY_PORT
 622:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void SecondaryUart(_irq_handler)(void) {
 623:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 624:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if(USART_GetITStatus(SecondaryUart(_reg), USART_IT_TXE) != RESET) {
 625:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       USART_ITConfig(SecondaryUart(_reg), USART_IT_TXE, DISABLE);
 626:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   }
 627:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 628:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if(USART_GetITStatus(SecondaryUart(_reg), USART_IT_RXNE) != RESET) {
 629:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     uint8_t b =  USART_ReceiveData(SecondaryUart(_reg));
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 631:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   }
 632:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }
 633:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #endif
 634:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 635:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /*****************************************************************************
 636:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 637:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Use pin to output debug information.
 638:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 639:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *****************************************************************************/
 640:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void DebugInit(void) {
 641:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOC, ENABLE);
 642:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitTypeDef GPIO_InitStructure;
 643:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 644:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 645:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 646:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(GPIOC, &GPIO_InitStructure);
 647:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_WriteBit(GPIOC, GPIO_Pin_5 , Bit_RESET );
 648:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }
 649:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 650:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /*****************************************************************************
 651:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 652:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * The following functions provide functionality to allow binding of
 653:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * spektrum satellite receivers. The pulse train sent to them means
 654:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * that Lisa is emulating a 9 channel JR-R921 24.
 655:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 656:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *****************************************************************************/
 657:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /*****************************************************************************
 658:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 659:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * radio_control_spektrum_try_bind(void) must called on powerup as spektrum
 660:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * satellites can only bind immediately after power up also it must be called
 661:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * before the call to SpektrumUartInit as we leave them with their Rx pins set
 662:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * as outputs.
 663:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 664:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *****************************************************************************/
 665:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void radio_control_spektrum_try_bind(void) {
 666:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 667:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* init RCC */
 668:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   RCC_APB2PeriphClockCmd(BIND_PIN_PERIPH , ENABLE);
 669:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 670:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Init GPIO for the bind pin */
 671:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitTypeDef GPIO_InitStructure;
 672:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Pin = BIND_PIN;
 673:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 674:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 675:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(BIND_PIN_PORT, &GPIO_InitStructure);
 676:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* exit if the BIND_PIN is high, it needs to
 677:arch/stm32/subsystems/radio_control/spektrum_arch.c ****      be pulled low at startup to initiate bind */
 678:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if (GPIO_ReadInputDataBit(BIND_PIN_PORT, BIND_PIN))
 679:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     return;
 680:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 681:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* bind initiated, initialise the delay timer */
 682:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   SpektrumDelayInit();
 683:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 684:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* initialise the uarts rx pins as  GPIOS */
 685:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   RCC_APB2PeriphClockCmd(PrimaryUart(_Periph) , ENABLE);
 686:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Master receiver Rx push-pull */
 687:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Pin = PrimaryUart(_RxPin);
 688:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 689:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 690:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(PrimaryUart(_RxPort), &GPIO_InitStructure);
 691:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Master receiver RX line, drive high */
 692:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_WriteBit(PrimaryUart(_RxPort), PrimaryUart(_RxPin) , Bit_SET );
 693:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 694:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #ifdef RADIO_CONTROL_SPEKTRUM_SECONDARY_PORT
 695:arch/stm32/subsystems/radio_control/spektrum_arch.c ****    RCC_APB2PeriphClockCmd(SecondaryUart(_Periph) , ENABLE);
 696:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Slave receiver Rx push-pull */
 697:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Pin = SecondaryUart(_RxPin);
 698:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 699:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 700:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(SecondaryUart(_RxPort), &GPIO_InitStructure);
 701:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Slave receiver RX line, drive high */
 702:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_WriteBit(SecondaryUart(_RxPort), SecondaryUart(_RxPin) , Bit_SET );
 703:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #endif
 704:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 705:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* We have no idea how long the window for allowing binding after
 706:arch/stm32/subsystems/radio_control/spektrum_arch.c ****      power up is. This works for the moment but will need revisiting */
 707:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   DelayMs(61);
 708:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 709:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   for (int i = 0; i < MASTER_RECEIVER_PULSES ; i++)
 710:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   {
 711:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     GPIO_WriteBit(PrimaryUart(_RxPort), PrimaryUart(_RxPin), Bit_RESET );
 712:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     DelayUs(118);
 713:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     GPIO_WriteBit(PrimaryUart(_RxPort), PrimaryUart(_RxPin), Bit_SET );
 714:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     DelayUs(122);
 715:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   }
 716:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 717:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #ifdef RADIO_CONTROL_SPEKTRUM_SECONDARY_PORT
 718:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   for (int i = 0; i < SLAVE_RECEIVER_PULSES; i++)
 719:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   {
 720:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     GPIO_WriteBit(SecondaryUart(_RxPort), SecondaryUart(_RxPin), Bit_RESET );
 721:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     DelayUs(120);
 722:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     GPIO_WriteBit(SecondaryUart(_RxPort), SecondaryUart(_RxPin), Bit_SET );
 723:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     DelayUs(120);
 724:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   }
 725:arch/stm32/subsystems/radio_control/spektrum_arch.c **** #endif /* RADIO_CONTROL_SPEKTRUM_SECONDARY_PORT */
 726:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }
 727:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 728:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /*****************************************************************************
 729:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 730:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  * Functions to implement busy wait loops with micro second granularity
 731:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *
 732:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  *****************************************************************************/
 733:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 734:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /* set TIM6 to run at DELAY_TIM_FREQUENCY */
 735:arch/stm32/subsystems/radio_control/spektrum_arch.c **** static void SpektrumDelayInit( void ) {
 736:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Enable timer clock */
 737:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 738:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* Time base configuration */
 739:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
 740:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 741:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_Prescaler = (AHB_CLK / DELAY_TIM_FREQUENCY) - 1;
 742:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_Period = UINT16_MAX;
 743:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 744:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 745:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 746:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 747:arch/stm32/subsystems/radio_control/spektrum_arch.c ****  /* Enable counter */
 748:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_Cmd(TIM6, ENABLE);
 749:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }
 750:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 751:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /* wait busy loop, microseconds */
 752:arch/stm32/subsystems/radio_control/spektrum_arch.c **** static void DelayUs( uint16_t uSecs ) {
  25              		.loc 1 752 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
 753:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   uint16_t start = TIM6->CNT;
  31              		.loc 1 753 0
  32 0000 044B     		ldr	r3, .L4
  33 0002 9A8C     		ldrh	r2, [r3, #36]
  34 0004 92B2     		uxth	r2, r2
  35              	.LVL1:
  36              	.L2:
 754:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   /* use 16 bit count wrap around */
 755:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   while((uint16_t)(TIM6->CNT - start) <= uSecs);
  37              		.loc 1 755 0 discriminator 1
  38 0006 998C     		ldrh	r1, [r3, #36]
  39 0008 891A     		subs	r1, r1, r2
  40 000a 89B2     		uxth	r1, r1
  41 000c 8142     		cmp	r1, r0
  42 000e FAD9     		bls	.L2
 756:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }
  43              		.loc 1 756 0
  44 0010 7047     		bx	lr
  45              	.L5:
  46 0012 00BF     		.align	2
  47              	.L4:
  48 0014 00100040 		.word	1073745920
  49              		.cfi_endproc
  50              	.LFE37:
  52              		.section	.text.RadioControlEventImp,"ax",%progbits
  53              		.align	1
  54              		.global	RadioControlEventImp
  55              		.thumb
  56              		.thumb_func
  58              	RadioControlEventImp:
  59              	.LFB28:
 370:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void RadioControlEventImp(void (*frame_handler)(void)) {
  60              		.loc 1 370 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 8
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              	.LVL2:
  65 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  66              	.LCFI0:
  67              		.cfi_def_cfa_offset 48
  68              		.cfi_offset 14, -4
  69              		.cfi_offset 11, -8
  70              		.cfi_offset 10, -12
  71              		.cfi_offset 9, -16
  72              		.cfi_offset 8, -20
  73              		.cfi_offset 7, -24
  74              		.cfi_offset 6, -28
  75              		.cfi_offset 5, -32
  76              		.cfi_offset 4, -36
  77              		.cfi_offset 2, -40
  78              		.cfi_offset 1, -44
  79              		.cfi_offset 0, -48
 379:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if ((PrimarySpektrumState.RcAvailable) ||
  80              		.loc 1 379 0
  81 0004 4349     		ldr	r1, .L27
 370:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void RadioControlEventImp(void (*frame_handler)(void)) {
  82              		.loc 1 370 0
  83 0006 8146     		mov	r9, r0
 379:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if ((PrimarySpektrumState.RcAvailable) ||
  84              		.loc 1 379 0
  85 0008 8A7A     		ldrb	r2, [r1, #10]	@ zero_extendqisi2
  86 000a 434B     		ldr	r3, .L27+4
  87 000c 12B9     		cbnz	r2, .L7
 379:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if ((PrimarySpektrumState.RcAvailable) ||
  88              		.loc 1 379 0 is_stmt 0 discriminator 1
  89 000e 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
  90 0010 63B9     		cbnz	r3, .L8
  91 0012 7CE0     		b	.L6
  92              	.L7:
 383:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     if ((PrimarySpektrumState.RcAvailable) &&
  93              		.loc 1 383 0 is_stmt 1 discriminator 1
  94 0014 987A     		ldrb	r0, [r3, #10]	@ zero_extendqisi2
  95              	.LVL3:
  96 0016 48B1     		cbz	r0, .L8
 385:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       BestReceiver  = (PrimarySpektrumState.LostFrameCnt
  97              		.loc 1 385 0
  98 0018 B1F80880 		ldrh	r8, [r1, #8]
  99 001c 1B89     		ldrh	r3, [r3, #8]
 100 001e 9845     		cmp	r8, r3
 101 0020 94BF     		ite	ls
 102 0022 4FF00008 		movls	r8, #0
 103 0026 4FF00108 		movhi	r8, #1
 104 002a 04E0     		b	.L10
 105              	.LVL4:
 106              	.L8:
 389:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       BestReceiver  = (PrimarySpektrumState.RcAvailable) ? 0 : 1;
 107              		.loc 1 389 0
 108 002c D2F10108 		rsbs	r8, r2, #1
 109 0030 38BF     		it	cc
 110 0032 4FF00008 		movcc	r8, #0
 111              	.LVL5:
 112              	.L10:
 113              	.LBB9:
 402:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     for(int i = 0; (i < SPEKTRUM_CHANNELS_PER_FRAME * ExpectedFrames); i++) {
 114              		.loc 1 402 0
 115 0036 394B     		ldr	r3, .L27+8
 116 0038 4FF0070A 		mov	sl, #7
 117 003c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 118              	.LBE9:
 392:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     PrimarySpektrumState.RcAvailable = 0;
 119              		.loc 1 392 0
 120 003e 354F     		ldr	r7, .L27
 393:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SecondarySpektrumState.RcAvailable = 0;
 121              		.loc 1 393 0
 122 0040 354E     		ldr	r6, .L27+4
 123              	.LBB10:
 402:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     for(int i = 0; (i < SPEKTRUM_CHANNELS_PER_FRAME * ExpectedFrames); i++) {
 124              		.loc 1 402 0
 125 0042 0AFB03FA 		mul	sl, sl, r3
 412:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       switch(EncodingType) {
 126              		.loc 1 412 0
 127 0046 364B     		ldr	r3, .L27+12
 128              	.LBE10:
 392:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     PrimarySpektrumState.RcAvailable = 0;
 129              		.loc 1 392 0
 130 0048 0021     		movs	r1, #0
 131 004a B972     		strb	r1, [r7, #10]
 393:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SecondarySpektrumState.RcAvailable = 0;
 132              		.loc 1 393 0
 133 004c B172     		strb	r1, [r6, #10]
 134              	.LVL6:
 135              	.LBB11:
 412:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       switch(EncodingType) {
 136              		.loc 1 412 0
 137 004e 93F800C0 		ldrb	ip, [r3, #0]	@ zero_extendqisi2
 374:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   uint8_t MaxChannelNum = 0;
 138              		.loc 1 374 0
 139 0052 0D46     		mov	r5, r1
 400:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     ChannelCnt = 0;
 140              		.loc 1 400 0
 141 0054 0A46     		mov	r2, r1
 419:arch/stm32/subsystems/radio_control/spektrum_arch.c ****            SpektrumBuf[ChannelNum] *= MAX_PPRZ/0x156;
 142              		.loc 1 419 0
 143 0056 3348     		ldr	r0, .L27+16
 144 0058 4FF01C0B 		mov	fp, #28
 145 005c CDF80480 		str	r8, [sp, #4]
 402:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     for(int i = 0; (i < SPEKTRUM_CHANNELS_PER_FRAME * ExpectedFrames); i++) {
 146              		.loc 1 402 0
 147 0060 2FE0     		b	.L11
 148              	.LVL7:
 149              	.L19:
 406:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       ChannelData = (!BestReceiver) ? PrimarySpektrumState.values[i] :
 150              		.loc 1 406 0
 151 0062 019B     		ldr	r3, [sp, #4]
 152 0064 0BB9     		cbnz	r3, .L12
 406:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       ChannelData = (!BestReceiver) ? PrimarySpektrumState.values[i] :
 153              		.loc 1 406 0 is_stmt 0 discriminator 1
 154 0066 BC89     		ldrh	r4, [r7, #12]
 155 0068 00E0     		b	.L13
 156              	.L12:
 406:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       ChannelData = (!BestReceiver) ? PrimarySpektrumState.values[i] :
 157              		.loc 1 406 0 discriminator 2
 158 006a B489     		ldrh	r4, [r6, #12]
 159              	.L13:
 160              	.LVL8:
 412:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       switch(EncodingType) {
 161              		.loc 1 412 0 is_stmt 1 discriminator 3
 162 006c BCF1000F 		cmp	ip, #0
 163 0070 03D0     		beq	.L15
 164 0072 BCF1010F 		cmp	ip, #1
 165 0076 21D1     		bne	.L14
 166 0078 0AE0     		b	.L26
 167              	.L15:
 414:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           ChannelNum = (ChannelData >> 10) & 0x0f;
 168              		.loc 1 414 0
 169 007a C4F38323 		ubfx	r3, r4, #10, #4
 170              	.LVL9:
 416:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           if (ChannelNum < RADIO_CONTROL_NB_CHANNEL) {
 171              		.loc 1 416 0
 172 007e 0B2B     		cmp	r3, #11
 173 0080 17D8     		bhi	.L17
 417:arch/stm32/subsystems/radio_control/spektrum_arch.c ****            SpektrumBuf[ChannelNum] = ChannelData & 0x3ff;
 174              		.loc 1 417 0
 175 0082 A405     		lsls	r4, r4, #22
 176              	.LVL10:
 177 0084 A40D     		lsrs	r4, r4, #22
 418:arch/stm32/subsystems/radio_control/spektrum_arch.c ****            SpektrumBuf[ChannelNum] -= 0x200;
 178              		.loc 1 418 0
 179 0086 A4F50074 		sub	r4, r4, #512
 419:arch/stm32/subsystems/radio_control/spektrum_arch.c ****            SpektrumBuf[ChannelNum] *= MAX_PPRZ/0x156;
 180              		.loc 1 419 0
 181 008a 0BFB04F4 		mul	r4, fp, r4
 182 008e 0BE0     		b	.L25
 183              	.LVL11:
 184              	.L26:
 425:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           ChannelNum = (ChannelData >> 11) & 0x0f;
 185              		.loc 1 425 0
 186 0090 C4F3C323 		ubfx	r3, r4, #11, #4
 187              	.LVL12:
 427:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           if (ChannelNum < RADIO_CONTROL_NB_CHANNEL) {
 188              		.loc 1 427 0
 189 0094 0B2B     		cmp	r3, #11
 190 0096 0CD8     		bhi	.L17
 428:arch/stm32/subsystems/radio_control/spektrum_arch.c ****             SpektrumBuf[ChannelNum] = ChannelData & 0x7ff;
 191              		.loc 1 428 0
 192 0098 6405     		lsls	r4, r4, #21
 193              	.LVL13:
 194 009a 640D     		lsrs	r4, r4, #21
 429:arch/stm32/subsystems/radio_control/spektrum_arch.c ****             SpektrumBuf[ChannelNum] -= 0x400;
 195              		.loc 1 429 0
 196 009c A4F58064 		sub	r4, r4, #1024
 430:arch/stm32/subsystems/radio_control/spektrum_arch.c ****             SpektrumBuf[ChannelNum] *= MAX_PPRZ/0x2AC;
 197              		.loc 1 430 0
 198 00a0 4FF00E08 		mov	r8, #14
 199 00a4 08FB04F4 		mul	r4, r8, r4
 200              	.LVL14:
 201              	.L25:
 431:arch/stm32/subsystems/radio_control/spektrum_arch.c ****             ChannelCnt++;
 202              		.loc 1 431 0
 203 00a8 0132     		adds	r2, r2, #1
 204              	.LVL15:
 430:arch/stm32/subsystems/radio_control/spektrum_arch.c ****             SpektrumBuf[ChannelNum] *= MAX_PPRZ/0x2AC;
 205              		.loc 1 430 0
 206 00aa 20F81340 		strh	r4, [r0, r3, lsl #1]	@ movhi
 431:arch/stm32/subsystems/radio_control/spektrum_arch.c ****             ChannelCnt++;
 207              		.loc 1 431 0
 208 00ae D2B2     		uxtb	r2, r2
 209              	.LVL16:
 210 00b0 01E0     		b	.L22
 211              	.LVL17:
 212              	.L17:
 438:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       if ((ChannelNum != 0x0F) && (ChannelNum > MaxChannelNum))
 213              		.loc 1 438 0
 214 00b2 0F2B     		cmp	r3, #15
 215 00b4 02D0     		beq	.L14
 216              	.LVL18:
 217              	.L22:
 438:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       if ((ChannelNum != 0x0F) && (ChannelNum > MaxChannelNum))
 218              		.loc 1 438 0 is_stmt 0 discriminator 1
 219 00b6 9D42     		cmp	r5, r3
 220 00b8 38BF     		it	cc
 221 00ba 1D46     		movcc	r5, r3
 222              	.LVL19:
 223              	.L14:
 402:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     for(int i = 0; (i < SPEKTRUM_CHANNELS_PER_FRAME * ExpectedFrames); i++) {
 224              		.loc 1 402 0 is_stmt 1
 225 00bc 0131     		adds	r1, r1, #1
 226              	.LVL20:
 227 00be 0237     		adds	r7, r7, #2
 228 00c0 0236     		adds	r6, r6, #2
 229              	.LVL21:
 230              	.L11:
 402:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     for(int i = 0; (i < SPEKTRUM_CHANNELS_PER_FRAME * ExpectedFrames); i++) {
 231              		.loc 1 402 0 is_stmt 0 discriminator 1
 232 00c2 5145     		cmp	r1, sl
 233 00c4 CDDB     		blt	.L19
 234              	.LBE11:
 444:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     if (ChannelCnt >= (MaxChannelNum + 1)) {
 235              		.loc 1 444 0 is_stmt 1
 236 00c6 9542     		cmp	r5, r2
 237 00c8 21DA     		bge	.L6
 445:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       radio_control.frame_cpt++;
 238              		.loc 1 445 0
 239 00ca 174B     		ldr	r3, .L27+20
 446:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       radio_control.time_since_last_frame = 0;
 240              		.loc 1 446 0
 241 00cc 0021     		movs	r1, #0
 242              	.LVL22:
 445:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       radio_control.frame_cpt++;
 243              		.loc 1 445 0
 244 00ce 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 245              	.LVL23:
 246              	.LBB12:
 449:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         radio_control.values[i] = SpektrumBuf[i];
 247              		.loc 1 449 0
 248 00d0 DFF850E0 		ldr	lr, .L27+16
 249              	.LBE12:
 445:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       radio_control.frame_cpt++;
 250              		.loc 1 445 0
 251 00d4 0132     		adds	r2, r2, #1
 252              	.LBB13:
 454:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         radio_control.values[i] *= SpektrumSigns[i];
 253              		.loc 1 454 0
 254 00d6 154E     		ldr	r6, .L27+24
 255              	.LBE13:
 445:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       radio_control.frame_cpt++;
 256              		.loc 1 445 0
 257 00d8 1A71     		strb	r2, [r3, #4]
 446:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       radio_control.time_since_last_frame = 0;
 258              		.loc 1 446 0
 259 00da 5970     		strb	r1, [r3, #1]
 447:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       radio_control.status = RC_OK;
 260              		.loc 1 447 0
 261 00dc 1970     		strb	r1, [r3, #0]
 262              	.LVL24:
 448:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       for (int i = 0; i < (MaxChannelNum + 1); i++) {
 263              		.loc 1 448 0
 264 00de 0A46     		mov	r2, r1
 265              	.LBB14:
 452:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           radio_control.values[i] /= 2;
 266              		.loc 1 452 0
 267 00e0 0227     		movs	r7, #2
 268              	.LVL25:
 269              	.L21:
 449:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         radio_control.values[i] = SpektrumBuf[i];
 270              		.loc 1 449 0
 271 00e2 31F80E40 		ldrh	r4, [r1, lr]
 370:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void RadioControlEventImp(void (*frame_handler)(void)) {
 272              		.loc 1 370 0
 273 00e6 C818     		adds	r0, r1, r3
 449:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         radio_control.values[i] = SpektrumBuf[i];
 274              		.loc 1 449 0
 275 00e8 C480     		strh	r4, [r0, #6]	@ movhi
 450:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         if (i == RADIO_THROTTLE ) {
 276              		.loc 1 450 0
 277 00ea 2AB9     		cbnz	r2, .L20
 451:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           radio_control.values[i] += MAX_PPRZ;
 278              		.loc 1 451 0
 279 00ec 04F51654 		add	r4, r4, #9600
 452:arch/stm32/subsystems/radio_control/spektrum_arch.c ****           radio_control.values[i] /= 2;
 280              		.loc 1 452 0
 281 00f0 24B2     		sxth	r4, r4
 282 00f2 94FBF7F4 		sdiv	r4, r4, r7
 283 00f6 DC80     		strh	r4, [r3, #6]	@ movhi
 284              	.L20:
 454:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         radio_control.values[i] *= SpektrumSigns[i];
 285              		.loc 1 454 0
 286 00f8 9457     		ldrsb	r4, [r2, r6]
 287 00fa B0F806C0 		ldrh	ip, [r0, #6]
 448:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       for (int i = 0; i < (MaxChannelNum + 1); i++) {
 288              		.loc 1 448 0
 289 00fe 0132     		adds	r2, r2, #1
 290              	.LVL26:
 454:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         radio_control.values[i] *= SpektrumSigns[i];
 291              		.loc 1 454 0
 292 0100 0CFB04F4 		mul	r4, ip, r4
 448:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       for (int i = 0; i < (MaxChannelNum + 1); i++) {
 293              		.loc 1 448 0
 294 0104 0231     		adds	r1, r1, #2
 295 0106 9542     		cmp	r5, r2
 454:arch/stm32/subsystems/radio_control/spektrum_arch.c ****         radio_control.values[i] *= SpektrumSigns[i];
 296              		.loc 1 454 0
 297 0108 C480     		strh	r4, [r0, #6]	@ movhi
 448:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       for (int i = 0; i < (MaxChannelNum + 1); i++) {
 298              		.loc 1 448 0
 299 010a EADA     		bge	.L21
 300              	.LBE14:
 456:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       (*frame_handler)();
 301              		.loc 1 456 0
 302 010c C847     		blx	r9
 303              	.LVL27:
 304              	.L6:
 459:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }
 305              		.loc 1 459 0
 306 010e BDE8FE8F 		pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 307              	.L28:
 308 0112 00BF     		.align	2
 309              	.L27:
 310 0114 00000000 		.word	.LANCHOR0
 311 0118 00000000 		.word	.LANCHOR1
 312 011c 00000000 		.word	.LANCHOR2
 313 0120 00000000 		.word	.LANCHOR3
 314 0124 00000000 		.word	.LANCHOR4
 315 0128 00000000 		.word	radio_control
 316 012c 00000000 		.word	.LANCHOR5
 317              		.cfi_endproc
 318              	.LFE28:
 320              		.section	.text.SpektrumTimerInit,"ax",%progbits
 321              		.align	1
 322              		.global	SpektrumTimerInit
 323              		.thumb
 324              		.thumb_func
 326              	SpektrumTimerInit:
 327              	.LFB29:
 468:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void SpektrumTimerInit( void ) {
 328              		.loc 1 468 0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 16
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 332 0000 30B5     		push	{r4, r5, lr}
 333              	.LCFI1:
 334              		.cfi_def_cfa_offset 12
 335              		.cfi_offset 14, -4
 336              		.cfi_offset 5, -8
 337              		.cfi_offset 4, -12
 471:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 338              		.loc 1 471 0
 339 0002 0121     		movs	r1, #1
 468:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void SpektrumTimerInit( void ) {
 340              		.loc 1 468 0
 341 0004 85B0     		sub	sp, sp, #20
 342              	.LCFI2:
 343              		.cfi_def_cfa_offset 32
 471:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 344              		.loc 1 471 0
 345 0006 1020     		movs	r0, #16
 346 0008 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 475:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 347              		.loc 1 475 0
 348 000c 6846     		mov	r0, sp
 349 000e FFF7FEFF 		bl	TIM_TimeBaseStructInit
 477:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_Period = TIM_TICS_FOR_100us-1;
 350              		.loc 1 477 0
 351 0012 6323     		movs	r3, #99
 481:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 352              		.loc 1 481 0
 353 0014 164D     		ldr	r5, .L30
 477:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_Period = TIM_TICS_FOR_100us-1;
 354              		.loc 1 477 0
 355 0016 ADF80430 		strh	r3, [sp, #4]	@ movhi
 478:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_Prescaler = ((AHB_CLK / TIM_FREQ_1000000) - 1);
 356              		.loc 1 478 0
 357 001a 4723     		movs	r3, #71
 358 001c ADF80030 		strh	r3, [sp, #0]	@ movhi
 479:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 359              		.loc 1 479 0
 360 0020 0023     		movs	r3, #0
 481:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 361              		.loc 1 481 0
 362 0022 6946     		mov	r1, sp
 479:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 363              		.loc 1 479 0
 364 0024 ADF80630 		strh	r3, [sp, #6]	@ movhi
 481:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 365              		.loc 1 481 0
 366 0028 2846     		mov	r0, r5
 480:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
 367              		.loc 1 480 0
 368 002a 1023     		movs	r3, #16
 369 002c ADF80230 		strh	r3, [sp, #2]	@ movhi
 481:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 370              		.loc 1 481 0
 371 0030 FFF7FEFF 		bl	TIM_TimeBaseInit
 487:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_InitStructure.NVIC_IRQChannel = TIM6_IRQn;
 372              		.loc 1 487 0
 373 0034 3623     		movs	r3, #54
 489:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 374              		.loc 1 489 0
 375 0036 0124     		movs	r4, #1
 487:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_InitStructure.NVIC_IRQChannel = TIM6_IRQn;
 376              		.loc 1 487 0
 377 0038 8DF80C30 		strb	r3, [sp, #12]
 491:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_Init(&NVIC_InitStructure);
 378              		.loc 1 491 0
 379 003c 03A8     		add	r0, sp, #12
 488:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 380              		.loc 1 488 0
 381 003e 0223     		movs	r3, #2
 382 0040 8DF80D30 		strb	r3, [sp, #13]
 489:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 383              		.loc 1 489 0
 384 0044 8DF80E40 		strb	r4, [sp, #14]
 490:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 385              		.loc 1 490 0
 386 0048 8DF80F40 		strb	r4, [sp, #15]
 491:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_Init(&NVIC_InitStructure);
 387              		.loc 1 491 0
 388 004c FFF7FEFF 		bl	NVIC_Init
 494:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 389              		.loc 1 494 0
 390 0050 2846     		mov	r0, r5
 391 0052 2146     		mov	r1, r4
 392 0054 2246     		mov	r2, r4
 393 0056 FFF7FEFF 		bl	TIM_ITConfig
 495:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_ClearFlag(TIM6, TIM_FLAG_Update);
 394              		.loc 1 495 0
 395 005a 2846     		mov	r0, r5
 396 005c 2146     		mov	r1, r4
 397 005e FFF7FEFF 		bl	TIM_ClearFlag
 498:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_Cmd(TIM6, ENABLE);
 398              		.loc 1 498 0
 399 0062 2846     		mov	r0, r5
 400 0064 2146     		mov	r1, r4
 401 0066 FFF7FEFF 		bl	TIM_Cmd
 499:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }
 402              		.loc 1 499 0
 403 006a 05B0     		add	sp, sp, #20
 404 006c 30BD     		pop	{r4, r5, pc}
 405              	.L31:
 406 006e 00BF     		.align	2
 407              	.L30:
 408 0070 00100040 		.word	1073745920
 409              		.cfi_endproc
 410              	.LFE29:
 412              		.section	.text.tim6_irq_handler,"ax",%progbits
 413              		.align	1
 414              		.global	tim6_irq_handler
 415              		.thumb
 416              		.thumb_func
 418              	tim6_irq_handler:
 419              	.LFB30:
 506:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void tim6_irq_handler( void ) {
 420              		.loc 1 506 0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 0
 423              		@ frame_needed = 0, uses_anonymous_args = 0
 424 0000 08B5     		push	{r3, lr}
 425              	.LCFI3:
 426              		.cfi_def_cfa_offset 8
 427              		.cfi_offset 14, -4
 428              		.cfi_offset 3, -8
 508:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 429              		.loc 1 508 0
 430 0002 0748     		ldr	r0, .L35
 431 0004 0121     		movs	r1, #1
 432 0006 FFF7FEFF 		bl	TIM_ClearITPendingBit
 510:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if (PrimarySpektrumState.SpektrumTimer)
 433              		.loc 1 510 0
 434 000a 064B     		ldr	r3, .L35+4
 435 000c 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 436 000e 0AB1     		cbz	r2, .L33
 511:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     --PrimarySpektrumState.SpektrumTimer;
 437              		.loc 1 511 0
 438 0010 013A     		subs	r2, r2, #1
 439 0012 5A70     		strb	r2, [r3, #1]
 440              	.L33:
 513:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if (SecondarySpektrumState.SpektrumTimer)
 441              		.loc 1 513 0
 442 0014 044B     		ldr	r3, .L35+8
 443 0016 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 444 0018 0AB1     		cbz	r2, .L32
 514:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     --SecondarySpektrumState.SpektrumTimer;
 445              		.loc 1 514 0
 446 001a 013A     		subs	r2, r2, #1
 447 001c 5A70     		strb	r2, [r3, #1]
 448              	.L32:
 449 001e 08BD     		pop	{r3, pc}
 450              	.L36:
 451              		.align	2
 452              	.L35:
 453 0020 00100040 		.word	1073745920
 454 0024 00000000 		.word	.LANCHOR0
 455 0028 00000000 		.word	.LANCHOR1
 456              		.cfi_endproc
 457              	.LFE30:
 459              		.section	.text.SpektrumUartInit,"ax",%progbits
 460              		.align	1
 461              		.global	SpektrumUartInit
 462              		.thumb
 463              		.thumb_func
 465              	SpektrumUartInit:
 466              	.LFB31:
 523:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void SpektrumUartInit(void) {
 467              		.loc 1 523 0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 32
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 472              	.LCFI4:
 473              		.cfi_def_cfa_offset 36
 474              		.cfi_offset 14, -4
 475              		.cfi_offset 11, -8
 476              		.cfi_offset 10, -12
 477              		.cfi_offset 9, -16
 478              		.cfi_offset 8, -20
 479              		.cfi_offset 7, -24
 480              		.cfi_offset 6, -28
 481              		.cfi_offset 5, -32
 482              		.cfi_offset 4, -36
 526:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   PrimaryUart(_clk)(PrimaryUart(_UartPeriph), ENABLE);;
 483              		.loc 1 526 0
 484 0004 0121     		movs	r1, #1
 523:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void SpektrumUartInit(void) {
 485              		.loc 1 523 0
 486 0006 89B0     		sub	sp, sp, #36
 487              	.LCFI5:
 488              		.cfi_def_cfa_offset 72
 526:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   PrimaryUart(_clk)(PrimaryUart(_UartPeriph), ENABLE);;
 489              		.loc 1 526 0
 490 0008 4FF48040 		mov	r0, #16384
 491 000c FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 533:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannelSubPriority = 1;
 492              		.loc 1 533 0
 493 0010 0124     		movs	r4, #1
 551:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   USART_Init(PrimaryUart(_reg), &usart);
 494              		.loc 1 551 0
 495 0012 DFF80881 		ldr	r8, .L38+12
 531:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannel = PrimaryUart(_IRQn);
 496              		.loc 1 531 0
 497 0016 2523     		movs	r3, #37
 532:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannelPreemptionPriority = 2;
 498              		.loc 1 532 0
 499 0018 4FF00209 		mov	r9, #2
 535:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_Init(&nvic);
 500              		.loc 1 535 0
 501 001c 06A8     		add	r0, sp, #24
 541:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
 502              		.loc 1 541 0
 503 001e 0426     		movs	r6, #4
 531:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannel = PrimaryUart(_IRQn);
 504              		.loc 1 531 0
 505 0020 8DF81830 		strb	r3, [sp, #24]
 538:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 506              		.loc 1 538 0
 507 0024 4FF0030A 		mov	sl, #3
 532:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannelPreemptionPriority = 2;
 508              		.loc 1 532 0
 509 0028 8DF81990 		strb	r9, [sp, #25]
 533:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannelSubPriority = 1;
 510              		.loc 1 533 0
 511 002c 8DF81A40 		strb	r4, [sp, #26]
 534:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannelCmd = ENABLE;
 512              		.loc 1 534 0
 513 0030 8DF81B40 		strb	r4, [sp, #27]
 535:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_Init(&nvic);
 514              		.loc 1 535 0
 515 0034 FFF7FEFF 		bl	NVIC_Init
 540:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Pin   = PrimaryUart(_RxPin);
 516              		.loc 1 540 0
 517 0038 4FF48063 		mov	r3, #1024
 542:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(PrimaryUart(_RxPort), &GPIO_InitStructure);
 518              		.loc 1 542 0
 519 003c 07A9     		add	r1, sp, #28
 520 003e 3448     		ldr	r0, .L38
 546:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_WordLength          = USART_WordLength_8b;
 521              		.loc 1 546 0
 522 0040 0025     		movs	r5, #0
 545:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_BaudRate            = B115200;
 523              		.loc 1 545 0
 524 0042 4FF4E137 		mov	r7, #115200
 540:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Pin   = PrimaryUart(_RxPin);
 525              		.loc 1 540 0
 526 0046 ADF81C30 		strh	r3, [sp, #28]	@ movhi
 553:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   USART_ITConfig(PrimaryUart(_reg), USART_IT_RXNE, ENABLE);
 527              		.loc 1 553 0
 528 004a 40F2255B 		movw	fp, #1317
 538:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 529              		.loc 1 538 0
 530 004e 8DF81EA0 		strb	sl, [sp, #30]
 541:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
 531              		.loc 1 541 0
 532 0052 8DF81F60 		strb	r6, [sp, #31]
 542:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(PrimaryUart(_RxPort), &GPIO_InitStructure);
 533              		.loc 1 542 0
 534 0056 FFF7FEFF 		bl	GPIO_Init
 550:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_Mode                = USART_Mode_Rx;
 535              		.loc 1 550 0
 536 005a 3346     		mov	r3, r6	@ movhi
 551:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   USART_Init(PrimaryUart(_reg), &usart);
 537              		.loc 1 551 0
 538 005c 4046     		mov	r0, r8
 539 005e 02A9     		add	r1, sp, #8
 540 0060 0193     		str	r3, [sp, #4]
 546:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_WordLength          = USART_WordLength_8b;
 541              		.loc 1 546 0
 542 0062 ADF80C50 		strh	r5, [sp, #12]	@ movhi
 547:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_StopBits            = USART_StopBits_1;
 543              		.loc 1 547 0
 544 0066 ADF80E50 		strh	r5, [sp, #14]	@ movhi
 548:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_Parity              = USART_Parity_No;
 545              		.loc 1 548 0
 546 006a ADF81050 		strh	r5, [sp, #16]	@ movhi
 549:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 547              		.loc 1 549 0
 548 006e ADF81450 		strh	r5, [sp, #20]	@ movhi
 545:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_BaudRate            = B115200;
 549              		.loc 1 545 0
 550 0072 0297     		str	r7, [sp, #8]
 550:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_Mode                = USART_Mode_Rx;
 551              		.loc 1 550 0
 552 0074 ADF81260 		strh	r6, [sp, #18]	@ movhi
 551:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   USART_Init(PrimaryUart(_reg), &usart);
 553              		.loc 1 551 0
 554 0078 FFF7FEFF 		bl	USART_Init
 553:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   USART_ITConfig(PrimaryUart(_reg), USART_IT_RXNE, ENABLE);
 555              		.loc 1 553 0
 556 007c 2246     		mov	r2, r4
 557 007e 4046     		mov	r0, r8
 558 0080 5946     		mov	r1, fp
 559 0082 FFF7FEFF 		bl	USART_ITConfig
 556:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   pprz_usart_set_baudrate(PrimaryUart(_reg), B115200);
 560              		.loc 1 556 0
 561 0086 4046     		mov	r0, r8
 562 0088 3946     		mov	r1, r7
 563 008a FFF7FEFF 		bl	usart_set_baudrate
 558:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   USART_Cmd(PrimaryUart(_reg), ENABLE);
 564              		.loc 1 558 0
 565 008e 4046     		mov	r0, r8
 566 0090 2146     		mov	r1, r4
 567 0092 FFF7FEFF 		bl	USART_Cmd
 564:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   SecondaryUart(_clk)(SecondaryUart(_UartPeriph), ENABLE);
 568              		.loc 1 564 0
 569 0096 2146     		mov	r1, r4
 570 0098 4FF48010 		mov	r0, #1048576
 571 009c FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 567:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannel = SecondaryUart(_IRQn);
 572              		.loc 1 567 0
 573 00a0 3522     		movs	r2, #53
 571:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_Init(&nvic);
 574              		.loc 1 571 0
 575 00a2 06A8     		add	r0, sp, #24
 567:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannel = SecondaryUart(_IRQn);
 576              		.loc 1 567 0
 577 00a4 8DF81820 		strb	r2, [sp, #24]
 568:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannelPreemptionPriority = 2;
 578              		.loc 1 568 0
 579 00a8 8DF81990 		strb	r9, [sp, #25]
 569:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannelSubPriority = 2;
 580              		.loc 1 569 0
 581 00ac 8DF81A90 		strb	r9, [sp, #26]
 570:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   nvic.NVIC_IRQChannelCmd = ENABLE;
 582              		.loc 1 570 0
 583 00b0 8DF81B40 		strb	r4, [sp, #27]
 571:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   NVIC_Init(&nvic);
 584              		.loc 1 571 0
 585 00b4 FFF7FEFF 		bl	NVIC_Init
 576:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
 586              		.loc 1 576 0
 587 00b8 019B     		ldr	r3, [sp, #4]
 577:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(SecondaryUart(_RxPort), &GPIO_InitStructure);
 588              		.loc 1 577 0
 589 00ba 07A9     		add	r1, sp, #28
 590 00bc 1548     		ldr	r0, .L38+4
 576:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
 591              		.loc 1 576 0
 592 00be 8DF81F30 		strb	r3, [sp, #31]
 573:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 593              		.loc 1 573 0
 594 00c2 8DF81EA0 		strb	sl, [sp, #30]
 575:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Pin   = SecondaryUart(_RxPin);
 595              		.loc 1 575 0
 596 00c6 ADF81C60 		strh	r6, [sp, #28]	@ movhi
 577:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(SecondaryUart(_RxPort), &GPIO_InitStructure);
 597              		.loc 1 577 0
 598 00ca FFF7FEFF 		bl	GPIO_Init
 580:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_WordLength          = USART_WordLength_8b;
 599              		.loc 1 580 0
 600 00ce ADF80C50 		strh	r5, [sp, #12]	@ movhi
 581:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_StopBits            = USART_StopBits_1;
 601              		.loc 1 581 0
 602 00d2 ADF80E50 		strh	r5, [sp, #14]	@ movhi
 582:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_Parity              = USART_Parity_No;
 603              		.loc 1 582 0
 604 00d6 ADF81050 		strh	r5, [sp, #16]	@ movhi
 583:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 605              		.loc 1 583 0
 606 00da ADF81450 		strh	r5, [sp, #20]	@ movhi
 585:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   USART_Init(SecondaryUart(_reg), &usart);
 607              		.loc 1 585 0
 608 00de 0E4D     		ldr	r5, .L38+8
 609 00e0 02A9     		add	r1, sp, #8
 610 00e2 2846     		mov	r0, r5
 579:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_BaudRate            = B115200;
 611              		.loc 1 579 0
 612 00e4 0297     		str	r7, [sp, #8]
 584:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   usart.USART_Mode                = USART_Mode_Rx;
 613              		.loc 1 584 0
 614 00e6 ADF81260 		strh	r6, [sp, #18]	@ movhi
 585:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   USART_Init(SecondaryUart(_reg), &usart);
 615              		.loc 1 585 0
 616 00ea FFF7FEFF 		bl	USART_Init
 587:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   USART_ITConfig(SecondaryUart(_reg), USART_IT_RXNE, ENABLE);
 617              		.loc 1 587 0
 618 00ee 2846     		mov	r0, r5
 619 00f0 5946     		mov	r1, fp
 620 00f2 2246     		mov	r2, r4
 621 00f4 FFF7FEFF 		bl	USART_ITConfig
 590:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   pprz_usart_set_baudrate(SecondaryUart(_reg), B115200);
 622              		.loc 1 590 0
 623 00f8 2846     		mov	r0, r5
 624 00fa 3946     		mov	r1, r7
 625 00fc FFF7FEFF 		bl	usart_set_baudrate
 592:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   USART_Cmd(SecondaryUart(_reg), ENABLE);
 626              		.loc 1 592 0
 627 0100 2846     		mov	r0, r5
 628 0102 2146     		mov	r1, r4
 629 0104 FFF7FEFF 		bl	USART_Cmd
 595:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }
 630              		.loc 1 595 0
 631 0108 09B0     		add	sp, sp, #36
 632 010a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 633              	.L39:
 634 010e 00BF     		.align	2
 635              	.L38:
 636 0110 00080140 		.word	1073809408
 637 0114 00140140 		.word	1073812480
 638 0118 00500040 		.word	1073762304
 639 011c 00380140 		.word	1073821696
 640              		.cfi_endproc
 641              	.LFE31:
 643              		.section	.text.radio_control_impl_init,"ax",%progbits
 644              		.align	1
 645              		.global	radio_control_impl_init
 646              		.thumb
 647              		.thumb_func
 649              	radio_control_impl_init:
 650              	.LFB27:
 140:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void radio_control_impl_init(void) {
 651              		.loc 1 140 0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 0
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 655 0000 08B5     		push	{r3, lr}
 656              	.LCFI6:
 657              		.cfi_def_cfa_offset 8
 658              		.cfi_offset 14, -4
 659              		.cfi_offset 3, -8
 141:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   SpektrumTimerInit();
 660              		.loc 1 141 0
 661 0002 FFF7FEFF 		bl	SpektrumTimerInit
 144:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }
 662              		.loc 1 144 0
 663 0006 BDE80840 		pop	{r3, lr}
 143:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   SpektrumUartInit();
 664              		.loc 1 143 0
 665 000a FFF7FEBF 		b	SpektrumUartInit
 666              		.cfi_endproc
 667              	.LFE27:
 669              		.section	.text.usart1_irq_handler,"ax",%progbits
 670              		.align	1
 671              		.global	usart1_irq_handler
 672              		.thumb
 673              		.thumb_func
 675              	usart1_irq_handler:
 676              	.LFB32:
 603:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void PrimaryUart(_irq_handler)(void) {
 677              		.loc 1 603 0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 0
 680              		@ frame_needed = 0, uses_anonymous_args = 0
 681 0000 10B5     		push	{r4, lr}
 682              	.LCFI7:
 683              		.cfi_def_cfa_offset 8
 684              		.cfi_offset 14, -4
 685              		.cfi_offset 4, -8
 605:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if(USART_GetITStatus(PrimaryUart(_reg), USART_IT_TXE) != RESET) {
 686              		.loc 1 605 0
 687 0002 4048     		ldr	r0, .L55
 688 0004 40F22771 		movw	r1, #1831
 689 0008 FFF7FEFF 		bl	USART_GetITStatus
 690 000c 28B1     		cbz	r0, .L42
 606:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       USART_ITConfig(PrimaryUart(_reg), USART_IT_TXE, DISABLE);
 691              		.loc 1 606 0
 692 000e 3D48     		ldr	r0, .L55
 693 0010 40F22771 		movw	r1, #1831
 694 0014 0022     		movs	r2, #0
 695 0016 FFF7FEFF 		bl	USART_ITConfig
 696              	.L42:
 609:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if(USART_GetITStatus(PrimaryUart(_reg), USART_IT_RXNE) != RESET) {
 697              		.loc 1 609 0
 698 001a 3A48     		ldr	r0, .L55
 699 001c 40F22551 		movw	r1, #1317
 700 0020 FFF7FEFF 		bl	USART_GetITStatus
 701 0024 0028     		cmp	r0, #0
 702 0026 6CD0     		beq	.L41
 703              	.LBB15:
 610:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     uint8_t b =  USART_ReceiveData(PrimaryUart(_reg));
 704              		.loc 1 610 0
 705 0028 3648     		ldr	r0, .L55
 706 002a FFF7FEFF 		bl	USART_ReceiveData
 707              	.LVL28:
 708              	.LBB16:
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 709              		.loc 1 611 0
 710 002e 364B     		ldr	r3, .L55+4
 711 0030 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 712 0032 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 713              	.LVL29:
 714 0034 012A     		cmp	r2, #1
 715 0036 08D0     		beq	.L44
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 716              		.loc 1 611 0 is_stmt 0 discriminator 2
 717 0038 D1F10101 		rsbs	r1, r1, #1
 718              	.LVL30:
 719 003c 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 720 003e 38BF     		it	cc
 721 0040 0021     		movcc	r1, #0
 722              	.LBE16:
 610:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     uint8_t b =  USART_ReceiveData(PrimaryUart(_reg));
 723              		.loc 1 610 0 is_stmt 1 discriminator 2
 724 0042 C0B2     		uxtb	r0, r0
 725              	.LVL31:
 726              	.LBB17:
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 727              		.loc 1 611 0 discriminator 2
 728 0044 0C46     		mov	r4, r1
 729 0046 6AB9     		cbnz	r2, .L45
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 730              		.loc 1 611 0 is_stmt 0 discriminator 3
 731 0048 49B9     		cbnz	r1, .L46
 732              	.L44:
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 733              		.loc 1 611 0 discriminator 1
 734 004a 2F4B     		ldr	r3, .L55+4
 735 004c 0022     		movs	r2, #0
 736 004e 4621     		movs	r1, #70
 737 0050 1A70     		strb	r2, [r3, #0]
 738 0052 5970     		strb	r1, [r3, #1]
 739 0054 9A70     		strb	r2, [r3, #2]
 740 0056 DA70     		strb	r2, [r3, #3]
 741 0058 1A71     		strb	r2, [r3, #4]
 742 005a 9A71     		strb	r2, [r3, #6]
 743 005c 10BD     		pop	{r4, pc}
 744              	.L46:
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 745              		.loc 1 611 0 discriminator 5
 746 005e 1881     		strh	r0, [r3, #8]	@ movhi
 747 0060 0122     		movs	r2, #1
 748 0062 0FE0     		b	.L54
 749              	.L45:
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 750              		.loc 1 611 0 discriminator 6
 751 0064 19B1     		cbz	r1, .L47
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 752              		.loc 1 611 0 discriminator 9
 753 0066 0122     		movs	r2, #1
 754 0068 1A70     		strb	r2, [r3, #0]
 755 006a 4622     		movs	r2, #70
 756 006c 17E0     		b	.L53
 757              	.L47:
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 758              		.loc 1 611 0 discriminator 10
 759 006e 012A     		cmp	r2, #1
 760 0070 0BD1     		bne	.L48
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 761              		.loc 1 611 0 discriminator 14
 762 0072 264A     		ldr	r2, .L55+8
 763 0074 C0F30011 		ubfx	r1, r0, #4, #1
 764 0078 1170     		strb	r1, [r2, #0]
 765 007a 254A     		ldr	r2, .L55+12
 766 007c 00F00300 		and	r0, r0, #3
 767 0080 1070     		strb	r0, [r2, #0]
 768 0082 0222     		movs	r2, #2
 769              	.L54:
 770 0084 9A70     		strb	r2, [r3, #2]
 771 0086 0322     		movs	r2, #3
 772 0088 09E0     		b	.L53
 773              	.L48:
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 774              		.loc 1 611 0 discriminator 12
 775 008a 022A     		cmp	r2, #2
 776 008c 09D1     		bne	.L49
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 777              		.loc 1 611 0 discriminator 16
 778 008e DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 779 0090 5871     		strb	r0, [r3, #5]
 780 0092 0AB9     		cbnz	r2, .L50
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 781              		.loc 1 611 0 discriminator 18
 782 0094 C009     		lsrs	r0, r0, #7
 783 0096 9871     		strb	r0, [r3, #6]
 784              	.L50:
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 785              		.loc 1 611 0 discriminator 19
 786 0098 1B4B     		ldr	r3, .L55+4
 787 009a 0322     		movs	r2, #3
 788 009c 9A70     		strb	r2, [r3, #2]
 789              	.L53:
 790 009e 5A70     		strb	r2, [r3, #1]
 791 00a0 10BD     		pop	{r4, pc}
 792              	.L49:
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 793              		.loc 1 611 0 discriminator 17
 794 00a2 032A     		cmp	r2, #3
 795 00a4 10D1     		bne	.L51
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 796              		.loc 1 611 0 discriminator 20
 797 00a6 0224     		movs	r4, #2
 798 00a8 5A70     		strb	r2, [r3, #1]
 799 00aa 9972     		strb	r1, [r3, #10]
 800              	.LVL32:
 801 00ac DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 802 00ae 9979     		ldrb	r1, [r3, #6]	@ zero_extendqisi2
 803 00b0 9C70     		strb	r4, [r3, #2]
 804 00b2 0724     		movs	r4, #7
 805 00b4 04FB0121 		mla	r1, r4, r1, r2
 806 00b8 5C79     		ldrb	r4, [r3, #5]	@ zero_extendqisi2
 807 00ba 03EB4101 		add	r1, r3, r1, lsl #1
 808 00be 40EA0420 		orr	r0, r0, r4, lsl #8
 809              	.LVL33:
 810 00c2 0132     		adds	r2, r2, #1
 811 00c4 8881     		strh	r0, [r1, #12]	@ movhi
 812 00c6 DA70     		strb	r2, [r3, #3]
 813              	.L51:
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 814              		.loc 1 611 0 discriminator 21
 815 00c8 0F4B     		ldr	r3, .L55+4
 816 00ca DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 817 00cc 062A     		cmp	r2, #6
 818 00ce 18D9     		bls	.L41
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 819              		.loc 1 611 0 discriminator 22
 820 00d0 1979     		ldrb	r1, [r3, #4]	@ zero_extendqisi2
 821 00d2 0F4A     		ldr	r2, .L55+12
 822 00d4 0131     		adds	r1, r1, #1
 823 00d6 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 824 00d8 C9B2     		uxtb	r1, r1
 825 00da 9142     		cmp	r1, r2
 826 00dc 1971     		strb	r1, [r3, #4]
 827 00de 03D1     		bne	.L52
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 828              		.loc 1 611 0 discriminator 23
 829 00e0 0121     		movs	r1, #1
 830 00e2 9972     		strb	r1, [r3, #10]
 831 00e4 0021     		movs	r1, #0
 832 00e6 1971     		strb	r1, [r3, #4]
 833              	.L52:
 611:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, PrimarySpektrumState, 0);
 834              		.loc 1 611 0 discriminator 25
 835 00e8 084B     		ldr	r3, .L55+8
 836 00ea 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 837 00ec 094B     		ldr	r3, .L55+16
 838 00ee 1970     		strb	r1, [r3, #0]
 839 00f0 094B     		ldr	r3, .L55+20
 840 00f2 1A70     		strb	r2, [r3, #0]
 841 00f4 044B     		ldr	r3, .L55+4
 842 00f6 0022     		movs	r2, #0
 843 00f8 9A70     		strb	r2, [r3, #2]
 844 00fa DA70     		strb	r2, [r3, #3]
 845 00fc 9A71     		strb	r2, [r3, #6]
 846 00fe 4622     		movs	r2, #70
 847 0100 5A70     		strb	r2, [r3, #1]
 848              	.L41:
 849 0102 10BD     		pop	{r4, pc}
 850              	.L56:
 851              		.align	2
 852              	.L55:
 853 0104 00380140 		.word	1073821696
 854 0108 00000000 		.word	.LANCHOR0
 855 010c 00000000 		.word	.LANCHOR6
 856 0110 00000000 		.word	.LANCHOR7
 857 0114 00000000 		.word	.LANCHOR3
 858 0118 00000000 		.word	.LANCHOR2
 859              	.LBE17:
 860              	.LBE15:
 861              		.cfi_endproc
 862              	.LFE32:
 864              		.section	.text.usart5_irq_handler,"ax",%progbits
 865              		.align	1
 866              		.global	usart5_irq_handler
 867              		.thumb
 868              		.thumb_func
 870              	usart5_irq_handler:
 871              	.LFB33:
 622:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void SecondaryUart(_irq_handler)(void) {
 872              		.loc 1 622 0 is_stmt 1
 873              		.cfi_startproc
 874              		@ args = 0, pretend = 0, frame = 0
 875              		@ frame_needed = 0, uses_anonymous_args = 0
 876 0000 10B5     		push	{r4, lr}
 877              	.LCFI8:
 878              		.cfi_def_cfa_offset 8
 879              		.cfi_offset 14, -4
 880              		.cfi_offset 4, -8
 624:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if(USART_GetITStatus(SecondaryUart(_reg), USART_IT_TXE) != RESET) {
 881              		.loc 1 624 0
 882 0002 3D48     		ldr	r0, .L71
 883 0004 40F22771 		movw	r1, #1831
 884 0008 FFF7FEFF 		bl	USART_GetITStatus
 885 000c 28B1     		cbz	r0, .L58
 625:arch/stm32/subsystems/radio_control/spektrum_arch.c ****       USART_ITConfig(SecondaryUart(_reg), USART_IT_TXE, DISABLE);
 886              		.loc 1 625 0
 887 000e 3A48     		ldr	r0, .L71
 888 0010 40F22771 		movw	r1, #1831
 889 0014 0022     		movs	r2, #0
 890 0016 FFF7FEFF 		bl	USART_ITConfig
 891              	.L58:
 628:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if(USART_GetITStatus(SecondaryUart(_reg), USART_IT_RXNE) != RESET) {
 892              		.loc 1 628 0
 893 001a 3748     		ldr	r0, .L71
 894 001c 40F22551 		movw	r1, #1317
 895 0020 FFF7FEFF 		bl	USART_GetITStatus
 896 0024 0028     		cmp	r0, #0
 897 0026 66D0     		beq	.L57
 898              	.LBB18:
 629:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     uint8_t b =  USART_ReceiveData(SecondaryUart(_reg));
 899              		.loc 1 629 0
 900 0028 3348     		ldr	r0, .L71
 901 002a FFF7FEFF 		bl	USART_ReceiveData
 902              	.LVL34:
 903              	.LBB19:
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 904              		.loc 1 630 0
 905 002e 334B     		ldr	r3, .L71+4
 906 0030 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 907 0032 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 908              	.LVL35:
 909 0034 012A     		cmp	r2, #1
 910 0036 08D0     		beq	.L60
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 911              		.loc 1 630 0 is_stmt 0 discriminator 2
 912 0038 D1F10101 		rsbs	r1, r1, #1
 913              	.LVL36:
 914 003c 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 915 003e 38BF     		it	cc
 916 0040 0021     		movcc	r1, #0
 917              	.LBE19:
 629:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     uint8_t b =  USART_ReceiveData(SecondaryUart(_reg));
 918              		.loc 1 629 0 is_stmt 1 discriminator 2
 919 0042 C0B2     		uxtb	r0, r0
 920              	.LVL37:
 921              	.LBB20:
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 922              		.loc 1 630 0 discriminator 2
 923 0044 0C46     		mov	r4, r1
 924 0046 72B9     		cbnz	r2, .L61
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 925              		.loc 1 630 0 is_stmt 0 discriminator 3
 926 0048 49B9     		cbnz	r1, .L62
 927              	.L60:
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 928              		.loc 1 630 0 discriminator 1
 929 004a 2C4B     		ldr	r3, .L71+4
 930 004c 0022     		movs	r2, #0
 931 004e 4621     		movs	r1, #70
 932 0050 1A70     		strb	r2, [r3, #0]
 933 0052 5970     		strb	r1, [r3, #1]
 934 0054 9A70     		strb	r2, [r3, #2]
 935 0056 DA70     		strb	r2, [r3, #3]
 936 0058 1A71     		strb	r2, [r3, #4]
 937 005a 9A71     		strb	r2, [r3, #6]
 938 005c 10BD     		pop	{r4, pc}
 939              	.L62:
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 940              		.loc 1 630 0 discriminator 5
 941 005e 0002     		lsls	r0, r0, #8
 942 0060 1881     		strh	r0, [r3, #8]	@ movhi
 943 0062 0122     		movs	r2, #1
 944 0064 0EE0     		b	.L70
 945              	.L61:
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 946              		.loc 1 630 0 discriminator 6
 947 0066 19B1     		cbz	r1, .L63
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 948              		.loc 1 630 0 discriminator 9
 949 0068 0122     		movs	r2, #1
 950 006a 1A70     		strb	r2, [r3, #0]
 951 006c 4622     		movs	r2, #70
 952 006e 16E0     		b	.L69
 953              	.L63:
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 954              		.loc 1 630 0 discriminator 10
 955 0070 012A     		cmp	r2, #1
 956 0072 0AD1     		bne	.L64
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 957              		.loc 1 630 0 discriminator 13
 958 0074 1A89     		ldrh	r2, [r3, #8]
 959 0076 8018     		adds	r0, r0, r2
 960 0078 214A     		ldr	r2, .L71+8
 961 007a 1881     		strh	r0, [r3, #8]	@ movhi
 962 007c 1178     		ldrb	r1, [r2, #0]	@ zero_extendqisi2
 963 007e 214A     		ldr	r2, .L71+12
 964 0080 1170     		strb	r1, [r2, #0]
 965 0082 0222     		movs	r2, #2
 966              	.L70:
 967 0084 9A70     		strb	r2, [r3, #2]
 968 0086 0322     		movs	r2, #3
 969 0088 09E0     		b	.L69
 970              	.L64:
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 971              		.loc 1 630 0 discriminator 12
 972 008a 022A     		cmp	r2, #2
 973 008c 09D1     		bne	.L65
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 974              		.loc 1 630 0 discriminator 16
 975 008e DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 976 0090 5871     		strb	r0, [r3, #5]
 977 0092 0AB9     		cbnz	r2, .L66
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 978              		.loc 1 630 0 discriminator 18
 979 0094 C009     		lsrs	r0, r0, #7
 980 0096 9871     		strb	r0, [r3, #6]
 981              	.L66:
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 982              		.loc 1 630 0 discriminator 19
 983 0098 184B     		ldr	r3, .L71+4
 984 009a 0322     		movs	r2, #3
 985 009c 9A70     		strb	r2, [r3, #2]
 986              	.L69:
 987 009e 5A70     		strb	r2, [r3, #1]
 988 00a0 10BD     		pop	{r4, pc}
 989              	.L65:
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 990              		.loc 1 630 0 discriminator 17
 991 00a2 032A     		cmp	r2, #3
 992 00a4 10D1     		bne	.L67
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 993              		.loc 1 630 0 discriminator 20
 994 00a6 0224     		movs	r4, #2
 995 00a8 5A70     		strb	r2, [r3, #1]
 996 00aa 9972     		strb	r1, [r3, #10]
 997              	.LVL38:
 998 00ac DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 999 00ae 9979     		ldrb	r1, [r3, #6]	@ zero_extendqisi2
 1000 00b0 9C70     		strb	r4, [r3, #2]
 1001 00b2 0724     		movs	r4, #7
 1002 00b4 04FB0121 		mla	r1, r4, r1, r2
 1003 00b8 5C79     		ldrb	r4, [r3, #5]	@ zero_extendqisi2
 1004 00ba 03EB4101 		add	r1, r3, r1, lsl #1
 1005 00be 40EA0420 		orr	r0, r0, r4, lsl #8
 1006              	.LVL39:
 1007 00c2 0132     		adds	r2, r2, #1
 1008 00c4 8881     		strh	r0, [r1, #12]	@ movhi
 1009 00c6 DA70     		strb	r2, [r3, #3]
 1010              	.L67:
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 1011              		.loc 1 630 0 discriminator 21
 1012 00c8 0C4B     		ldr	r3, .L71+4
 1013 00ca DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1014 00cc 062A     		cmp	r2, #6
 1015 00ce 12D9     		bls	.L57
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 1016              		.loc 1 630 0 discriminator 22
 1017 00d0 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 1018 00d2 0C49     		ldr	r1, .L71+12
 1019 00d4 0132     		adds	r2, r2, #1
 1020 00d6 0978     		ldrb	r1, [r1, #0]	@ zero_extendqisi2
 1021 00d8 D2B2     		uxtb	r2, r2
 1022 00da 9142     		cmp	r1, r2
 1023 00dc 1A71     		strb	r2, [r3, #4]
 1024 00de 03D1     		bne	.L68
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 1025              		.loc 1 630 0 discriminator 23
 1026 00e0 0122     		movs	r2, #1
 1027 00e2 9A72     		strb	r2, [r3, #10]
 1028 00e4 0022     		movs	r2, #0
 1029 00e6 1A71     		strb	r2, [r3, #4]
 1030              	.L68:
 630:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     SpektrumParser(b, SecondarySpektrumState, 1);
 1031              		.loc 1 630 0 discriminator 26
 1032 00e8 044B     		ldr	r3, .L71+4
 1033 00ea 0022     		movs	r2, #0
 1034 00ec 9A70     		strb	r2, [r3, #2]
 1035 00ee DA70     		strb	r2, [r3, #3]
 1036 00f0 9A71     		strb	r2, [r3, #6]
 1037 00f2 4622     		movs	r2, #70
 1038 00f4 5A70     		strb	r2, [r3, #1]
 1039              	.L57:
 1040 00f6 10BD     		pop	{r4, pc}
 1041              	.L72:
 1042              		.align	2
 1043              	.L71:
 1044 00f8 00500040 		.word	1073762304
 1045 00fc 00000000 		.word	.LANCHOR1
 1046 0100 00000000 		.word	.LANCHOR2
 1047 0104 00000000 		.word	.LANCHOR8
 1048              	.LBE20:
 1049              	.LBE18:
 1050              		.cfi_endproc
 1051              	.LFE33:
 1053              		.section	.text.DebugInit,"ax",%progbits
 1054              		.align	1
 1055              		.global	DebugInit
 1056              		.thumb
 1057              		.thumb_func
 1059              	DebugInit:
 1060              	.LFB34:
 640:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void DebugInit(void) {
 1061              		.loc 1 640 0 is_stmt 1
 1062              		.cfi_startproc
 1063              		@ args = 0, pretend = 0, frame = 8
 1064              		@ frame_needed = 0, uses_anonymous_args = 0
 1065 0000 37B5     		push	{r0, r1, r2, r4, r5, lr}
 1066              	.LCFI9:
 1067              		.cfi_def_cfa_offset 24
 1068              		.cfi_offset 14, -4
 1069              		.cfi_offset 5, -8
 1070              		.cfi_offset 4, -12
 1071              		.cfi_offset 2, -16
 1072              		.cfi_offset 1, -20
 1073              		.cfi_offset 0, -24
 641:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOC, ENABLE);
 1074              		.loc 1 641 0
 1075 0002 1020     		movs	r0, #16
 1076 0004 0121     		movs	r1, #1
 646:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(GPIOC, &GPIO_InitStructure);
 1077              		.loc 1 646 0
 1078 0006 0B4D     		ldr	r5, .L74
 641:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOC, ENABLE);
 1079              		.loc 1 641 0
 1080 0008 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 644:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 1081              		.loc 1 644 0
 1082 000c 1023     		movs	r3, #16
 643:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 1083              		.loc 1 643 0
 1084 000e 2024     		movs	r4, #32
 644:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 1085              		.loc 1 644 0
 1086 0010 8DF80730 		strb	r3, [sp, #7]
 646:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(GPIOC, &GPIO_InitStructure);
 1087              		.loc 1 646 0
 1088 0014 2846     		mov	r0, r5
 645:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1089              		.loc 1 645 0
 1090 0016 0323     		movs	r3, #3
 646:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(GPIOC, &GPIO_InitStructure);
 1091              		.loc 1 646 0
 1092 0018 01A9     		add	r1, sp, #4
 643:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 1093              		.loc 1 643 0
 1094 001a ADF80440 		strh	r4, [sp, #4]	@ movhi
 645:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1095              		.loc 1 645 0
 1096 001e 8DF80630 		strb	r3, [sp, #6]
 646:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(GPIOC, &GPIO_InitStructure);
 1097              		.loc 1 646 0
 1098 0022 FFF7FEFF 		bl	GPIO_Init
 647:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_WriteBit(GPIOC, GPIO_Pin_5 , Bit_RESET );
 1099              		.loc 1 647 0
 1100 0026 2846     		mov	r0, r5
 1101 0028 2146     		mov	r1, r4
 1102 002a 0022     		movs	r2, #0
 1103 002c FFF7FEFF 		bl	GPIO_WriteBit
 648:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }
 1104              		.loc 1 648 0
 1105 0030 3EBD     		pop	{r1, r2, r3, r4, r5, pc}
 1106              	.L75:
 1107 0032 00BF     		.align	2
 1108              	.L74:
 1109 0034 00100140 		.word	1073811456
 1110              		.cfi_endproc
 1111              	.LFE34:
 1113              		.section	.text.radio_control_spektrum_try_bind,"ax",%progbits
 1114              		.align	1
 1115              		.global	radio_control_spektrum_try_bind
 1116              		.thumb
 1117              		.thumb_func
 1119              	radio_control_spektrum_try_bind:
 1120              	.LFB35:
 665:arch/stm32/subsystems/radio_control/spektrum_arch.c **** void radio_control_spektrum_try_bind(void) {
 1121              		.loc 1 665 0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 16
 1124              		@ frame_needed = 0, uses_anonymous_args = 0
 1125 0000 7FB5     		push	{r0, r1, r2, r3, r4, r5, r6, lr}
 1126              	.LCFI10:
 1127              		.cfi_def_cfa_offset 32
 1128              		.cfi_offset 14, -4
 1129              		.cfi_offset 6, -8
 1130              		.cfi_offset 5, -12
 1131              		.cfi_offset 4, -16
 1132              		.cfi_offset 3, -20
 1133              		.cfi_offset 2, -24
 1134              		.cfi_offset 1, -28
 1135              		.cfi_offset 0, -32
 668:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   RCC_APB2PeriphClockCmd(BIND_PIN_PERIPH , ENABLE);
 1136              		.loc 1 668 0
 1137 0002 1020     		movs	r0, #16
 1138 0004 0121     		movs	r1, #1
 1139 0006 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 673:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 1140              		.loc 1 673 0
 1141 000a 4823     		movs	r3, #72
 672:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Pin = BIND_PIN;
 1142              		.loc 1 672 0
 1143 000c 0824     		movs	r4, #8
 673:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 1144              		.loc 1 673 0
 1145 000e 8DF80F30 		strb	r3, [sp, #15]
 675:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(BIND_PIN_PORT, &GPIO_InitStructure);
 1146              		.loc 1 675 0
 1147 0012 4248     		ldr	r0, .L84
 674:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 1148              		.loc 1 674 0
 1149 0014 0223     		movs	r3, #2
 675:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(BIND_PIN_PORT, &GPIO_InitStructure);
 1150              		.loc 1 675 0
 1151 0016 03A9     		add	r1, sp, #12
 672:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Pin = BIND_PIN;
 1152              		.loc 1 672 0
 1153 0018 ADF80C40 		strh	r4, [sp, #12]	@ movhi
 674:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 1154              		.loc 1 674 0
 1155 001c 8DF80E30 		strb	r3, [sp, #14]
 675:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(BIND_PIN_PORT, &GPIO_InitStructure);
 1156              		.loc 1 675 0
 1157 0020 FFF7FEFF 		bl	GPIO_Init
 678:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   if (GPIO_ReadInputDataBit(BIND_PIN_PORT, BIND_PIN))
 1158              		.loc 1 678 0
 1159 0024 2146     		mov	r1, r4
 1160 0026 3D48     		ldr	r0, .L84
 1161 0028 FFF7FEFF 		bl	GPIO_ReadInputDataBit
 1162 002c 0446     		mov	r4, r0
 1163 002e 0028     		cmp	r0, #0
 1164 0030 73D1     		bne	.L76
 1165              	.LBB21:
 1166              	.LBB22:
 737:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 1167              		.loc 1 737 0
 1168 0032 0121     		movs	r1, #1
 1169 0034 1020     		movs	r0, #16
 1170 0036 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 740:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 1171              		.loc 1 740 0
 1172 003a 6846     		mov	r0, sp
 1173 003c FFF7FEFF 		bl	TIM_TimeBaseStructInit
 741:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_Prescaler = (AHB_CLK / DELAY_TIM_FREQUENCY) - 1;
 1174              		.loc 1 741 0
 1175 0040 4723     		movs	r3, #71
 1176 0042 ADF80030 		strh	r3, [sp, #0]	@ movhi
 745:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 1177              		.loc 1 745 0
 1178 0046 3648     		ldr	r0, .L84+4
 742:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_Period = UINT16_MAX;
 1179              		.loc 1 742 0
 1180 0048 4FF6FF73 		movw	r3, #65535
 745:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 1181              		.loc 1 745 0
 1182 004c 6946     		mov	r1, sp
 742:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_Period = UINT16_MAX;
 1183              		.loc 1 742 0
 1184 004e ADF80430 		strh	r3, [sp, #4]	@ movhi
 743:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 1185              		.loc 1 743 0
 1186 0052 ADF80640 		strh	r4, [sp, #6]	@ movhi
 744:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 1187              		.loc 1 744 0
 1188 0056 ADF80240 		strh	r4, [sp, #2]	@ movhi
 745:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 1189              		.loc 1 745 0
 1190 005a FFF7FEFF 		bl	TIM_TimeBaseInit
 748:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   TIM_Cmd(TIM6, ENABLE);
 1191              		.loc 1 748 0
 1192 005e 3048     		ldr	r0, .L84+4
 1193 0060 0121     		movs	r1, #1
 1194 0062 FFF7FEFF 		bl	TIM_Cmd
 1195              	.LBE22:
 1196              	.LBE21:
 685:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   RCC_APB2PeriphClockCmd(PrimaryUart(_Periph) , ENABLE);
 1197              		.loc 1 685 0
 1198 0066 0420     		movs	r0, #4
 1199 0068 0121     		movs	r1, #1
 1200 006a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 687:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Pin = PrimaryUart(_RxPin);
 1201              		.loc 1 687 0
 1202 006e 4FF48066 		mov	r6, #1024
 689:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1203              		.loc 1 689 0
 1204 0072 0324     		movs	r4, #3
 688:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 1205              		.loc 1 688 0
 1206 0074 1025     		movs	r5, #16
 690:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(PrimaryUart(_RxPort), &GPIO_InitStructure);
 1207              		.loc 1 690 0
 1208 0076 2B48     		ldr	r0, .L84+8
 1209 0078 03A9     		add	r1, sp, #12
 687:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Pin = PrimaryUart(_RxPin);
 1210              		.loc 1 687 0
 1211 007a ADF80C60 		strh	r6, [sp, #12]	@ movhi
 689:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1212              		.loc 1 689 0
 1213 007e 8DF80E40 		strb	r4, [sp, #14]
 688:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 1214              		.loc 1 688 0
 1215 0082 8DF80F50 		strb	r5, [sp, #15]
 690:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(PrimaryUart(_RxPort), &GPIO_InitStructure);
 1216              		.loc 1 690 0
 1217 0086 FFF7FEFF 		bl	GPIO_Init
 692:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_WriteBit(PrimaryUart(_RxPort), PrimaryUart(_RxPin) , Bit_SET );
 1218              		.loc 1 692 0
 1219 008a 0122     		movs	r2, #1
 1220 008c 3146     		mov	r1, r6
 1221 008e 2548     		ldr	r0, .L84+8
 1222 0090 FFF7FEFF 		bl	GPIO_WriteBit
 695:arch/stm32/subsystems/radio_control/spektrum_arch.c ****    RCC_APB2PeriphClockCmd(SecondaryUart(_Periph) , ENABLE);
 1223              		.loc 1 695 0
 1224 0094 2020     		movs	r0, #32
 1225 0096 0121     		movs	r1, #1
 1226 0098 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 697:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Pin = SecondaryUart(_RxPin);
 1227              		.loc 1 697 0
 1228 009c 0426     		movs	r6, #4
 700:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(SecondaryUart(_RxPort), &GPIO_InitStructure);
 1229              		.loc 1 700 0
 1230 009e 2248     		ldr	r0, .L84+12
 1231 00a0 03A9     		add	r1, sp, #12
 699:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1232              		.loc 1 699 0
 1233 00a2 8DF80E40 		strb	r4, [sp, #14]
 697:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Pin = SecondaryUart(_RxPin);
 1234              		.loc 1 697 0
 1235 00a6 ADF80C60 		strh	r6, [sp, #12]	@ movhi
 698:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 1236              		.loc 1 698 0
 1237 00aa 8DF80F50 		strb	r5, [sp, #15]
 700:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_Init(SecondaryUart(_RxPort), &GPIO_InitStructure);
 1238              		.loc 1 700 0
 1239 00ae FFF7FEFF 		bl	GPIO_Init
 702:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   GPIO_WriteBit(SecondaryUart(_RxPort), SecondaryUart(_RxPin) , Bit_SET );
 1240              		.loc 1 702 0
 1241 00b2 1D48     		ldr	r0, .L84+12
 1242 00b4 3146     		mov	r1, r6
 1243 00b6 0122     		movs	r2, #1
 1244 00b8 FFF7FEFF 		bl	GPIO_WriteBit
 1245              	.LVL40:
 1246 00bc 3D24     		movs	r4, #61
 1247              	.LVL41:
 1248              	.L78:
 1249              	.LBB23:
 1250              	.LBB24:
 757:arch/stm32/subsystems/radio_control/spektrum_arch.c **** 
 758:arch/stm32/subsystems/radio_control/spektrum_arch.c **** /* wait busy loop, milliseconds */
 759:arch/stm32/subsystems/radio_control/spektrum_arch.c **** static void DelayMs( uint16_t mSecs ) {
 760:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   for(int i = 0; i < mSecs; i++) {
 761:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     DelayUs(DELAY_TIM_FREQUENCY / 1000);
 1251              		.loc 1 761 0
 1252 00be 4FF47A70 		mov	r0, #1000
 1253 00c2 FFF7FEFF 		bl	DelayUs
 760:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   for(int i = 0; i < mSecs; i++) {
 1254              		.loc 1 760 0
 1255 00c6 013C     		subs	r4, r4, #1
 1256 00c8 F9D1     		bne	.L78
 1257 00ca 0524     		movs	r4, #5
 1258              	.L79:
 1259              	.LBE24:
 1260              	.LBE23:
 1261              	.LBB25:
 711:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     GPIO_WriteBit(PrimaryUart(_RxPort), PrimaryUart(_RxPin), Bit_RESET );
 1262              		.loc 1 711 0 discriminator 2
 1263 00cc 0022     		movs	r2, #0
 1264 00ce 4FF48061 		mov	r1, #1024
 1265 00d2 1448     		ldr	r0, .L84+8
 1266 00d4 FFF7FEFF 		bl	GPIO_WriteBit
 712:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     DelayUs(118);
 1267              		.loc 1 712 0 discriminator 2
 1268 00d8 7620     		movs	r0, #118
 1269 00da FFF7FEFF 		bl	DelayUs
 713:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     GPIO_WriteBit(PrimaryUart(_RxPort), PrimaryUart(_RxPin), Bit_SET );
 1270              		.loc 1 713 0 discriminator 2
 1271 00de 0122     		movs	r2, #1
 1272 00e0 1048     		ldr	r0, .L84+8
 1273 00e2 4FF48061 		mov	r1, #1024
 1274 00e6 FFF7FEFF 		bl	GPIO_WriteBit
 714:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     DelayUs(122);
 1275              		.loc 1 714 0 discriminator 2
 1276 00ea 7A20     		movs	r0, #122
 1277 00ec FFF7FEFF 		bl	DelayUs
 709:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   for (int i = 0; i < MASTER_RECEIVER_PULSES ; i++)
 1278              		.loc 1 709 0 discriminator 2
 1279 00f0 013C     		subs	r4, r4, #1
 1280 00f2 EBD1     		bne	.L79
 709:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   for (int i = 0; i < MASTER_RECEIVER_PULSES ; i++)
 1281              		.loc 1 709 0 is_stmt 0
 1282 00f4 0624     		movs	r4, #6
 1283              	.L80:
 1284              	.LBE25:
 1285              	.LBB26:
 720:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     GPIO_WriteBit(SecondaryUart(_RxPort), SecondaryUart(_RxPin), Bit_RESET );
 1286              		.loc 1 720 0 is_stmt 1 discriminator 2
 1287 00f6 0421     		movs	r1, #4
 1288 00f8 0022     		movs	r2, #0
 1289 00fa 0B48     		ldr	r0, .L84+12
 1290 00fc FFF7FEFF 		bl	GPIO_WriteBit
 721:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     DelayUs(120);
 1291              		.loc 1 721 0 discriminator 2
 1292 0100 7820     		movs	r0, #120
 1293 0102 FFF7FEFF 		bl	DelayUs
 722:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     GPIO_WriteBit(SecondaryUart(_RxPort), SecondaryUart(_RxPin), Bit_SET );
 1294              		.loc 1 722 0 discriminator 2
 1295 0106 0421     		movs	r1, #4
 1296 0108 0122     		movs	r2, #1
 1297 010a 0748     		ldr	r0, .L84+12
 1298 010c FFF7FEFF 		bl	GPIO_WriteBit
 723:arch/stm32/subsystems/radio_control/spektrum_arch.c ****     DelayUs(120);
 1299              		.loc 1 723 0 discriminator 2
 1300 0110 7820     		movs	r0, #120
 1301 0112 FFF7FEFF 		bl	DelayUs
 718:arch/stm32/subsystems/radio_control/spektrum_arch.c ****   for (int i = 0; i < SLAVE_RECEIVER_PULSES; i++)
 1302              		.loc 1 718 0 discriminator 2
 1303 0116 013C     		subs	r4, r4, #1
 1304 0118 EDD1     		bne	.L80
 1305              	.LVL42:
 1306              	.L76:
 1307              	.LBE26:
 726:arch/stm32/subsystems/radio_control/spektrum_arch.c **** }
 1308              		.loc 1 726 0
 1309 011a 7FBD     		pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 1310              	.L85:
 1311              		.align	2
 1312              	.L84:
 1313 011c 00100140 		.word	1073811456
 1314 0120 00100040 		.word	1073745920
 1315 0124 00080140 		.word	1073809408
 1316 0128 00140140 		.word	1073812480
 1317              		.cfi_endproc
 1318              	.LFE35:
 1320              		.global	SpektrumSigns
 1321              		.global	SpektrumBuf
 1322              		.global	SecondarySpektrumState
 1323              		.global	PrimarySpektrumState
 1324              		.section	.bss.TmpExpFrames.3433,"aw",%nobits
 1325              		.set	.LANCHOR8,. + 0
 1328              	TmpExpFrames.3433:
 1329 0000 00       		.space	1
 1330              		.section	.bss.TmpEncType.3424,"aw",%nobits
 1331              		.set	.LANCHOR6,. + 0
 1334              	TmpEncType.3424:
 1335 0000 00       		.space	1
 1336              		.section	.data.SpektrumSigns,"aw",%progbits
 1337              		.set	.LANCHOR5,. + 0
 1340              	SpektrumSigns:
 1341 0000 01       		.byte	1
 1342 0001 FF       		.byte	-1
 1343 0002 FF       		.byte	-1
 1344 0003 FF       		.byte	-1
 1345 0004 01       		.byte	1
 1346 0005 FF       		.byte	-1
 1347 0006 01       		.byte	1
 1348 0007 01       		.byte	1
 1349 0008 01       		.byte	1
 1350 0009 01       		.byte	1
 1351 000a 01       		.byte	1
 1352 000b 01       		.byte	1
 1353              		.section	.bss.ExpectedFrames,"aw",%nobits
 1354              		.set	.LANCHOR2,. + 0
 1357              	ExpectedFrames:
 1358 0000 00       		.space	1
 1359              		.section	.data.PrimarySpektrumState,"aw",%progbits
 1360              		.align	1
 1361              		.set	.LANCHOR0,. + 0
 1364              	PrimarySpektrumState:
 1365 0000 01       		.byte	1
 1366 0001 00       		.byte	0
 1367 0002 00       		.byte	0
 1368 0003 00       		.byte	0
 1369 0004 00       		.byte	0
 1370 0005 00       		.byte	0
 1371 0006 00       		.byte	0
 1372 0007 00       		.space	1
 1373 0008 0000     		.short	0
 1374 000a 00       		.byte	0
 1375 000b 00000000 		.space	29
 1375      00000000 
 1375      00000000 
 1375      00000000 
 1375      00000000 
 1376              		.section	.bss.SpektrumBuf,"aw",%nobits
 1377              		.align	1
 1378              		.set	.LANCHOR4,. + 0
 1381              	SpektrumBuf:
 1382 0000 00000000 		.space	28
 1382      00000000 
 1382      00000000 
 1382      00000000 
 1382      00000000 
 1383              		.section	.bss.EncodingType,"aw",%nobits
 1384              		.set	.LANCHOR3,. + 0
 1387              	EncodingType:
 1388 0000 00       		.space	1
 1389              		.section	.data.SecondarySpektrumState,"aw",%progbits
 1390              		.align	1
 1391              		.set	.LANCHOR1,. + 0
 1394              	SecondarySpektrumState:
 1395 0000 01       		.byte	1
 1396 0001 00       		.byte	0
 1397 0002 00       		.byte	0
 1398 0003 00       		.byte	0
 1399 0004 00       		.byte	0
 1400 0005 00       		.byte	0
 1401 0006 00       		.byte	0
 1402 0007 00       		.space	1
 1403 0008 0000     		.short	0
 1404 000a 00       		.byte	0
 1405 000b 00000000 		.space	29
 1405      00000000 
 1405      00000000 
 1405      00000000 
 1405      00000000 
 1406              		.section	.bss.TmpExpFrames.3425,"aw",%nobits
 1407              		.set	.LANCHOR7,. + 0
 1410              	TmpExpFrames.3425:
 1411 0000 00       		.space	1
 1412              		.text
 1413              	.Letext0:
 1414              		.file 2 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 1415              		.file 3 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 1416              		.file 4 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 1417              		.file 5 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 1418              		.file 6 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 1419              		.file 7 "/opt/paparazzi/arm-multilib/lib/gcc/arm-none-eabi/4.6.2/../../../../arm-none-eabi/include
 1420              		.file 8 "./paparazzi.h"
 1421              		.file 9 "./subsystems/radio_control.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 spektrum_arch.c
     /tmp/ccdcSYM8.s:18     .text.DelayUs:0000000000000000 $t
     /tmp/ccdcSYM8.s:22     .text.DelayUs:0000000000000000 DelayUs
     /tmp/ccdcSYM8.s:48     .text.DelayUs:0000000000000014 $d
     /tmp/ccdcSYM8.s:53     .text.RadioControlEventImp:0000000000000000 $t
     /tmp/ccdcSYM8.s:58     .text.RadioControlEventImp:0000000000000000 RadioControlEventImp
     /tmp/ccdcSYM8.s:310    .text.RadioControlEventImp:0000000000000114 $d
     /tmp/ccdcSYM8.s:321    .text.SpektrumTimerInit:0000000000000000 $t
     /tmp/ccdcSYM8.s:326    .text.SpektrumTimerInit:0000000000000000 SpektrumTimerInit
     /tmp/ccdcSYM8.s:408    .text.SpektrumTimerInit:0000000000000070 $d
     /tmp/ccdcSYM8.s:413    .text.tim6_irq_handler:0000000000000000 $t
     /tmp/ccdcSYM8.s:418    .text.tim6_irq_handler:0000000000000000 tim6_irq_handler
     /tmp/ccdcSYM8.s:453    .text.tim6_irq_handler:0000000000000020 $d
     /tmp/ccdcSYM8.s:460    .text.SpektrumUartInit:0000000000000000 $t
     /tmp/ccdcSYM8.s:465    .text.SpektrumUartInit:0000000000000000 SpektrumUartInit
     /tmp/ccdcSYM8.s:636    .text.SpektrumUartInit:0000000000000110 $d
     /tmp/ccdcSYM8.s:644    .text.radio_control_impl_init:0000000000000000 $t
     /tmp/ccdcSYM8.s:649    .text.radio_control_impl_init:0000000000000000 radio_control_impl_init
     /tmp/ccdcSYM8.s:670    .text.usart1_irq_handler:0000000000000000 $t
     /tmp/ccdcSYM8.s:675    .text.usart1_irq_handler:0000000000000000 usart1_irq_handler
     /tmp/ccdcSYM8.s:853    .text.usart1_irq_handler:0000000000000104 $d
     /tmp/ccdcSYM8.s:865    .text.usart5_irq_handler:0000000000000000 $t
     /tmp/ccdcSYM8.s:870    .text.usart5_irq_handler:0000000000000000 usart5_irq_handler
     /tmp/ccdcSYM8.s:1044   .text.usart5_irq_handler:00000000000000f8 $d
     /tmp/ccdcSYM8.s:1054   .text.DebugInit:0000000000000000 $t
     /tmp/ccdcSYM8.s:1059   .text.DebugInit:0000000000000000 DebugInit
     /tmp/ccdcSYM8.s:1109   .text.DebugInit:0000000000000034 $d
     /tmp/ccdcSYM8.s:1114   .text.radio_control_spektrum_try_bind:0000000000000000 $t
     /tmp/ccdcSYM8.s:1119   .text.radio_control_spektrum_try_bind:0000000000000000 radio_control_spektrum_try_bind
     /tmp/ccdcSYM8.s:1313   .text.radio_control_spektrum_try_bind:000000000000011c $d
     /tmp/ccdcSYM8.s:1340   .data.SpektrumSigns:0000000000000000 SpektrumSigns
     /tmp/ccdcSYM8.s:1381   .bss.SpektrumBuf:0000000000000000 SpektrumBuf
     /tmp/ccdcSYM8.s:1394   .data.SecondarySpektrumState:0000000000000000 SecondarySpektrumState
     /tmp/ccdcSYM8.s:1364   .data.PrimarySpektrumState:0000000000000000 PrimarySpektrumState
     /tmp/ccdcSYM8.s:1328   .bss.TmpExpFrames.3433:0000000000000000 TmpExpFrames.3433
     /tmp/ccdcSYM8.s:1329   .bss.TmpExpFrames.3433:0000000000000000 $d
     /tmp/ccdcSYM8.s:1334   .bss.TmpEncType.3424:0000000000000000 TmpEncType.3424
     /tmp/ccdcSYM8.s:1335   .bss.TmpEncType.3424:0000000000000000 $d
     /tmp/ccdcSYM8.s:1357   .bss.ExpectedFrames:0000000000000000 ExpectedFrames
     /tmp/ccdcSYM8.s:1358   .bss.ExpectedFrames:0000000000000000 $d
     /tmp/ccdcSYM8.s:1360   .data.PrimarySpektrumState:0000000000000000 $d
     /tmp/ccdcSYM8.s:1377   .bss.SpektrumBuf:0000000000000000 $d
     /tmp/ccdcSYM8.s:1387   .bss.EncodingType:0000000000000000 EncodingType
     /tmp/ccdcSYM8.s:1388   .bss.EncodingType:0000000000000000 $d
     /tmp/ccdcSYM8.s:1390   .data.SecondarySpektrumState:0000000000000000 $d
     /tmp/ccdcSYM8.s:1410   .bss.TmpExpFrames.3425:0000000000000000 TmpExpFrames.3425
     /tmp/ccdcSYM8.s:1411   .bss.TmpExpFrames.3425:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
radio_control
RCC_APB1PeriphClockCmd
TIM_TimeBaseStructInit
TIM_TimeBaseInit
NVIC_Init
TIM_ITConfig
TIM_ClearFlag
TIM_Cmd
TIM_ClearITPendingBit
RCC_APB2PeriphClockCmd
GPIO_Init
USART_Init
USART_ITConfig
usart_set_baudrate
USART_Cmd
USART_GetITStatus
USART_ReceiveData
GPIO_WriteBit
GPIO_ReadInputDataBit
